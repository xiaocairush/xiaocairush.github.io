{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs \u00b6 For full documentation visit mkdocs.org . Commands \u00b6 mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message. Project layout \u00b6 mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/","text":"[toc] BlockingQueue\u6e90\u7801\u5256\u6790 \u00b6 \u53c2\u8003 \u00b6 \u82f1\u6587\u6587\u6863 \u82f1\u6587 jenkov \u4e2d\u6587 defonds package java.util.concurrent; import java.util.Collection; import java.util.Queue; public interface BlockingQueue<E> extends Queue<E> { boolean add(E e); boolean offer(E e); void put(E e) throws InterruptedException; boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException; E take() throws InterruptedException; E poll(long timeout, TimeUnit unit) throws InterruptedException; int remainingCapacity(); boolean remove(Object o); public boolean contains(Object o); //\u4ece\u961f\u5217\u4e2d\u79fb\u9664\u6240\u6709\u53ef\u7528\u7684\u5143\u7d20\uff0c\u5e76\u5c06\u79fb\u9664\u7684\u5143\u7d20\u52a0\u5165\u5230\u7ed9\u5b9a\u7684\u96c6\u5408\u4e2d\u3002\u5f53\u4f60\u9700\u8981\u91cd\u590dpoll\u7684\u65f6\u5019\u8fd9\u4e2a\u64cd\u4f5c\u6bd4\u8f83\u6709\u6548\u3002 int drainTo(Collection<? super E> c); int drainTo(Collection<? super E> c, int maxElements); } BlockingQueue\u7684\u5b9e\u73b0\u7c7b\u6709 ArrayBlockingQueue DelayQueue LinkedBlockingQueue PriorityBlockingQueue SynchronousQueue ArrayBlockingQueue \u00b6 \u8f6c\u8f7d\u5730\u5740 \u6838\u5fc3\u7ec4\u6210\uff1a \u00b6 /** \u5e95\u5c42\u7ef4\u62a4\u961f\u5217\u5143\u7d20\u7684\u6570\u7ec4 */ final Object[] items; /** \u5f53\u8bfb\u53d6\u5143\u7d20\u65f6\u6570\u7ec4\u7684\u4e0b\u6807(\u8fd9\u91cc\u79f0\u4e3a\u8bfb\u4e0b\u6807) */ int takeIndex; /** \u6dfb\u52a0\u5143\u7d20\u65f6\u6570\u7ec4\u7684\u4e0b\u6807 (\u8fd9\u91cc\u79f0\u4e3a\u5199\u5c0f\u6807)*/ int putIndex; /** \u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e2a\u6570 */ int count; /** \u7528\u4e8e\u5e76\u53d1\u63a7\u5236\u7684\u5de5\u5177\u7c7b**/ final ReentrantLock lock; /** \u4fdd\u8bc1\u6240\u6709\u8bbf\u95ee\u7684\u4e3b\u8981\u7684\u9501*/ final ReentrantLock lock; /** \u63a7\u5236take\u64cd\u4f5c\u65f6\u662f\u5426\u8ba9\u7ebf\u7a0b\u7b49\u5f85 */ private final Condition notEmpty; /** \u63a7\u5236put\u64cd\u4f5c\u65f6\u662f\u5426\u8ba9\u7ebf\u7a0b\u7b49\u5f85 */ private final Condition notFull; \u53d6\u5143\u7d20\u903b\u8f91 \u00b6 \u5728\u961f\u5217\u662f\u7a7a\u7684\u65f6\u5019\u9700\u8981\u7b49\u5f85\u5230\u5b83\u4e0d\u662f\u7a7a\uff0c\u540c\u65f6take\u9700\u8981\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\u6027\u3002 public E take() throws InterruptedException { final ReentrantLock lock = this.lock; /* \u5c1d\u8bd5\u83b7\u53d6\u9501\u4e4b\u524d\uff0c\u68c0\u6d4b\u5f53\u524d\u7ebf\u7a0b\u662f\u5426\u88ab\u4e2d\u65ad\uff0c\u5982\u679c\u5df2\u88ab\u4e2d\u65ad\u5c31\u629b\u51faInterruptedException */ lock.lockInterruptibly(); try { /* \u5982\u679c\u6b64\u65f6\u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\u4e3a0,\u90a3\u4e48\u5c31\u8ba9\u5f53\u524d\u7ebf\u7a0bwait,\u5e76\u4e14\u91ca\u653e\u9501\u3002 \u6ce8\u610f:\u8fd9\u91cc\u4f7f\u7528\u4e86while\u8fdb\u884c\u91cd\u590d\u68c0\u67e5\uff0c\u662f\u4e3a\u4e86\u9632\u6b62\u5f53\u524d\u7ebf\u7a0b\u53ef\u80fd\u7531\u4e8e\u5176\u4ed6\u672a\u77e5\u7684\u539f\u56e0\u88ab\u5524\u9192\u3002 (\u901a\u5e38\u8fd9\u79cd\u60c5\u51b5\u88ab\u79f0\u4e3a\"spurious wakeup\") */ while (count == 0) // \u4f7f\u5f53\u524d\u7ebf\u7a0b\u4e00\u76f4\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\uff0c\u76f4\u5230notEmpty\u53d1\u51fasignal\u4fe1\u53f7 notEmpty.await(); //\u5982\u679c\u961f\u5217\u4e0d\u4e3a\u7a7a\uff0c\u5219\u4ece\u961f\u5217\u7684\u5934\u90e8\u53d6\u5143\u7d20 return extract(); } finally { //\u5b8c\u6210\u9501\u7684\u91ca\u653e lock.unlock(); } } /* \u6839\u636etakeIndex\u6765\u83b7\u53d6\u5f53\u524d\u7684\u5143\u7d20,\u7136\u540e\u901a\u77e5\u5176\u4ed6\u7b49\u5f85\u7684\u7ebf\u7a0b\u3002 Call only when holding lock.(\u53ea\u6709\u5f53\u524d\u7ebf\u7a0b\u5df2\u7ecf\u6301\u6709\u4e86\u9501\u4e4b\u540e\uff0c\u5b83\u624d\u80fd\u8c03\u7528\u8be5\u65b9\u6cd5) */ private E extract() { final Object[] items = this.items; //\u6839\u636etakeIndex\u83b7\u53d6\u5143\u7d20,\u56e0\u4e3a\u5143\u7d20\u662f\u4e00\u4e2aObject\u7c7b\u578b\u7684\u6570\u7ec4,\u56e0\u6b64\u5b83\u901a\u8fc7cast\u65b9\u6cd5\u5c06\u5176\u8f6c\u6362\u6210\u6cdb\u578b\u3002 E x = this.<E>cast(items[takeIndex]); //\u5c06\u5f53\u524d\u4f4d\u7f6e\u7684\u5143\u7d20\u8bbe\u7f6e\u4e3anull items[takeIndex] = null; //\u5e76\u4e14\u5c06takeIndex++,\u6ce8\u610f\uff1a\u8fd9\u91cc\u56e0\u4e3a\u5df2\u7ecf\u4f7f\u7528\u4e86\u9501\uff0c\u56e0\u6b64inc\u65b9\u6cd5\u4e2d\u6ca1\u6709\u4f7f\u7528\u5230\u539f\u5b50\u64cd\u4f5c takeIndex = inc(takeIndex); //\u5c06\u961f\u5217\u4e2d\u7684\u603b\u7684\u5143\u7d20\u51cf1 --count; //\u5524\u9192\u5176\u4ed6\u7b49\u5f85\u7684\u7ebf\u7a0b notFull.signal(); return x; } \u5b58\u5143\u7d20\u903b\u8f91 \u00b6 public void put(E e) throws InterruptedException { checkNotNull(e); final ReentrantLock lock = this.lock; //\u8fdb\u884c\u9501\u7684\u62a2\u5360 lock.lockInterruptibly(); try { /*\u5f53\u961f\u5217\u7684\u957f\u5ea6\u7b49\u4e8e\u6570\u7ec4\u7684\u957f\u5ea6,\u6b64\u65f6\u8bf4\u660e\u961f\u5217\u5df2\u7ecf\u6ee1\u4e86,\u8fd9\u91cc\u540c\u6837 \u4f7f\u7528\u4e86while\u6765\u65b9\u5f0f\u5f53\u524d\u7ebf\u7a0b\u88ab\"\u4f2a\u5524\u9192\"\u3002*/ while (count == items.length) //\u5219\u8ba9\u5f53\u524d\u7ebf\u7a0b\u5904\u4e8e\u7b49\u5f85\u72b6\u6001 notFull.await(); //\u4e00\u65e6\u83b7\u53d6\u5230\u9501\u5e76\u4e14\u961f\u5217\u8fd8\u672a\u6ee1\u65f6\uff0c\u5219\u6267\u884cinsert\u64cd\u4f5c\u3002 insert(e); } finally { //\u5b8c\u6210\u9501\u7684\u91ca\u653e lock.unlock(); } } //\u8be5\u65b9\u6cd5\u7684\u903b\u8f91\u975e\u5e38\u7b80\u5355 private void insert(E x) { //\u5c06\u5f53\u524d\u5143\u7d20\u8bbe\u7f6e\u5230putIndex\u4f4d\u7f6e items[putIndex] = x; //\u8ba9putIndex++ putIndex = inc(putIndex); //\u5c06\u961f\u5217\u7684\u5927\u5c0f\u52a01 ++count; //\u5524\u9192\u5176\u4ed6\u6b63\u5728\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\u7684\u7ebf\u7a0b notEmpty.signal(); } inc \u00b6 \u5728extract\u548cinsert\u7684\u65f6\u5019\u90fd\u7528\u5230\u4e86inc\u65b9\u6cd5\uff0c\u53ef\u4ee5\u770b\u51fa\u6570\u7ec4\u7a7a\u95f4\u88ab\u5faa\u73af\u5229\u7528\u4e86\uff0c\u56e0\u6b64ArrayBlockingQueue\u5176\u5b9e\u662f\u4e00\u4e2a\u5faa\u73af\u961f\u5217 final int inc(int i) { //\u5f53takeIndex\u7684\u503c\u7b49\u4e8e\u6570\u7ec4\u7684\u957f\u5ea6\u65f6,\u5c31\u4f1a\u91cd\u65b0\u7f6e\u4e3a0\uff0c\u8fd9\u4e2a\u4e00\u4e2a\u5faa\u73af\u9012\u589e\u7684\u8fc7\u7a0b return (++i == items.length) ? 0 : i; } DelayQueue \u00b6 \u8fdb\u5165DelayQueue\u7684\u5143\u7d20\u5fc5\u987b\u5b9e\u73b0 java.util.concurrent.Delayed \u63a5\u53e3\uff1a public interface Delayed extends Comparable<Delayed< { public long getDelay(TimeUnit timeUnit); } \u5f53getDelay\u65b9\u6cd5\u8fd4\u56de\u5ef6\u8fdf\u7684\u662f 0 \u6216\u8005\u8d1f\u503c\u65f6\uff0c\u5c06\u88ab\u8ba4\u4e3a\u8fc7\u671f\uff0c\u8be5\u5143\u7d20\u5c06\u4f1a\u5728 DelayQueue \u7684\u4e0b\u4e00\u6b21take\u88ab\u8c03\u7528\u7684\u65f6\u5019\u88ab\u91ca\u653e\u6389\u3002 \u539f\u7406\u5b9e\u73b0\u53c2\u8003\u6587\u6863 \u6838\u5fc3\u7ec4\u6210 \u00b6 private final transient ReentrantLock lock = new ReentrantLock(); // \u7528\u4e8e\u6839\u636edelay\u65f6\u95f4\u6392\u5e8f\u7684\u4f18\u5148\u7ea7\u961f\u5217 private final PriorityQueue<E> q = new PriorityQueue<E>(); // \u8fd9\u4e2a\u53d8\u91cf\u7528\u6765\u4fdd\u5b58\u5de5\u4f5c\u7ebf\u7a0b\u7684\u5f15\u7528\uff0c\u901a\u8fc7\u51cf\u5c11\u7ebf\u7a0b\u5207\u6362 private Thread leader = null; private final Condition available = lock.newCondition(); leader-follower\u6a21\u5f0f \u00b6 \u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0 take \u00b6 // \u83b7\u53d6\u961f\u5217\u4e2d\u9996\u5143\u7d20\uff0c\u5982\u679c\u8be5\u5143\u7d20\u672a\u8fc7\u671f\u5c31\u9700\u8981\u7b49\u5f85\u8be5\u5143\u7d20\u8fc7\u671f\uff0c\u7136\u540e\u53d6\u51fa\u8be5\u5143\u7d20 public E take() throws InterruptedException { final ReentrantLock lock = this.lock; lock.lockInterruptibly(); try { for (;;) { // \u4ece\u4f18\u5148\u961f\u5217\u4e2d\u53d6\u51fa\u4f46\u4e0d\u5220\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20 E first = q.peek(); if (first == null) // \u963b\u585e\u961f\u5217\u4e3a\u7a7a\u7684\u72b6\u6001\u4e0b\u9700\u8981\u7b49\u5f85 available.await(); else { // \u963b\u585e\u961f\u5217\u975e\u7a7a\uff0c\u4e14leader\u4e3anull // \u68c0\u6d4bfirst\u662f\u5426\u8fc7\u671f\uff0c\u5982\u679c\u8fc7\u671f\u5c31\u53d6\u51fafirst\u5e76\u8fd4\u56de long delay = first.getDelay(NANOSECONDS); if (delay <= 0) return q.poll(); // first\u6ca1\u6709\u8fc7\u671f\uff0c\u9700\u8981\u7ee7\u7eed\u7b49\u5f85 first = null; // \u5728\u7b49\u5f85\u671f\u95f4first\u4e0d\u6301\u6709\u5f15\u7528\uff0c\u662f\u56e0\u4e3afirst\u6709\u53ef\u80fd\u88ab\u5176\u5b83\u7ebf\u7a0b\u62ff\u8d70\u4e86\uff0c\u4e14\u5176\u5b83\u7ebf\u7a0b\u7528\u5b8c\u4e4b\u540e\u9700\u8981GC\u56de\u6536\u6389 // \u5f53\u524d\u7ebf\u7a0b\u9700\u8981\u7ade\u9009leader if (leader != null) available.await(); else { // \u5f53\u524d\u7ebf\u7a0b\u7ade\u9009leader\u6210\u529f Thread thisThread = Thread.currentThread(); leader = thisThread; try { // \u7b49\u5f85\u9996\u5143\u7d20\u8fc7\u671f\uff0c\u53ef\u51cf\u5c11\u7ebf\u7a0b\u5207\u6362\u65f6\u95f4\uff0c\u4ece\u800c\u63d0\u9ad8\u6548\u7387 available.awaitNanos(delay); } finally { if (leader == thisThread) leader = null; } } } } } finally { // \u5982\u679c\u963b\u585e\u961f\u5217\u975e\u7a7a\u4e14\u6ca1\u6709\u5728work\u7684leader\u7ebf\u7a0b\uff0c\u6b64\u65f6\u961f\u5217\u53ef\u7528 if (leader == null && q.peek() != null) available.signal(); lock.unlock(); } } \u601d\u8003\uff1a\u91c7\u7528leader/follower\u8bbe\u8ba1\u6a21\u5f0f\u6709\u4ec0\u4e48\u597d\u5904\uff1f \u4e0d\u91c7\u7528L/F\u6a21\u5f0f\uff0c\u5373\u76f4\u63a5\u5c06for\u5faa\u73af\u91cc\u9762first = null;\u4e4b\u540e\u7684\u4ee3\u7801\u66ff\u6362\u4e3aavailable.awaitNanos(delay)\uff0c\u65e0\u6cd5\u907f\u514d\u9891\u7e41\u5207\u6362\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u7684\u5f00\u9500\uff0c\u6bd4\u5982\u4ee5\u4e0b\u573a\u666f\uff1a \u7ebf\u7a0bA\u548cB\u540c\u65f6\u5728awaitNanos\uff0cA\u7b49\u5f85\u4e86100ms\uff0cB\u7b49\u5f85\u4e86200ms\uff0c\u5047\u8bbe\u7b49\u5f85\u65f6\u9650\u4e3a300ms\uff0c\u7ebf\u7a0bB\u88ab\u5524\u9192\uff0c\u5e76\u5728100ms\u5185\u5b8c\u6210take()\u64cd\u4f5c\uff0c100ms\u4e4b\u540e\u7ebf\u7a0bA\u88ab\u5524\u9192\uff0c\u53d1\u73b0\u9996\u5143\u7d20\u6ca1\u6709\u8fc7\u671f\uff0c\u56e0\u4e3a\u4e4b\u524d\u8fc7\u671f\u7684\u5143\u7d20\u5df2\u7ecf\u88ab\u7ebf\u7a0bB take\u51fa\u53bb\u4e86\uff0c\u5c31\u4f1a\u7ee7\u7eed\u7b49\u5f85\u3002\u53ef\u89c1\uff0c\u7ebf\u7a0bA\u6ca1\u6709\u5fc5\u8981\u88ab\u5524\u9192\uff0c\u56e0\u4e3a\u5b83\u4ed8\u51fa\u4e86\u5207\u6362\u7ebf\u7a0bA\u4e0a\u4e0b\u6587\u7684\u4ee3\u4ef7\u3002 \u91c7\u7528L/F\u6a21\u5f0f\uff0c\u53ef\u4ee5\u907f\u514d\u8fd9\u79cd\u5f00\u9500\uff0c\u56e0\u4e3afollower\u7ebf\u7a0b\u4e00\u76f4\u90fd\u5728\u7b49\u5f85\uff0c\u4e0d\u5b58\u5728\u7ebf\u7a0b\u5207\u5165\u4e0e\u5207\u51fa\u4e0a\u4e0b\u6587\u7684\u95ee\u9898\u3002 put \u00b6 public void put(E e) { offer(e); } // \u5411\u961f\u5217\u4e2d\u653e\u4e00\u4e2a\u5143\u7d20\uff0c\u4e0d\u6ee1\u8db3\u653e\u5165\u6761\u4ef6\u65f6\u963b\u585e public boolean offer(E e) { final ReentrantLock lock = this.lock; lock.lock(); try { q.offer(e); if (q.peek() == e) { leader = null; available.signal(); } return true; } finally { lock.unlock(); } } LinkedBlockingQueue \u00b6 \u53ef\u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0 \u6838\u5fc3\u6210\u5458 \u00b6 //\u94fe\u8868\u4e2d\u8282\u70b9\u7684\u5b9a\u4e49 static class Node<E> { // \u653e\u5165\u961f\u5217\u7684\u5143\u7d20\u503c E item; /** * \u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9 * \u6307\u5411this, \u610f\u601d\u662f\u4e0b\u4e00\u4e2a\u8282\u70b9\u662fhead.next * null, \u6ca1\u6709\u5b9e\u9645\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 */ Node<E> next; Node(E x) { item = x; } } /** \u961f\u5217\u7684\u5bb9\u91cf, \u4e0d\u63d0\u4f9b\u5bb9\u91cf\u5c31\u662fInteger.MAX_VALUE*/ private final int capacity; /**\u961f\u5217\u4e2d\u5143\u7d20\u7684\u5bb9\u91cf*/ private final AtomicInteger count = new AtomicInteger(); /** * \u94fe\u8868\u5934\u7ed3\u70b9\u5f15\u7528. * \u6052\u7b49\u5f0f: head.item == null * \u5934\u7ed3\u70b9\u4e0d\u7528\u4e8e\u5b58\u50a8\u5b9e\u9645\u7684\u5143\u7d20 */ transient Node<E> head; /** * \u94fe\u8868\u5c3e\u8282\u70b9 * \u6052\u7b49\u5f0f: last.next == null */ private transient Node<E> last; /** \u4fdd\u62a4take, poll\u7b49\u83b7\u53d6\u5143\u7d20\u64cd\u4f5c\u7684\u9501*/ private final ReentrantLock takeLock = new ReentrantLock(); private final Condition notEmpty = takeLock.newCondition(); /** \u4fdd\u62a4put, offer\u7b49\u5b58\u5165\u5143\u7d20\u64cd\u4f5c\u7684\u9501 */ private final ReentrantLock putLock = new ReentrantLock(); private final Condition notFull = putLock.newCondition(); take \u00b6 // \u5f53\u961f\u5217\u975e\u7a7a\u7684\u65f6\u5019\uff0c\u53d6\u51fa\u94fe\u8868\u9996\u5143\u7d20 public E take() throws InterruptedException { E x; int c = -1; final AtomicInteger count = this.count; final ReentrantLock takeLock = this.takeLock; takeLock.lockInterruptibly(); try { while (count.get() == 0) { notEmpty.await(); } x = dequeue(); c = count.getAndDecrement(); if (c > 1) // \u5728\u68c0\u67e5take\u7684\u65f6\u5019\u68c0\u67e5\u961f\u5217\u662f\u5426\u975e\u7a7a\uff0c\u5e76\u53d1\u51fa\u975e\u7a7a\u7684\u4fe1\u53f7\uff0c\u8fd9\u633a\u8d2a\u5fc3\u7684\u3002\u76ee\u7684\u662f\u63d0\u9ad8\u6548\u7387\uff0c\u5e76\u975e\u5fc5\u987b\u68c0\u67e5\u3002 notEmpty.signal(); } finally { takeLock.unlock(); } if (c == capacity) signalNotFull(); return x; } private E dequeue() { Node<E> h = head; Node<E> first = h.next; // todo: \u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u5199\uff1f // stackoverflow: https://stackoverflow.com/questions/10106191/openjdks-linkedblockingqueue-implementation-node-class-and-gc // commit: http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/main/java/util/concurrent/LinkedBlockingQueue.java?r1=1.50&r2=1.51 h.next = h; // help GC head = first; E x = first.item; first.item = null; return x; } put \u00b6 public void put(E e) throws InterruptedException { if (e == null) throw new NullPointerException(); // \u6ce8\u610f: \u7ea6\u5b9a\u5728put/take\u7b49\u64cd\u4f5c\u4e2d\u90fd\u8981\u9884\u8bbe\u672c\u5730\u53d8\u91cf // \u5982\u679c\u6ca1\u6709\u7ed9c\u8d1f\u503c\uff0c\u5c31\u662f-1\uff0c\u7528\u6765\u5224\u65ad\u662f\u5426\u64cd\u4f5c\u5931\u8d25 int c = -1; Node<E> node = new Node<E>(e); final ReentrantLock putLock = this.putLock; final AtomicInteger count = this.count; putLock.lockInterruptibly(); try { // \u68c0\u67e5\u961f\u5217\u662f\u5426\u5df2\u6ee1\uff0c\u5982\u679c\u5df2\u6ee1\u9700\u8981\u7b49\u5f85\u961f\u5217\u53d8\u4e3a\u672a\u6ee1\u7684\u72b6\u6001 while (count.get() == capacity) { notFull.await(); } enqueue(node); c = count.getAndIncrement(); if (c + 1 < capacity) notFull.signal(); } finally { putLock.unlock(); } // \u53d1\u51fa\u975e\u7a7a\u4fe1\u53f7 if (c == 0) signalNotEmpty(); } private void enqueue(Node<E> node) { // assert putLock.isHeldByCurrentThread(); // assert last.next == null; last = last.next = node; } private void signalNotEmpty() { final ReentrantLock takeLock = this.takeLock; takeLock.lock(); try { notEmpty.signal(); } finally { takeLock.unlock(); } } PriorityBlockingQueue \u00b6 \u6838\u5fc3\u6210\u5458 \u00b6 /** * \u7528\u6765\u8868\u793a\u4f18\u5148\u7ea7\u961f\u5217\u7684\u5e73\u8861\u7684\u4e8c\u8fdb\u5236\u5806\uff08\u6700\u5c0f\u5806\uff09\uff1aqueue[n]\u7684\u4e24\u4e2a\u513f\u5b50\u662fqueue[2*n+1]\u548c queue[2*(n+1)]\u3002 * \u4f18\u5148\u7ea7\u961f\u5217\u6839\u636ecomparator\u6392\u5e8f, \u5982\u679ccomparator\u662fnull\u7684\u8bdd\uff0c\u5c31\u6839\u636e\u5143\u7d20\u81ea\u7136\u987a\u5e8f\u6392\u5e8f\u3002 */ private transient Object[] queue; //\u5143\u7d20\u7684\u4e2a\u6570 private transient int size; // \u7528\u4e8e\u786e\u5b9a\u5143\u7d20\u987a\u5e8f\u7684\u6bd4\u8f83\u5668 private transient Comparator<? super E> comparator; // \u7528\u4e8e\u4fdd\u62a4\u6240\u6709\u64cd\u4f5c\u7684\u9501 private final ReentrantLock lock; private final Condition notEmpty; // \u7528\u6765\u4fdd\u62a4\u6269\u5bb9\u7684\u9501\uff08Spinlock\uff09\uff0c\u9700\u8981\u901a\u8fc7CAS\u6765\u5b9e\u73b0 private transient volatile int allocationSpinLock; // \u4ec5\u7528\u4e8e\u5e8f\u5217\u5316\uff0c\u53ea\u6709\u5728\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u8bdd\u7684\u65f6\u5019\u624d\u662f\u975e\u7a7a\u7684 private PriorityQueue<E> q; take \u00b6 public E take() throws InterruptedException { final ReentrantLock lock = this.lock; lock.lockInterruptibly(); E result; try { while ( (result = dequeue()) == null) notEmpty.await(); } finally { lock.unlock(); } return result; } private E dequeue() { // \u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20 int n = size - 1; if (n < 0) return null; else { Object[] array = queue; E result = (E) array[0]; E x = (E) array[n]; array[n] = null; Comparator<? super E> cmp = comparator; if (cmp == null) siftDownComparable(0, x, array, n); else // \u7ee7\u7eed\u7ef4\u62a4\u6700\u5c0f\u5806 siftDownUsingComparator(0, x, array, n, cmp); size = n; return result; } } put \u00b6 public void put(E e) { offer(e); // never need to block } public boolean offer(E e) { if (e == null) throw new NullPointerException(); final ReentrantLock lock = this.lock; lock.lock(); int n, cap; Object[] array; while ((n = size) >= (cap = (array = queue).length)) // \u5982\u679c\u6570\u7ec4\u7a7a\u95f4\u4e0d\u591f\uff0c\u9700\u8981\u91cd\u65b0\u5206\u914d\u7a7a\u95f4\uff0coffer\u6bd4\u8f83\u7b80\u5355\uff0c\u56e0\u6b64\u53ef\u4ee5\u4e3b\u8981\u5173\u6ce8\u4e00\u4e0b\u6570\u7ec4\u7a7a\u95f4\u662f\u600e\u6837\u589e\u957f\u7684\u5373\u53ef tryGrow(array, cap); try { Comparator<? super E> cmp = comparator; if (cmp == null) siftUpComparable(n, e, array); else siftUpUsingComparator(n, e, array, cmp); size = n + 1; notEmpty.signal(); } finally { lock.unlock(); } return true; private void tryGrow(Object[] array, int oldCap) { lock.unlock(); // \u5fc5\u987b\u91ca\u653e\u5e76\u5728\u51fd\u6570\u5c3e\u91cd\u65b0\u83b7\u53d6\u9501\uff0c\u8fd9\u6837take\u5c31\u4e0d\u4f1a\u88ab\u963b\u585e\u4f4f\u4e86\uff0c\u6548\u7387\u6709\u63d0\u5347 Object[] newArray = null; if (allocationSpinLock == 0 && // \u5982\u679callocationSpinLock\u4e3a0\u5c31\u628a1\u8d4b\u503c\u7ed9\u5b83 UNSAFE.compareAndSwapInt(this, allocationSpinLockOffset, 0, 1)) { try { // \u5982\u679c\u5f53\u524dsize\u5c0f\u4e8e64\uff0c\u5c31\u589e\u957f\u4e3a2*size+2; \u5426\u5219\u589e\u957f\u4e3a1.5 * size // \u8fd9\u79cd\u7b56\u7565\u53ef\u4ee5\u4f7fsize\u5c0f\u7684\u65f6\u5019\u589e\u957f\u5feb\uff0csize\u5927\u7684\u65f6\u5019\u589e\u957f\u4e0d\u4f1a\u8fc7\u5feb int newCap = oldCap + ((oldCap < 64) ? (oldCap + 2) : // grow faster if small (oldCap >> 1)); if (newCap - MAX_ARRAY_SIZE > 0) { // \u53ef\u80fd\u4f1a\u6ea2\u51fa int minCap = oldCap + 1; // \u6ea2\u51fa\u7684\u60c5\u51b5\u4e0bsize\u589e\u52a01 if (minCap < 0 || minCap > MAX_ARRAY_SIZE) throw new OutOfMemoryError(); newCap = MAX_ARRAY_SIZE; } // \u5982\u679cqueue != array\uff0c\u8bf4\u660e\u4e4b\u524d\u6709\u5176\u5b83\u7ebf\u7a0b\u5206\u914d\u4e86\u65b0\u7684\u7a7a\u95f4 if (newCap > oldCap && queue == array) newArray = new Object[newCap]; } finally { allocationSpinLock = 0; } } if (newArray == null) // \u5982\u679c\u5176\u5b83\u7ebf\u7a0b\u6b63\u5728\u5c1d\u8bd5\u91cd\u65b0\u5206\u914d\u7a7a\u95f4\uff0c\u6697\u793acpu\u4f18\u5148\u8c03\u5ea6\u5176\u5b83\u7ebf\u7a0b Thread.yield(); lock.lock(); if (newArray != null && queue == array) { queue = newArray; System.arraycopy(array, 0, newArray, 0, oldCap); } } SynchronousQueue \u00b6 SynchronousQueue \u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u961f\u5217\uff0c\u5b83\u7684\u5185\u90e8\u540c\u65f6\u53ea\u80fd\u591f\u5bb9\u7eb3\u5355\u4e2a\u5143\u7d20\u3002 \u5982\u679c\u8be5\u961f\u5217\u5df2\u6709\u4e00\u5143\u7d20\u7684\u8bdd\uff0c\u8bd5\u56fe\u5411\u961f\u5217\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u5143\u7d20\u7684\u7ebf\u7a0b\u5c06\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u5c06\u8be5\u5143\u7d20\u4ece\u961f\u5217\u4e2d\u62bd\u8d70\u3002 \u540c\u6837\uff0c\u5982\u679c\u8be5\u961f\u5217\u4e3a\u7a7a\uff0c\u8bd5\u56fe\u5411\u961f\u5217\u4e2d\u62bd\u53d6\u4e00\u4e2a\u5143\u7d20\u7684\u7ebf\u7a0b\u5c06\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u5411\u961f\u5217\u4e2d\u63d2\u5165\u4e86\u4e00\u6761\u65b0\u7684\u5143\u7d20\u3002","title":"BlockingQueue\u6e90\u7801\u5256\u6790"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#blockingqueue","text":"","title":"BlockingQueue\u6e90\u7801\u5256\u6790"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#_1","text":"\u82f1\u6587\u6587\u6863 \u82f1\u6587 jenkov \u4e2d\u6587 defonds package java.util.concurrent; import java.util.Collection; import java.util.Queue; public interface BlockingQueue<E> extends Queue<E> { boolean add(E e); boolean offer(E e); void put(E e) throws InterruptedException; boolean offer(E e, long timeout, TimeUnit unit) throws InterruptedException; E take() throws InterruptedException; E poll(long timeout, TimeUnit unit) throws InterruptedException; int remainingCapacity(); boolean remove(Object o); public boolean contains(Object o); //\u4ece\u961f\u5217\u4e2d\u79fb\u9664\u6240\u6709\u53ef\u7528\u7684\u5143\u7d20\uff0c\u5e76\u5c06\u79fb\u9664\u7684\u5143\u7d20\u52a0\u5165\u5230\u7ed9\u5b9a\u7684\u96c6\u5408\u4e2d\u3002\u5f53\u4f60\u9700\u8981\u91cd\u590dpoll\u7684\u65f6\u5019\u8fd9\u4e2a\u64cd\u4f5c\u6bd4\u8f83\u6709\u6548\u3002 int drainTo(Collection<? super E> c); int drainTo(Collection<? super E> c, int maxElements); } BlockingQueue\u7684\u5b9e\u73b0\u7c7b\u6709 ArrayBlockingQueue DelayQueue LinkedBlockingQueue PriorityBlockingQueue SynchronousQueue","title":"\u53c2\u8003"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#arrayblockingqueue","text":"\u8f6c\u8f7d\u5730\u5740","title":"ArrayBlockingQueue"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#_2","text":"/** \u5e95\u5c42\u7ef4\u62a4\u961f\u5217\u5143\u7d20\u7684\u6570\u7ec4 */ final Object[] items; /** \u5f53\u8bfb\u53d6\u5143\u7d20\u65f6\u6570\u7ec4\u7684\u4e0b\u6807(\u8fd9\u91cc\u79f0\u4e3a\u8bfb\u4e0b\u6807) */ int takeIndex; /** \u6dfb\u52a0\u5143\u7d20\u65f6\u6570\u7ec4\u7684\u4e0b\u6807 (\u8fd9\u91cc\u79f0\u4e3a\u5199\u5c0f\u6807)*/ int putIndex; /** \u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e2a\u6570 */ int count; /** \u7528\u4e8e\u5e76\u53d1\u63a7\u5236\u7684\u5de5\u5177\u7c7b**/ final ReentrantLock lock; /** \u4fdd\u8bc1\u6240\u6709\u8bbf\u95ee\u7684\u4e3b\u8981\u7684\u9501*/ final ReentrantLock lock; /** \u63a7\u5236take\u64cd\u4f5c\u65f6\u662f\u5426\u8ba9\u7ebf\u7a0b\u7b49\u5f85 */ private final Condition notEmpty; /** \u63a7\u5236put\u64cd\u4f5c\u65f6\u662f\u5426\u8ba9\u7ebf\u7a0b\u7b49\u5f85 */ private final Condition notFull;","title":"\u6838\u5fc3\u7ec4\u6210\uff1a"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#_3","text":"\u5728\u961f\u5217\u662f\u7a7a\u7684\u65f6\u5019\u9700\u8981\u7b49\u5f85\u5230\u5b83\u4e0d\u662f\u7a7a\uff0c\u540c\u65f6take\u9700\u8981\u4fdd\u8bc1\u7ebf\u7a0b\u5b89\u5168\u6027\u3002 public E take() throws InterruptedException { final ReentrantLock lock = this.lock; /* \u5c1d\u8bd5\u83b7\u53d6\u9501\u4e4b\u524d\uff0c\u68c0\u6d4b\u5f53\u524d\u7ebf\u7a0b\u662f\u5426\u88ab\u4e2d\u65ad\uff0c\u5982\u679c\u5df2\u88ab\u4e2d\u65ad\u5c31\u629b\u51faInterruptedException */ lock.lockInterruptibly(); try { /* \u5982\u679c\u6b64\u65f6\u961f\u5217\u4e2d\u7684\u5143\u7d20\u4e2a\u6570\u4e3a0,\u90a3\u4e48\u5c31\u8ba9\u5f53\u524d\u7ebf\u7a0bwait,\u5e76\u4e14\u91ca\u653e\u9501\u3002 \u6ce8\u610f:\u8fd9\u91cc\u4f7f\u7528\u4e86while\u8fdb\u884c\u91cd\u590d\u68c0\u67e5\uff0c\u662f\u4e3a\u4e86\u9632\u6b62\u5f53\u524d\u7ebf\u7a0b\u53ef\u80fd\u7531\u4e8e\u5176\u4ed6\u672a\u77e5\u7684\u539f\u56e0\u88ab\u5524\u9192\u3002 (\u901a\u5e38\u8fd9\u79cd\u60c5\u51b5\u88ab\u79f0\u4e3a\"spurious wakeup\") */ while (count == 0) // \u4f7f\u5f53\u524d\u7ebf\u7a0b\u4e00\u76f4\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\uff0c\u76f4\u5230notEmpty\u53d1\u51fasignal\u4fe1\u53f7 notEmpty.await(); //\u5982\u679c\u961f\u5217\u4e0d\u4e3a\u7a7a\uff0c\u5219\u4ece\u961f\u5217\u7684\u5934\u90e8\u53d6\u5143\u7d20 return extract(); } finally { //\u5b8c\u6210\u9501\u7684\u91ca\u653e lock.unlock(); } } /* \u6839\u636etakeIndex\u6765\u83b7\u53d6\u5f53\u524d\u7684\u5143\u7d20,\u7136\u540e\u901a\u77e5\u5176\u4ed6\u7b49\u5f85\u7684\u7ebf\u7a0b\u3002 Call only when holding lock.(\u53ea\u6709\u5f53\u524d\u7ebf\u7a0b\u5df2\u7ecf\u6301\u6709\u4e86\u9501\u4e4b\u540e\uff0c\u5b83\u624d\u80fd\u8c03\u7528\u8be5\u65b9\u6cd5) */ private E extract() { final Object[] items = this.items; //\u6839\u636etakeIndex\u83b7\u53d6\u5143\u7d20,\u56e0\u4e3a\u5143\u7d20\u662f\u4e00\u4e2aObject\u7c7b\u578b\u7684\u6570\u7ec4,\u56e0\u6b64\u5b83\u901a\u8fc7cast\u65b9\u6cd5\u5c06\u5176\u8f6c\u6362\u6210\u6cdb\u578b\u3002 E x = this.<E>cast(items[takeIndex]); //\u5c06\u5f53\u524d\u4f4d\u7f6e\u7684\u5143\u7d20\u8bbe\u7f6e\u4e3anull items[takeIndex] = null; //\u5e76\u4e14\u5c06takeIndex++,\u6ce8\u610f\uff1a\u8fd9\u91cc\u56e0\u4e3a\u5df2\u7ecf\u4f7f\u7528\u4e86\u9501\uff0c\u56e0\u6b64inc\u65b9\u6cd5\u4e2d\u6ca1\u6709\u4f7f\u7528\u5230\u539f\u5b50\u64cd\u4f5c takeIndex = inc(takeIndex); //\u5c06\u961f\u5217\u4e2d\u7684\u603b\u7684\u5143\u7d20\u51cf1 --count; //\u5524\u9192\u5176\u4ed6\u7b49\u5f85\u7684\u7ebf\u7a0b notFull.signal(); return x; }","title":"\u53d6\u5143\u7d20\u903b\u8f91"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#_4","text":"public void put(E e) throws InterruptedException { checkNotNull(e); final ReentrantLock lock = this.lock; //\u8fdb\u884c\u9501\u7684\u62a2\u5360 lock.lockInterruptibly(); try { /*\u5f53\u961f\u5217\u7684\u957f\u5ea6\u7b49\u4e8e\u6570\u7ec4\u7684\u957f\u5ea6,\u6b64\u65f6\u8bf4\u660e\u961f\u5217\u5df2\u7ecf\u6ee1\u4e86,\u8fd9\u91cc\u540c\u6837 \u4f7f\u7528\u4e86while\u6765\u65b9\u5f0f\u5f53\u524d\u7ebf\u7a0b\u88ab\"\u4f2a\u5524\u9192\"\u3002*/ while (count == items.length) //\u5219\u8ba9\u5f53\u524d\u7ebf\u7a0b\u5904\u4e8e\u7b49\u5f85\u72b6\u6001 notFull.await(); //\u4e00\u65e6\u83b7\u53d6\u5230\u9501\u5e76\u4e14\u961f\u5217\u8fd8\u672a\u6ee1\u65f6\uff0c\u5219\u6267\u884cinsert\u64cd\u4f5c\u3002 insert(e); } finally { //\u5b8c\u6210\u9501\u7684\u91ca\u653e lock.unlock(); } } //\u8be5\u65b9\u6cd5\u7684\u903b\u8f91\u975e\u5e38\u7b80\u5355 private void insert(E x) { //\u5c06\u5f53\u524d\u5143\u7d20\u8bbe\u7f6e\u5230putIndex\u4f4d\u7f6e items[putIndex] = x; //\u8ba9putIndex++ putIndex = inc(putIndex); //\u5c06\u961f\u5217\u7684\u5927\u5c0f\u52a01 ++count; //\u5524\u9192\u5176\u4ed6\u6b63\u5728\u5904\u4e8e\u7b49\u5f85\u72b6\u6001\u7684\u7ebf\u7a0b notEmpty.signal(); }","title":"\u5b58\u5143\u7d20\u903b\u8f91"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#inc","text":"\u5728extract\u548cinsert\u7684\u65f6\u5019\u90fd\u7528\u5230\u4e86inc\u65b9\u6cd5\uff0c\u53ef\u4ee5\u770b\u51fa\u6570\u7ec4\u7a7a\u95f4\u88ab\u5faa\u73af\u5229\u7528\u4e86\uff0c\u56e0\u6b64ArrayBlockingQueue\u5176\u5b9e\u662f\u4e00\u4e2a\u5faa\u73af\u961f\u5217 final int inc(int i) { //\u5f53takeIndex\u7684\u503c\u7b49\u4e8e\u6570\u7ec4\u7684\u957f\u5ea6\u65f6,\u5c31\u4f1a\u91cd\u65b0\u7f6e\u4e3a0\uff0c\u8fd9\u4e2a\u4e00\u4e2a\u5faa\u73af\u9012\u589e\u7684\u8fc7\u7a0b return (++i == items.length) ? 0 : i; }","title":"inc"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#delayqueue","text":"\u8fdb\u5165DelayQueue\u7684\u5143\u7d20\u5fc5\u987b\u5b9e\u73b0 java.util.concurrent.Delayed \u63a5\u53e3\uff1a public interface Delayed extends Comparable<Delayed< { public long getDelay(TimeUnit timeUnit); } \u5f53getDelay\u65b9\u6cd5\u8fd4\u56de\u5ef6\u8fdf\u7684\u662f 0 \u6216\u8005\u8d1f\u503c\u65f6\uff0c\u5c06\u88ab\u8ba4\u4e3a\u8fc7\u671f\uff0c\u8be5\u5143\u7d20\u5c06\u4f1a\u5728 DelayQueue \u7684\u4e0b\u4e00\u6b21take\u88ab\u8c03\u7528\u7684\u65f6\u5019\u88ab\u91ca\u653e\u6389\u3002 \u539f\u7406\u5b9e\u73b0\u53c2\u8003\u6587\u6863","title":"DelayQueue"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#_5","text":"private final transient ReentrantLock lock = new ReentrantLock(); // \u7528\u4e8e\u6839\u636edelay\u65f6\u95f4\u6392\u5e8f\u7684\u4f18\u5148\u7ea7\u961f\u5217 private final PriorityQueue<E> q = new PriorityQueue<E>(); // \u8fd9\u4e2a\u53d8\u91cf\u7528\u6765\u4fdd\u5b58\u5de5\u4f5c\u7ebf\u7a0b\u7684\u5f15\u7528\uff0c\u901a\u8fc7\u51cf\u5c11\u7ebf\u7a0b\u5207\u6362 private Thread leader = null; private final Condition available = lock.newCondition();","title":"\u6838\u5fc3\u7ec4\u6210"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#leader-follower","text":"\u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0","title":"leader-follower\u6a21\u5f0f"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#take","text":"// \u83b7\u53d6\u961f\u5217\u4e2d\u9996\u5143\u7d20\uff0c\u5982\u679c\u8be5\u5143\u7d20\u672a\u8fc7\u671f\u5c31\u9700\u8981\u7b49\u5f85\u8be5\u5143\u7d20\u8fc7\u671f\uff0c\u7136\u540e\u53d6\u51fa\u8be5\u5143\u7d20 public E take() throws InterruptedException { final ReentrantLock lock = this.lock; lock.lockInterruptibly(); try { for (;;) { // \u4ece\u4f18\u5148\u961f\u5217\u4e2d\u53d6\u51fa\u4f46\u4e0d\u5220\u9664\u7b2c\u4e00\u4e2a\u5143\u7d20 E first = q.peek(); if (first == null) // \u963b\u585e\u961f\u5217\u4e3a\u7a7a\u7684\u72b6\u6001\u4e0b\u9700\u8981\u7b49\u5f85 available.await(); else { // \u963b\u585e\u961f\u5217\u975e\u7a7a\uff0c\u4e14leader\u4e3anull // \u68c0\u6d4bfirst\u662f\u5426\u8fc7\u671f\uff0c\u5982\u679c\u8fc7\u671f\u5c31\u53d6\u51fafirst\u5e76\u8fd4\u56de long delay = first.getDelay(NANOSECONDS); if (delay <= 0) return q.poll(); // first\u6ca1\u6709\u8fc7\u671f\uff0c\u9700\u8981\u7ee7\u7eed\u7b49\u5f85 first = null; // \u5728\u7b49\u5f85\u671f\u95f4first\u4e0d\u6301\u6709\u5f15\u7528\uff0c\u662f\u56e0\u4e3afirst\u6709\u53ef\u80fd\u88ab\u5176\u5b83\u7ebf\u7a0b\u62ff\u8d70\u4e86\uff0c\u4e14\u5176\u5b83\u7ebf\u7a0b\u7528\u5b8c\u4e4b\u540e\u9700\u8981GC\u56de\u6536\u6389 // \u5f53\u524d\u7ebf\u7a0b\u9700\u8981\u7ade\u9009leader if (leader != null) available.await(); else { // \u5f53\u524d\u7ebf\u7a0b\u7ade\u9009leader\u6210\u529f Thread thisThread = Thread.currentThread(); leader = thisThread; try { // \u7b49\u5f85\u9996\u5143\u7d20\u8fc7\u671f\uff0c\u53ef\u51cf\u5c11\u7ebf\u7a0b\u5207\u6362\u65f6\u95f4\uff0c\u4ece\u800c\u63d0\u9ad8\u6548\u7387 available.awaitNanos(delay); } finally { if (leader == thisThread) leader = null; } } } } } finally { // \u5982\u679c\u963b\u585e\u961f\u5217\u975e\u7a7a\u4e14\u6ca1\u6709\u5728work\u7684leader\u7ebf\u7a0b\uff0c\u6b64\u65f6\u961f\u5217\u53ef\u7528 if (leader == null && q.peek() != null) available.signal(); lock.unlock(); } } \u601d\u8003\uff1a\u91c7\u7528leader/follower\u8bbe\u8ba1\u6a21\u5f0f\u6709\u4ec0\u4e48\u597d\u5904\uff1f \u4e0d\u91c7\u7528L/F\u6a21\u5f0f\uff0c\u5373\u76f4\u63a5\u5c06for\u5faa\u73af\u91cc\u9762first = null;\u4e4b\u540e\u7684\u4ee3\u7801\u66ff\u6362\u4e3aavailable.awaitNanos(delay)\uff0c\u65e0\u6cd5\u907f\u514d\u9891\u7e41\u5207\u6362\u7ebf\u7a0b\u4e0a\u4e0b\u6587\u7684\u5f00\u9500\uff0c\u6bd4\u5982\u4ee5\u4e0b\u573a\u666f\uff1a \u7ebf\u7a0bA\u548cB\u540c\u65f6\u5728awaitNanos\uff0cA\u7b49\u5f85\u4e86100ms\uff0cB\u7b49\u5f85\u4e86200ms\uff0c\u5047\u8bbe\u7b49\u5f85\u65f6\u9650\u4e3a300ms\uff0c\u7ebf\u7a0bB\u88ab\u5524\u9192\uff0c\u5e76\u5728100ms\u5185\u5b8c\u6210take()\u64cd\u4f5c\uff0c100ms\u4e4b\u540e\u7ebf\u7a0bA\u88ab\u5524\u9192\uff0c\u53d1\u73b0\u9996\u5143\u7d20\u6ca1\u6709\u8fc7\u671f\uff0c\u56e0\u4e3a\u4e4b\u524d\u8fc7\u671f\u7684\u5143\u7d20\u5df2\u7ecf\u88ab\u7ebf\u7a0bB take\u51fa\u53bb\u4e86\uff0c\u5c31\u4f1a\u7ee7\u7eed\u7b49\u5f85\u3002\u53ef\u89c1\uff0c\u7ebf\u7a0bA\u6ca1\u6709\u5fc5\u8981\u88ab\u5524\u9192\uff0c\u56e0\u4e3a\u5b83\u4ed8\u51fa\u4e86\u5207\u6362\u7ebf\u7a0bA\u4e0a\u4e0b\u6587\u7684\u4ee3\u4ef7\u3002 \u91c7\u7528L/F\u6a21\u5f0f\uff0c\u53ef\u4ee5\u907f\u514d\u8fd9\u79cd\u5f00\u9500\uff0c\u56e0\u4e3afollower\u7ebf\u7a0b\u4e00\u76f4\u90fd\u5728\u7b49\u5f85\uff0c\u4e0d\u5b58\u5728\u7ebf\u7a0b\u5207\u5165\u4e0e\u5207\u51fa\u4e0a\u4e0b\u6587\u7684\u95ee\u9898\u3002","title":"take"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#put","text":"public void put(E e) { offer(e); } // \u5411\u961f\u5217\u4e2d\u653e\u4e00\u4e2a\u5143\u7d20\uff0c\u4e0d\u6ee1\u8db3\u653e\u5165\u6761\u4ef6\u65f6\u963b\u585e public boolean offer(E e) { final ReentrantLock lock = this.lock; lock.lock(); try { q.offer(e); if (q.peek() == e) { leader = null; available.signal(); } return true; } finally { lock.unlock(); } }","title":"put"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#linkedblockingqueue","text":"\u53ef\u53c2\u8003 \u8fd9\u7bc7\u6587\u7ae0","title":"LinkedBlockingQueue"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#_6","text":"//\u94fe\u8868\u4e2d\u8282\u70b9\u7684\u5b9a\u4e49 static class Node<E> { // \u653e\u5165\u961f\u5217\u7684\u5143\u7d20\u503c E item; /** * \u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9 * \u6307\u5411this, \u610f\u601d\u662f\u4e0b\u4e00\u4e2a\u8282\u70b9\u662fhead.next * null, \u6ca1\u6709\u5b9e\u9645\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 */ Node<E> next; Node(E x) { item = x; } } /** \u961f\u5217\u7684\u5bb9\u91cf, \u4e0d\u63d0\u4f9b\u5bb9\u91cf\u5c31\u662fInteger.MAX_VALUE*/ private final int capacity; /**\u961f\u5217\u4e2d\u5143\u7d20\u7684\u5bb9\u91cf*/ private final AtomicInteger count = new AtomicInteger(); /** * \u94fe\u8868\u5934\u7ed3\u70b9\u5f15\u7528. * \u6052\u7b49\u5f0f: head.item == null * \u5934\u7ed3\u70b9\u4e0d\u7528\u4e8e\u5b58\u50a8\u5b9e\u9645\u7684\u5143\u7d20 */ transient Node<E> head; /** * \u94fe\u8868\u5c3e\u8282\u70b9 * \u6052\u7b49\u5f0f: last.next == null */ private transient Node<E> last; /** \u4fdd\u62a4take, poll\u7b49\u83b7\u53d6\u5143\u7d20\u64cd\u4f5c\u7684\u9501*/ private final ReentrantLock takeLock = new ReentrantLock(); private final Condition notEmpty = takeLock.newCondition(); /** \u4fdd\u62a4put, offer\u7b49\u5b58\u5165\u5143\u7d20\u64cd\u4f5c\u7684\u9501 */ private final ReentrantLock putLock = new ReentrantLock(); private final Condition notFull = putLock.newCondition();","title":"\u6838\u5fc3\u6210\u5458"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#take_1","text":"// \u5f53\u961f\u5217\u975e\u7a7a\u7684\u65f6\u5019\uff0c\u53d6\u51fa\u94fe\u8868\u9996\u5143\u7d20 public E take() throws InterruptedException { E x; int c = -1; final AtomicInteger count = this.count; final ReentrantLock takeLock = this.takeLock; takeLock.lockInterruptibly(); try { while (count.get() == 0) { notEmpty.await(); } x = dequeue(); c = count.getAndDecrement(); if (c > 1) // \u5728\u68c0\u67e5take\u7684\u65f6\u5019\u68c0\u67e5\u961f\u5217\u662f\u5426\u975e\u7a7a\uff0c\u5e76\u53d1\u51fa\u975e\u7a7a\u7684\u4fe1\u53f7\uff0c\u8fd9\u633a\u8d2a\u5fc3\u7684\u3002\u76ee\u7684\u662f\u63d0\u9ad8\u6548\u7387\uff0c\u5e76\u975e\u5fc5\u987b\u68c0\u67e5\u3002 notEmpty.signal(); } finally { takeLock.unlock(); } if (c == capacity) signalNotFull(); return x; } private E dequeue() { Node<E> h = head; Node<E> first = h.next; // todo: \u4e3a\u4ec0\u4e48\u8981\u8fd9\u6837\u5199\uff1f // stackoverflow: https://stackoverflow.com/questions/10106191/openjdks-linkedblockingqueue-implementation-node-class-and-gc // commit: http://gee.cs.oswego.edu/cgi-bin/viewcvs.cgi/jsr166/src/main/java/util/concurrent/LinkedBlockingQueue.java?r1=1.50&r2=1.51 h.next = h; // help GC head = first; E x = first.item; first.item = null; return x; }","title":"take"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#put_1","text":"public void put(E e) throws InterruptedException { if (e == null) throw new NullPointerException(); // \u6ce8\u610f: \u7ea6\u5b9a\u5728put/take\u7b49\u64cd\u4f5c\u4e2d\u90fd\u8981\u9884\u8bbe\u672c\u5730\u53d8\u91cf // \u5982\u679c\u6ca1\u6709\u7ed9c\u8d1f\u503c\uff0c\u5c31\u662f-1\uff0c\u7528\u6765\u5224\u65ad\u662f\u5426\u64cd\u4f5c\u5931\u8d25 int c = -1; Node<E> node = new Node<E>(e); final ReentrantLock putLock = this.putLock; final AtomicInteger count = this.count; putLock.lockInterruptibly(); try { // \u68c0\u67e5\u961f\u5217\u662f\u5426\u5df2\u6ee1\uff0c\u5982\u679c\u5df2\u6ee1\u9700\u8981\u7b49\u5f85\u961f\u5217\u53d8\u4e3a\u672a\u6ee1\u7684\u72b6\u6001 while (count.get() == capacity) { notFull.await(); } enqueue(node); c = count.getAndIncrement(); if (c + 1 < capacity) notFull.signal(); } finally { putLock.unlock(); } // \u53d1\u51fa\u975e\u7a7a\u4fe1\u53f7 if (c == 0) signalNotEmpty(); } private void enqueue(Node<E> node) { // assert putLock.isHeldByCurrentThread(); // assert last.next == null; last = last.next = node; } private void signalNotEmpty() { final ReentrantLock takeLock = this.takeLock; takeLock.lock(); try { notEmpty.signal(); } finally { takeLock.unlock(); } }","title":"put"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#priorityblockingqueue","text":"","title":"PriorityBlockingQueue"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#_7","text":"/** * \u7528\u6765\u8868\u793a\u4f18\u5148\u7ea7\u961f\u5217\u7684\u5e73\u8861\u7684\u4e8c\u8fdb\u5236\u5806\uff08\u6700\u5c0f\u5806\uff09\uff1aqueue[n]\u7684\u4e24\u4e2a\u513f\u5b50\u662fqueue[2*n+1]\u548c queue[2*(n+1)]\u3002 * \u4f18\u5148\u7ea7\u961f\u5217\u6839\u636ecomparator\u6392\u5e8f, \u5982\u679ccomparator\u662fnull\u7684\u8bdd\uff0c\u5c31\u6839\u636e\u5143\u7d20\u81ea\u7136\u987a\u5e8f\u6392\u5e8f\u3002 */ private transient Object[] queue; //\u5143\u7d20\u7684\u4e2a\u6570 private transient int size; // \u7528\u4e8e\u786e\u5b9a\u5143\u7d20\u987a\u5e8f\u7684\u6bd4\u8f83\u5668 private transient Comparator<? super E> comparator; // \u7528\u4e8e\u4fdd\u62a4\u6240\u6709\u64cd\u4f5c\u7684\u9501 private final ReentrantLock lock; private final Condition notEmpty; // \u7528\u6765\u4fdd\u62a4\u6269\u5bb9\u7684\u9501\uff08Spinlock\uff09\uff0c\u9700\u8981\u901a\u8fc7CAS\u6765\u5b9e\u73b0 private transient volatile int allocationSpinLock; // \u4ec5\u7528\u4e8e\u5e8f\u5217\u5316\uff0c\u53ea\u6709\u5728\u5e8f\u5217\u5316\u548c\u53cd\u5e8f\u5217\u8bdd\u7684\u65f6\u5019\u624d\u662f\u975e\u7a7a\u7684 private PriorityQueue<E> q;","title":"\u6838\u5fc3\u6210\u5458"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#take_2","text":"public E take() throws InterruptedException { final ReentrantLock lock = this.lock; lock.lockInterruptibly(); E result; try { while ( (result = dequeue()) == null) notEmpty.await(); } finally { lock.unlock(); } return result; } private E dequeue() { // \u6307\u5411\u6700\u540e\u4e00\u4e2a\u5143\u7d20 int n = size - 1; if (n < 0) return null; else { Object[] array = queue; E result = (E) array[0]; E x = (E) array[n]; array[n] = null; Comparator<? super E> cmp = comparator; if (cmp == null) siftDownComparable(0, x, array, n); else // \u7ee7\u7eed\u7ef4\u62a4\u6700\u5c0f\u5806 siftDownUsingComparator(0, x, array, n, cmp); size = n; return result; } }","title":"take"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#put_2","text":"public void put(E e) { offer(e); // never need to block } public boolean offer(E e) { if (e == null) throw new NullPointerException(); final ReentrantLock lock = this.lock; lock.lock(); int n, cap; Object[] array; while ((n = size) >= (cap = (array = queue).length)) // \u5982\u679c\u6570\u7ec4\u7a7a\u95f4\u4e0d\u591f\uff0c\u9700\u8981\u91cd\u65b0\u5206\u914d\u7a7a\u95f4\uff0coffer\u6bd4\u8f83\u7b80\u5355\uff0c\u56e0\u6b64\u53ef\u4ee5\u4e3b\u8981\u5173\u6ce8\u4e00\u4e0b\u6570\u7ec4\u7a7a\u95f4\u662f\u600e\u6837\u589e\u957f\u7684\u5373\u53ef tryGrow(array, cap); try { Comparator<? super E> cmp = comparator; if (cmp == null) siftUpComparable(n, e, array); else siftUpUsingComparator(n, e, array, cmp); size = n + 1; notEmpty.signal(); } finally { lock.unlock(); } return true; private void tryGrow(Object[] array, int oldCap) { lock.unlock(); // \u5fc5\u987b\u91ca\u653e\u5e76\u5728\u51fd\u6570\u5c3e\u91cd\u65b0\u83b7\u53d6\u9501\uff0c\u8fd9\u6837take\u5c31\u4e0d\u4f1a\u88ab\u963b\u585e\u4f4f\u4e86\uff0c\u6548\u7387\u6709\u63d0\u5347 Object[] newArray = null; if (allocationSpinLock == 0 && // \u5982\u679callocationSpinLock\u4e3a0\u5c31\u628a1\u8d4b\u503c\u7ed9\u5b83 UNSAFE.compareAndSwapInt(this, allocationSpinLockOffset, 0, 1)) { try { // \u5982\u679c\u5f53\u524dsize\u5c0f\u4e8e64\uff0c\u5c31\u589e\u957f\u4e3a2*size+2; \u5426\u5219\u589e\u957f\u4e3a1.5 * size // \u8fd9\u79cd\u7b56\u7565\u53ef\u4ee5\u4f7fsize\u5c0f\u7684\u65f6\u5019\u589e\u957f\u5feb\uff0csize\u5927\u7684\u65f6\u5019\u589e\u957f\u4e0d\u4f1a\u8fc7\u5feb int newCap = oldCap + ((oldCap < 64) ? (oldCap + 2) : // grow faster if small (oldCap >> 1)); if (newCap - MAX_ARRAY_SIZE > 0) { // \u53ef\u80fd\u4f1a\u6ea2\u51fa int minCap = oldCap + 1; // \u6ea2\u51fa\u7684\u60c5\u51b5\u4e0bsize\u589e\u52a01 if (minCap < 0 || minCap > MAX_ARRAY_SIZE) throw new OutOfMemoryError(); newCap = MAX_ARRAY_SIZE; } // \u5982\u679cqueue != array\uff0c\u8bf4\u660e\u4e4b\u524d\u6709\u5176\u5b83\u7ebf\u7a0b\u5206\u914d\u4e86\u65b0\u7684\u7a7a\u95f4 if (newCap > oldCap && queue == array) newArray = new Object[newCap]; } finally { allocationSpinLock = 0; } } if (newArray == null) // \u5982\u679c\u5176\u5b83\u7ebf\u7a0b\u6b63\u5728\u5c1d\u8bd5\u91cd\u65b0\u5206\u914d\u7a7a\u95f4\uff0c\u6697\u793acpu\u4f18\u5148\u8c03\u5ea6\u5176\u5b83\u7ebf\u7a0b Thread.yield(); lock.lock(); if (newArray != null && queue == array) { queue = newArray; System.arraycopy(array, 0, newArray, 0, oldCap); } }","title":"put"},{"location":"java%E5%90%8E%E7%AB%AF/BlockingQueue%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#synchronousqueue","text":"SynchronousQueue \u662f\u4e00\u4e2a\u7279\u6b8a\u7684\u961f\u5217\uff0c\u5b83\u7684\u5185\u90e8\u540c\u65f6\u53ea\u80fd\u591f\u5bb9\u7eb3\u5355\u4e2a\u5143\u7d20\u3002 \u5982\u679c\u8be5\u961f\u5217\u5df2\u6709\u4e00\u5143\u7d20\u7684\u8bdd\uff0c\u8bd5\u56fe\u5411\u961f\u5217\u4e2d\u63d2\u5165\u4e00\u4e2a\u65b0\u5143\u7d20\u7684\u7ebf\u7a0b\u5c06\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u5c06\u8be5\u5143\u7d20\u4ece\u961f\u5217\u4e2d\u62bd\u8d70\u3002 \u540c\u6837\uff0c\u5982\u679c\u8be5\u961f\u5217\u4e3a\u7a7a\uff0c\u8bd5\u56fe\u5411\u961f\u5217\u4e2d\u62bd\u53d6\u4e00\u4e2a\u5143\u7d20\u7684\u7ebf\u7a0b\u5c06\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u53e6\u4e00\u4e2a\u7ebf\u7a0b\u5411\u961f\u5217\u4e2d\u63d2\u5165\u4e86\u4e00\u6761\u65b0\u7684\u5143\u7d20\u3002","title":"SynchronousQueue"},{"location":"java%E5%90%8E%E7%AB%AF/ConcurrentHashMap%281.8%E7%89%88%E6%9C%AC%29%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/","text":"ConcurrentHashMap(1.8\u7248\u672c)\u6e90\u7801\u5256\u6790 \u00b6 \u57fa\u4e8ejdk1.8\u3002 \u53c2\u8003\u6587\u7ae0\uff1a https://yq.aliyun.com/articles/36781 http://blog.csdn.net/u012834750/article/details/71536618 \u6570\u636e\u7ed3\u6784 \u00b6 \u4ec5\u5217\u51fa\u6700\u91cd\u8981\u7684\u4ee3\u7801\u7247\u6bb5 Node \u00b6 static class Node<K,V> implements Map.Entry<K,V> { final int hash; final K key; volatile V val; volatile Node<K,V> next; /** * \u5b50\u7c7b\u4e2d\u91cd\u5199\u4e86\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u8fd9\u91cc\u7684find\u5b9e\u73b0\u4e86\u5728\u94fe\u8868\u4e2d\u67e5\u627ehash\u503c\u7b49\u4e8eh\u4e14key\u7b49\u4e8ek\u7684\u8282\u70b9 */ Node<K,V> find(int h, Object k) { Node<K,V> e = this; if (k != null) { do { K ek; if (e.hash == h && ((ek = e.key) == k || (ek != null && k.equals(ek)))) return e; } while ((e = e.next) != null); } return null; } } ForwardingNode \u00b6 /** * A node inserted at head of bins during transfer operations. */ // \u5e76\u4e0d\u662f\u6211\u4eec\u4f20\u7edf\u7684\u5305\u542bkey-value\u7684\u8282\u70b9\uff0c\u53ea\u662f\u4e00\u4e2a\u6807\u5fd7\u8282\u70b9\uff0c\u5e76\u4e14\u6307\u5411nextTable\uff0c\u63d0\u4f9bfind\u65b9\u6cd5\u800c\u5df2\u3002\u751f\u547d\u5468\u671f\uff1a\u4ec5\u5b58\u6d3b\u4e8e\u6269\u5bb9\u64cd\u4f5c\u4e14bin\u4e0d\u4e3anull\u65f6\uff0c\u4e00\u5b9a\u4f1a\u51fa\u73b0\u5728\u6bcf\u4e2abin\u7684\u9996\u4f4d\u3002 static final class ForwardingNode<K,V> extends Node<K,V> { final Node<K,V>[] nextTable; ForwardingNode(Node<K,V>[] tab) { super(MOVED, null, null, null); this.nextTable = tab; } Node<K,V> find(int h, Object k) { // loop to avoid arbitrarily deep recursion on forwarding nodes outer: for (Node<K,V>[] tab = nextTable;;) { Node<K,V> e; int n; if (k == null || tab == null || (n = tab.length) == 0 || (e = tabAt(tab, (n - 1) & h)) == null)// \u5934\u7ed3\u70b9\u5b58\u5728e\u4e2d return null; for (;;) { // \u68c0\u67e5\u5934\u7ed3\u70b9\u662f\u5426\u4e3a\u8981\u627e\u7684node int eh; K ek; if ((eh = e.hash) == h && ((ek = e.key) == k || (ek != null && k.equals(ek)))) return e; // \u5982\u679c\u5934\u7ed3\u70b9\u4e0d\u662f\u8981\u627e\u7684\u8282\u70b9 if (eh < 0) { // \u5934\u7ed3\u70b9hash\u503c\u5c0f\u4e8e0 // \u5982\u679c\u5934\u7ed3\u70b9\u662fForwardingNode\uff0c\u90a3\u4e48\u7ee7\u7eed\u4e0b\u4e00\u4e2aForwardingNode\u7684find\u903b\u8f91 if (e instanceof ForwardingNode) { tab = ((ForwardingNode<K,V>)e).nextTable; continue outer; } // \u5982\u679c\u5934\u7ed3\u70b9\u4e0d\u662fForwardingNode\uff0c\u5c31\u8fdb\u884c\u76f8\u5e94\u7684find\u903b\u8f91 else return e.find(h, k); } // \u67e5\u627e\u5230\u5c3e\u90e8\u4ecd\u7136\u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u7684node if ((e = e.next) == null) return null; } } } } TreeNode \u00b6 \u7ea2\u9ed1\u6811\u4e2d\u7684\u8282\u70b9\u7c7b\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff1aTreeNode\u53ef\u7528\u4e8e\u6784\u9020\u53cc\u5411\u94fe\u8868\uff0cNode\u5305\u542bnext\u6210\u5458\uff0c\u540c\u65f6\uff0cTreeNode\u52a0\u5165\u4e86prev\u6210\u5458\u3002 static final class TreeNode<K,V> extends Node<K,V> { TreeNode<K,V> parent; // red-black tree links TreeNode<K,V> left; TreeNode<K,V> right; TreeNode<K,V> prev; // needed to unlink next upon deletion boolean red; TreeNode(int hash, K key, V val, Node<K,V> next, TreeNode<K,V> parent) { super(hash, key, val, next); this.parent = parent; } Node<K,V> find(int h, Object k) { return findTreeNode(h, k, null); } final TreeNode<K,V> findTreeNode(int h, Object k, Class<?> kc) { if (k != null) { TreeNode<K,V> p = this; do { int ph, dir; K pk; TreeNode<K,V> q; TreeNode<K,V> pl = p.left, pr = p.right; if ((ph = p.hash) > h) p = pl; else if (ph < h) p = pr; else if ((pk = p.key) == k || (pk != null && k.equals(pk))) return p; // hash\u503c\u76f8\u7b49\uff0ckey\u4e0d\u7b49\uff0c\u5de6\u5b50\u6811\u4e0d\u5b58\u5728\uff0c\u641c\u7d22\u53f3\u5b50\u6811 else if (pl == null) p = pr; // hash\u503c\u76f8\u7b49\uff0ckey\u4e0d\u7b49\uff0c\u53f3\u5b50\u6811\u4e0d\u5b58\u5728\uff0c\u641c\u7d22\u5de6\u5b50\u6811 else if (pr == null) p = pl; /* * comparableClassFor\u7684\u4f5c\u7528\u662f: * \u5982\u679ck\u5b9e\u73b0\u4e86Comparable\u63a5\u53e3\uff0c\u8fd4\u56dek\u7684Class, * \u5426\u5219\u8fd4\u56denull\u3002 * compareComparables\u7684\u4f5c\u7528\u662f\uff1a * \u5c06k\u4e0epk\u505a\u6bd4\u8f83 * \u5982\u679cTreeNode\u7684Key\u53ef\u4ee5\u4f5c\u6bd4\u8f83\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u5728\u6811\u4e2d\u641c\u7d22 */ else if ((kc != null || (kc = comparableClassFor(k)) != null) && (dir = compareComparables(kc, k, pk)) != 0) p = (dir < 0) ? pl : pr; // \u7531\u4e8ehash\u76f8\u7b49\uff0ckey\u65e0\u6cd5\u505a\u6bd4\u8f83\uff0c\u56e0\u6b64\u5148\u5728\u53f3\u5b50\u6811\u4e2d\u627e else if ((q = pr.findTreeNode(h, k, kc)) != null) return q; // \u53f3\u5b50\u6811\u6ca1\u6709\u627e\u5230\uff0c\u7ee7\u7eed\u4ece\u5f53\u524d\u7684\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4e2d\u627e else p = pl; } while (p != null); } return null; } } TreeBin \u00b6 TreeBin\u5c01\u88c5\u4e86\u7ea2\u9ed1\u6811\u7684\u903b\u8f91\uff0c\u6709\u5173\u7ea2\u9ed1\u6811, \u53ef\u4ee5\u53c2\u8003\u7684\u8d44\u6599\u6709 \u300aAlgorithm\u300b\u7f51\u7ad9 \u4ee5\u53ca \u4e2d\u6587\u7ffb\u8bd1 \u4e5f\u53ef\u4ee5\u8bd5\u73a9 Red/Black Tree Visualization \u3002 \u9644\u6587\u7ae0\u4e2d\u63d0\u5230\u7684\u7ea2\u9ed1\u6811\u65cb\u8f6c\u7684\u52a8\u56fe\u4e0eTreeBin\u4e2d\u7684rotateLeft\u3001rotateRight\u4ee3\u7801\u7247\u6bb5\u5e2e\u52a9\u7406\u89e3\u3002 \u5de6\u65cb\uff1a \u5bf9\u5e94\u4ee3\u7801 static <K,V> TreeNode<K,V> rotateLeft(TreeNode<K,V> root, TreeNode<K,V> p) { TreeNode<K,V> r, pp, rl; // p\u662f\u56fe\u4e2d\u7684E\u8282\u70b9\uff0cr\u662f\u56fe\u4e2d\u7684S\u8282\u70b9 if (p != null && (r = p.right) != null) { if ((rl = p.right = r.left) != null) rl.parent = p; // p\u662f\u6839\u8282\u70b9\uff0c\u5219\u6839\u8282\u70b9\u9700\u8981\u53d8\u5316 if ((pp = r.parent = p.parent) == null) (root = r).red = false; // p\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u5982\u679cp\u662fpp\u7684\u5de6\u8282\u70b9\uff0c\u5c31\u66f4\u65b0pp\u7684left else if (pp.left == p) pp.left = r; else pp.right = r; // \u628ap\u653e\u5728\u5de6\u5b50\u6811\u4e2d r.left = p; p.parent = r; } return root; } \u53f3\u65cb\uff1a \u5bf9\u5e94\u4ee3\u7801 static <K,V> TreeNode<K,V> rotateRight(TreeNode<K,V> root, TreeNode<K,V> p) { TreeNode<K,V> l, pp, lr; // p\u662f\u9014\u4e2d\u7684S\uff0cl\u662f\u56fe\u4e2d\u7684E if (p != null && (l = p.left) != null) { if ((lr = p.left = l.right) != null) lr.parent = p; // p\u662f\u6839\u8282\u70b9\uff0c\u5219\u6839\u8282\u70b9\u9700\u8981\u53d8\u5316 if ((pp = l.parent = p.parent) == null) (root = l).red = false; else if (pp.right == p) pp.right = l; else pp.left = l; l.right = p; p.parent = l; } return root; } \u4ec5\u5217\u51faTreebin\u6570\u636e\u6210\u5458\u4ee5\u53ca\u90e8\u5206\u65b9\u6cd5\uff1a // \u7ef4\u62a4\u4e86\u4e00\u4e2a\u7ea2\u9ed1\u6811 static final class TreeBin<K,V> extends Node<K,V> { TreeNode<K,V> root; // \u94fe\u8868\u5934\u7ed3\u70b9\uff0c\u6bcf\u6b21\u90fd\u5c06\u65b0\u8282\u70b9\u63d2\u5165\u5230\u94fe\u8868\u7684\u5934\u90e8\uff0c\u6210\u4e3a\u65b0\u7684\u5934\u7ed3\u70b9 // \u56e0\u6b64\u8be5\u94fe\u8868\u4e2d\u8282\u70b9\u7684\u987a\u5e8f\u4e0e\u63d2\u5165\u987a\u5e8f\u76f8\u53cd volatile TreeNode<K,V> first; volatile Thread waiter; volatile int lockState; /** * \u8fd4\u56de\u5339\u914d\u7684node\u6216\u8005\u6ca1\u6709\u5339\u914d\u7684\u5c31\u8fd4\u56denull. \u5728\u6811\u4e2d\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u6bd4\u8f83\uff0c * \u5f53\u9501\u4e0d\u53ef\u7528\u7684\u65f6\u5019\u8fdb\u884c\u7ebf\u6027\u641c\u7d22 */ final Node<K,V> find(int h, Object k) { if (k != null) { for (Node<K,V> e = first; e != null; ) { int s; K ek; // \u9501\u4e0d\u53ef\u7528\uff0clockState\u5305\u542b\u4e86WAITER\u6216\u8005WRITER\u6807\u5fd7\u4f4d if (((s = lockState) & (WAITER|WRITER)) != 0) { if (e.hash == h && ((ek = e.key) == k || (ek != null && k.equals(ek)))) return e; e = e.next; } // \u9501\u53ef\u7528\uff0c\u5f53\u524d\u5bf9\u8c61\u8bbe\u7f6e\u4e3aREADER\u72b6\u6001 else if (U.compareAndSwapInt(this, LOCKSTATE, s, s + READER)) { TreeNode<K,V> r, p; try { // \u5728\u6811\u4e2d\u67e5\u627e\u5339\u914d\u7684\u8282\u70b9 p = ((r = root) == null ? null : r.findTreeNode(h, k, null)); } finally { Thread w; // \u53d6\u6d88\u5f53\u524d\u9501\u7684READER\u72b6\u6001 if (U.getAndAddInt(this, LOCKSTATE, -READER) == (READER|WAITER) && (w = waiter) != null) LockSupport.unpark(w); } return p; } } } return null; } // \u5bfb\u627e\u6216\u8005\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9 final TreeNode<K,V> putTreeVal(int h, K k, V v) { Class<?> kc = null; boolean searched = false; for (TreeNode<K,V> p = root;;) { int dir, ph; K pk; // \u7ea2\u9ed1\u6811\u662f\u7a7a\uff0c\u76f4\u63a5\u63d2\u5165\u5230\u6839\u8282\u70b9 if (p == null) { first = root = new TreeNode<K,V>(h, k, v, null, null); break; } // \u6839\u636ehash\u503c\u8bbe\u7f6e\u6807\u8bb0\u4f4d else if ((ph = p.hash) > h) dir = -1; else if (ph < h) dir = 1; // hash\u503c\u76f8\u540c\uff0c\u5e76\u4e14k\u4e0epk\u76f8\u7b49\uff08equals\uff09\uff0c\u76f4\u63a5\u8fd4\u56de else if ((pk = p.key) == k || (pk != null && k.equals(pk))) return p; // hash\u76f8\u540c\uff0cp\u4e0epk\u4e0dequals\uff0c\u4f46\u662f\u6309\u7167\u6bd4\u8f83\u63a5\u53e3\u53d1\u73b0p\u4e0epk\u76f8\u7b49 else if ((kc == null && (kc = comparableClassFor(k)) == null) || (dir = compareComparables(kc, k, pk)) == 0) { if (!searched) { TreeNode<K,V> q, ch; searched = true; if (((ch = p.left) != null && (q = ch.findTreeNode(h, k, kc)) != null) || ((ch = p.right) != null && (q = ch.findTreeNode(h, k, kc)) != null)) return q; } // \u6839\u636e\u4e00\u79cd\u786e\u5b9a\u7684\u89c4\u5219\u6765\u8fdb\u884c\u6bd4\u8f83\uff0c\u81f3\u4e8e\u89c4\u5219\u672c\u8eab\u5177\u4f53\u662f\u4ec0\u4e48\u75c5\u4e0d\u91cd\u8981 dir = tieBreakOrder(k, pk); } // \u7a0b\u5e8f\u8fd0\u884c\u5230\u8fd9\u91cc\uff0c\u8bf4\u660e\u5f53\u524d\u8282\u70b9\u4e0d\u5339\u914d\uff0c\u4f46\u5b50\u6811\u4e2d\u53ef\u80fd\u4f1a\u6709\u5339\u914d\u7684Node TreeNode<K,V> xp = p; // \u6839\u636e\u5927\u5c0f\u5173\u7cfb\u79fb\u52a8p\u5230\u5de6\u5b50\u6811\u6216\u8005\u53f3\u5b50\u6811 // \u5982\u679c\u6ee1\u8db3p\u4e3anull\uff0c\u5219\u8bf4\u660e\u6811\u4e2d\u6ca1\u6709\u8282\u70b9\u80fd\u4e0e\u4e4b\u5339\u914d\uff0c\u5e94\u5f53\u5728p\u4f4d\u7f6e\u63d2\u5165\u65b0\u8282\u70b9\uff0c\u7136\u540e\u7ef4\u62a4\u7ea2\u9ed1\u6811\u7684\u6027\u8d28 if ((p = (dir <= 0) ? p.left : p.right) == null) { TreeNode<K,V> x, f = first; first = x = new TreeNode<K,V>(h, k, v, f, xp); if (f != null) f.prev = x; if (dir <= 0) xp.left = x; else xp.right = x; // \u4f18\u5148\u5c06\u65b0\u8282\u70b9\u67d3\u4e3a\u7ea2\u8272 if (!xp.red) x.red = true; else { lockRoot(); try { root = balanceInsertion(root, x); } finally { unlockRoot(); } } break; } } assert checkInvariants(root); return null; } } // \u7ea2\u9ed1\u6811\u7684\u5e73\u8861\u63d2\u5165 static <K,V> TreeNode<K,V> balanceInsertion(TreeNode<K,V> root, TreeNode<K,V> x) { x.red = true; // \u5c06x\u67d3\u6210\u7ea2\u8272 for (TreeNode<K,V> xp, xpp, xppl, xppr;;) { // \u6839\u8282\u70b9\u5fc5\u987b\u662f\u9ed1\u8272 if ((xp = x.parent) == null) { x.red = false; return x; } // \u7236\u8282\u70b9\u662f\u9ed1\u8272\u6216\u8005\u7236\u8282\u70b9\u662f\u6839\u8282\u70b9 // \u603b\u4e4b\u7236\u8282\u70b9\u662f\u9ed1\u8272\uff0c\u90a3\u4e48\u4e0d\u4f1a\u8fdd\u53cd\u7ea2\u9ed1\u6811\u6027\u8d28 // \u4e0d\u9700\u8981\u8c03\u6574\u7ed3\u6784\uff0c\u76f4\u63a5\u8fd4\u56de\u6839\u8282\u70b9\u5373\u53ef else if (!xp.red || (xpp = xp.parent) == null) return root; // \u7236\u8282\u70b9\u662f\u7ea2\u8272\uff08\u9700\u8981\u8c03\u6574\uff09\uff0c\u4e14\u5728\u7956\u7236\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4e2d if (xp == (xppl = xpp.left)) { // \u56e0\u4e3a\u7236\u8282\u70b9\u4e3a\u7ea2\u8272\uff0c\u6240\u4ee5xppr\u5fc5\u987b\u662f\u7ea2\u8272\u6216\u7a7a\uff0c\u4e0d\u53ef\u80fd\u662f\u9ed1\u8272 // \u7956\u7236\u8282\u70b9\u7684\u53f3\u8282\u70b9\u4e3a\u7ea2\u8272 if ((xppr = xpp.right) != null && xppr.red) { /** * \u9ed1 \u7ea2 * / \\ \uff08\u67d3\u8272\u540e\uff09 / \\ * \u7ea2 \u7ea2 -> \u9ed1 \u9ed1 * / / * \u7ea2 \u7ea2 * * \u53ef\u89c1\u901a\u8fc7\u8c03\u6574\u989c\u8272\u540e\uff0c\u5b50\u6811\u4e0d\u9700\u8981\u65cb\u8f6c\u5c31\u53ef\u4ee5\u6ee1\u8db3\u7ea2\u9ed1\u6811\u7684\u6027\u8d28 * \u4f46\u7531\u4e8expp\u53d8\u6210\u4e86\u7ea2\u8272\uff0c\u6709\u53ef\u80fd\u8fdd\u53cd\u7ea2\u9ed1\u6811\u6027\u8d28\uff0c\u4ecd\u7136\u9700\u8981\u5411\u4e0a\u8c03\u6574 */ xppr.red = false; xp.red = false; xpp.red = true; x = xpp; } // xppr\u662f\u7a7a else { /** * \u9ed1 * / * \u7ea2 * \\ * \u7ea2 */ if (x == xp.right) { /** * \u8fdb\u884c\u5de6\u65cb\u64cd\u4f5c\uff0c\u53d8\u4e3a\u4ee5\u4e0b\u5f62\u5f0f\uff0c * \u53ef\u4ee5\u770b\u51fa\u6b64\u65f6\u4efb\u7136\u8fdd\u53cd\u7ea2\u9ed1\u6811\u7684\u6027\u8d28\uff0c * \u7136\u800cx\u4ecd\u7136\u6307\u5411\u4e86\u6700\u4e0b\u9762\u51b2\u7a81\u7684\u7ea2\u8272\u8282\u70b9\uff0c * \u6b64\u5904\u4ec5\u4ec5\u8c03\u6574\u4e86\u6811\u7684\u5f62\u72b6 * * \u9ed1 * / * \u7ea2 * / * \u7ea2 */ root = rotateLeft(root, x = xp); xpp = (xp = x.parent) == null ? null : xp.parent; } /* * \u7531\u4e8e\u8c03\u6574\u4e86\u6811\u7684\u5f62\u72b6\uff0c\u56e0\u6b64\u6b64\u65f6\u6811\u4e00\u5b9a\u957f\u6210\u8fd9\u4e2a\u6837\u5b50 * * \u9ed1 * / * \u7ea2 * / * \u7ea2 * * \u5728\u67d3\u8272\u5e76\u53f3\u65cb\u4e4b\u540e\uff0c\u53d8\u4e3a * * \u9ed1 * / \\ * \u7ea2 \u7ea2 */ if (xp != null) { xp.red = false; if (xpp != null) { xpp.red = true; root = rotateRight(root, xpp); } } } } // x\u5728\u7956\u7236\u8282\u70b9\u7684\u53f3\u5b50\u6811\u4e2d\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0ex\u5728\u7956\u7236\u8282\u70b9\u5de6\u5b50\u6811\u4e2d\u7c7b\u4f3c\uff0c\u56e0\u6b64\u4e0d\u591a\u4f5c\u89e3\u91ca\uff0c\u4e0d\u660e\u767d\u7684\u8bdd\u7c7b\u6bd4\u5373\u53ef\u3002 else { /** * \u9ed1 \u7ea2 * / \\ (\u67d3\u8272\u540e) / \\ * \u7ea2 \u7ea2 -> \u9ed1 \u9ed1 * \\ \\ * \u7ea2 \u7ea2\u8272 */ if (xppl != null && xppl.red) { xppl.red = false; xp.red = false; xpp.red = true; x = xpp; } else { if (x == xp.left) { root = rotateRight(root, x = xp); xpp = (xp = x.parent) == null ? null : xp.parent; } if (xp != null) { xp.red = false; if (xpp != null) { xpp.red = true; root = rotateLeft(root, xpp); } } } } } } \u6838\u5fc3\u6210\u5458 \u00b6 // ForwardingNode\u7684hash\u503c\u90fd\u662f-1 static final int MOVED = -1; // Treebin\u7684hash\u503c\u662f-1 static final int TREEBIN = -2; /** * \u5728\u7b2c\u4e00\u6b21insert\u7684\u65f6\u5019\u624d\u8fdb\u884c\u521d\u59cb\u5316(\u5ef6\u8fdf\u521d\u59cb\u5316) * Size\u603b\u662f2\u7684\u5e42. \u76f4\u63a5\u901a\u8fc7\u8fed\u4ee3\u5668\u8bbf\u95ee. */ transient volatile Node<K,V>[] table; // nextTable\u7684\u7528\u9014\uff1a\u53ea\u6709\u5728\u6269\u5bb9\u65f6\u662f\u975e\u7a7a\u7684 private transient volatile Node<K,V>[] nextTable; /** * Base counter value, used mainly when there is no contention, * but also as a fallback during table initialization * races. Updated via CAS. */ private transient volatile long baseCount; /** * sizeCtl\u662f\u63a7\u5236\u6807\u8bc6\u7b26\uff0c\u4e0d\u540c\u7684\u503c\u8868\u793a\u4e0d\u540c\u7684\u610f\u4e49\u3002 * -1\u4ee3\u8868\u6b63\u5728\u521d\u59cb\u5316\uff1b * -(1+\u6709\u6548\u6269\u5bb9\u7ebf\u7a0b\u7684\u6570\u91cf)\uff0c\u6bd4\u5982\uff0c-N \u8868\u793a\u6709N-1\u4e2a\u7ebf\u7a0b\u6b63\u5728\u8fdb\u884c\u6269\u5bb9\u64cd\u4f5c\uff1b * 0 \u8868\u793a\u8fd8\u672a\u8fdb\u884c\u521d\u59cb\u5316 * \u6b63\u6570\u4ee3\u8868\u521d\u59cb\u5316\u6216\u4e0b\u4e00\u6b21\u8fdb\u884c\u6269\u5bb9\u7684\u5927\u5c0f\uff0c\u7c7b\u4f3c\u4e8e\u6269\u5bb9\u9608\u503c\u3002\u5b83\u7684\u503c\u59cb\u7ec8\u662f\u5f53\u524dConcurrentHashMap\u5bb9\u91cf\u76840.75\u500d\uff0c\u8fd9\u4e0eloadfactor\u662f\u5bf9\u5e94\u7684\u3002\u5b9e\u9645\u5bb9\u91cf>=sizeCtl\uff0c\u5219\u6269\u5bb9\u3002 */ private transient volatile int sizeCtl; // \u6269\u5bb9\u7684\u65f6\u5019\uff0cnext\u6570\u7ec4\u4e0b\u6807+1 private transient volatile int transferIndex; /** * Spinlock (locked via CAS) used when resizing and/or creating CounterCells. */ private transient volatile int cellsBusy; /** * Table of counter cells. When non-null, size is a power of 2. */ private transient volatile CounterCell[] counterCells; // \u89c6\u56fe private transient KeySetView<K,V> keySet; private transient ValuesView<K,V> values; private transient EntrySetView<K,V> entrySet; \u6838\u5fc3\u51fd\u6570 \u00b6 ConcurrentHashMap(int initialCapacity) \u00b6 \u4e4b\u6240\u4ee5\u5217\u51fa\u8fd9\u4e2a\u51fd\u6570\uff0c\u662f\u56e0\u4e3a\u8fd9\u4e2a\u51fd\u6570\u521d\u59cb\u5316\u4e86sizeCtl\uff0c\u5e76\u4e14\u53ef\u4ee5\u770b\u51fatable\u5728\u8fd9\u91cc\u5e76\u6ca1\u6709\u88ab\u521d\u59cb\u5316\uff0c\u800c\u662f\u5728\u63d2\u5165\u5143\u7d20\u7684\u65f6\u5019\u8fdb\u884c\u5ef6\u8fdf\u521d\u59cb\u5316\u3002 \u6211\u4eec\u8981\u6ce8\u610f\u7684\u662ftable\u7684\u957f\u5ea6\u59cb\u7ec8\u662f2\u7684\u5e42\uff0csizeCtl\u7684\u503c\u4e3a\u6b63\u6570\u65f6\u8868\u793a\u6269\u5bb9\u7684\u6700\u5c0f\u9600\u503c\u3002 // \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6784\u9020\u4e86\u4e00\u4e2a\u80fd\u591f\u5bb9\u7eb3initialCapacity\u4e2a\u5143\u7d20\u7684\u5bf9\u8c61\uff0c // \u4f46\u5b9e\u9645table\u7684\u5927\u5c0f\u6bd41.5\u500d\u7684initialCapacity\u8fd8\u591a public ConcurrentHashMap(int initialCapacity) { if (initialCapacity < 0) throw new IllegalArgumentException(); // \u4fdd\u8bc1cap\u662f2\u7684\u5e42\uff0c\u5176\u4e2dtableSizeFor\u8fd4\u56de\u5927\u4e8e\u5165\u53c2\u7684\u6700\u5c0f\u76842\u7684\u5e42 int cap = ((initialCapacity >= (MAXIMUM_CAPACITY >>> 1)) ? MAXIMUM_CAPACITY : tableSizeFor(initialCapacity + (initialCapacity >>> 1) + 1)); this.sizeCtl = cap; } initTable \u00b6 // \u521d\u59cb\u5316table\uff0c\u4f7f\u7528sizeCtl\u8bb0\u5f55table\u7684\u5bb9\u91cf // \u4e3a\u4e86\u4fdd\u8bc1\u5e76\u53d1\u8bbf\u95ee\u4e0d\u4f1a\u51fa\u73b0\u51b2\u7a81\uff0c\u4f7f\u7528\u4e86Unsafe\u7684CAS\u64cd\u4f5c private final Node<K,V>[] initTable() { Node<K,V>[] tab; int sc; // tab\u662f\u7a7a\u7684 while ((tab = table) == null || tab.length == 0) { // \u5982\u679c\u5df2\u7ecf\u521d\u59cb\u5316\u8fc7 if ((sc = sizeCtl) < 0) Thread.yield(); // \u9000\u51fa\u521d\u59cb\u5316\u6570\u7ec4\u7684\u7ade\u4e89; just spin // \u5982\u679c\u6ca1\u6709\u7ebf\u7a0b\u5728\u521d\u59cb\u5316\uff0c\u5c06sizeCtl\u8bbe\u7f6e\u4e3a-1\uff0c\u8868\u793a\u6b63\u5728\u521d\u59cb\u5316 // CAS\u64cd\u4f5c\uff0c\u7531\u6b64\u53ef\u89c1sizeCtl\u7ef4\u62a4table\u7684\u5e76\u53d1\u8bbf\u95ee else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) { try { // \u518d\u6b21\u68c0\u67e5table\u662f\u5426\u4e3a\u7a7a if ((tab = table) == null || tab.length == 0) { // \u8ba1\u7b97\u5206\u914d\u591a\u5c11\u4e2aNode // sc\u5927\u4e8e0\u7684\u65f6\u5019\u8868\u793a\u8981\u5206\u914d\u7684\u5927\u5c0f // \u5426\u5219\u9ed8\u8ba4\u5206\u914d16\u4e2anode int n = (sc > 0) ? sc : DEFAULT_CAPACITY; @SuppressWarnings(\"unchecked\") Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n]; table = tab = nt; // \u4e0b\u6b21\u6269\u5bb9\u7684\u6700\u5c0f\u9600\u503c0.75*n // \u6ce8\u610f0.75 * n < n\uff0c\u800c\u4e14\u5b83\u5f88\u53ef\u80fd\u4e0d\u662f2\u7684\u5e42\uff0c // \u4f8b\u5982n = 16\uff0c \u5219sc = 12\uff1b // \u56e0\u6b64\u8fd9\u4e2a\u9600\u503c\u5728\u540e\u7eed\u6269\u5bb9\u60c5\u51b5\u4e0b\u5b9e\u9645\u4e0a\u4e0d\u4f1a\u6210\u4e3a\u6570\u7ec4\u7684\u5bb9\u91cf\u503c\uff0c\u4f46\u5b83\u53ef\u4ee5\u7528\u6765\u80fd\u4fdd\u8bc1\u7528\u6237\u63d0\u4f9b\u4e86\u5bb9\u91cf\u5927\u5c0f\u65f6\uff0c\u80fd\u591f\u5bb9\u7eb3\u7528\u6237\u8981\u6c42\u6570\u76ee\u7684\u5143\u7d20\u3002 sc = n - (n >>> 2); } } finally { sizeCtl = sc; } break; } } return tab; } put \u00b6 put\u8fc7\u7a0b\u7684\u63cf\u8ff0\uff1a \u4e3a\u8868\u8ff0\u65b9\u4fbf\uff0c\u7528\u7b26\u53f7i \u6765\u8868\u793a (n - 1) & hash\uff0c\u7528newNode\u8868\u793a\u4f7f\u7528key,value\u521b\u5efa\u7684\u8282\u70b9 loop: { if table == null { \u521d\u59cb\u5316\u4e00\u4e2a\u9ed8\u8ba4\u957f\u5ea6\u4e3a16\u7684\u6570\u7ec4 } else table[i] == null { table[i] = newNode } else hash == -1\uff0ctable[i]\u662fForwardingNode { \u8fdb\u884c\u6574\u5408\u8868\u7684\u64cd\u4f5c } else { if hash >= 0\uff0ctable[i]\u4e0d\u662f\u7279\u6b8aNode(\u94fe\u8868\u4e2d\u7684Node) { \u5c06newNode\u63d2\u5165\u5230\u94fe\u8868\u4e2d } else table[i]\u662fTreeBin { newNode\u63d2\u5165\u5230TreeNode\u4e2d } } addCount(1L, binCount); } \u901a\u8fc7\u7814\u8bfb\u4ee3\u7801\uff0c\u53d1\u73b0Doug Lea\u4f7f\u7528\u4e86\u4e00\u79cd\u6709\u6548\u4e14\u9ad8\u6548\u7684\u6280\u5de7\uff1a \u5728\u5faa\u73af\u91cc\u9762\u5d4c\u5957\u4f7f\u7528CAS\u64cd\u4f5c\u3002\u8fd9\u79cd\u6280\u5de7\u628a\u4e34\u754c\u533a\u53d8\u5f97\u5f88\u5c0f\uff0c\u56e0\u6b64\u6bd4\u8f83\u9ad8\u6548\u3002 put\u6e90\u7801\u5982\u4e0b\uff1a public V put(K key, V value) { return putVal(key, value, false); } /** put\u548cputIfAbsent\u90fd\u662f\u901a\u8fc7\u8c03\u7528putVal\u65b9\u6cd5\u6765\u5b9e\u73b0\u7684*/ final V putVal(K key, V value, boolean onlyIfAbsent) { // ConcurrentHashMap\u4e0d\u652f\u6301key\u548cvalue\u662fnull if (key == null || value == null) throw new NullPointerException(); // \u83b7\u53d6hash\u503c int hash = spread(key.hashCode()); int binCount = 0; for (Node<K,V>[] tab = table;;) { Node<K,V> f; int n, i, fh; // case 1\uff1atab\u4e3anull\uff0c\u9700\u8981\u521d\u59cb\u5316tab if (tab == null || (n = tab.length) == 0) tab = initTable(); // case 2: \u6ca1\u6709\u4efb\u4f55\u8282\u70b9hash\u503c\u4e0e\u5f53\u524d\u8981\u63d2\u5165\u7684\u8282\u70b9\u76f8\u540c else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) { if (casTabAt(tab, i, null, new Node<K,V>(hash, key, value, null))) break; // no lock when adding to empty bin } // case 3: \u5f53\u9047\u5230\u8868\u8fde\u63a5\u70b9\u65f6\uff0c\u9700\u8981\u8fdb\u884c\u6574\u5408\u8868\u7684\u64cd\u4f5c // \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u9047\u5230\u8fde\u63a5\u70b9\u7684\u65f6\u5019\uff0c\u5e76\u6ca1\u6709\u63d2\u5165\u65b0\u8282\u70b9\uff0c\u4ec5\u4ec5\u5e2e\u52a9\u6269\u5bb9\uff0c\u56e0\u4e3a\u5f53\u524d\u7ebf\u7a0b\u8feb\u5207\u9700\u8981\u5c3d\u5feb\u63d2\u5165\u65b0\u8282\u70b9\uff0c\u53ea\u80fd\u7b49\u5f85\u6269\u5bb9\u5b8c\u6bd5\u624d\u6709\u53ef\u80fd\u63d2\u5165\u65b0\u8282\u70b9 else if ((fh = f.hash) == MOVED) tab = helpTransfer(tab, f); // case 4: \u627e\u5230\u5bf9\u5e94\u4e8ehash\u503c\u7684\u94fe\u8868\u9996\u8282\u70b9\uff0c\u4e14\u8be5\u8282\u70b9\u4e0d\u662f\u8fde\u63a5\u8282\u70b9 else { V oldVal = null; synchronized (f) { if (tabAt(tab, i) == f) { if (fh >= 0) { binCount = 1; for (Node<K,V> e = f;; ++binCount) { K ek; // \u5982\u679c\u627e\u5230\u76f8\u540ckey\u7684node\uff0c\u6839\u636eonlyIfAbsent\u6765\u66f4\u65b0node\u7684\u503c if (e.hash == hash && ((ek = e.key) == key || (ek != null && key.equals(ek)))) { oldVal = e.val; if (!onlyIfAbsent) e.val = value; break; } // \u5982\u679c\u4e00\u76f4\u5230\u94fe\u8868\u7684\u5c3e\u90e8\u90fd\u6ca1\u6709\u627e\u5230\u4efb\u4f55node\u7684key\u4e0ekey\u76f8\u540c\uff0c\u5c31\u63d2\u5165\u5230\u94fe\u8868\u7684\u5c3e\u90e8 Node<K,V> pred = e; if ((e = e.next) == null) { pred.next = new Node<K,V>(hash, key, value, null); break; } } } // \u5982\u679c\u8be5\u8282\u70b9\u662fTreeBin\uff0c\u5c31\u63d2\u5165\u5230TreeBin\u4e2d else if (f instanceof TreeBin) { Node<K,V> p; binCount = 2; // \u5f53\u5b58\u5728\u76f8\u540c\u7684key\u65f6\uff0cputTreeVal\u4e0d\u4f1a\u4fee\u6539\u90a3\u4e2aTreeNode\uff0c\u800c\u662f\u8fd4\u56de\u7ed9p\uff0c\u7531onlyIfAbsent\u51b3\u5b9a\u662f\u5426\u4fee\u6539p.val if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key, value)) != null) { oldVal = p.val; if (!onlyIfAbsent) p.val = value; } } } } // \u82e5\u94fe\u8868\u957f\u5ea6\u4e0d\u4f4e\u4e8e8\uff0c\u5c31\u5c06\u94fe\u8868\u8f6c\u6362\u4e3a\u6811 if (binCount != 0) { if (binCount >= TREEIFY_THRESHOLD) treeifyBin(tab, i); if (oldVal != null) return oldVal; break; } } } // \u6dfb\u52a0\u8ba1\u6570\uff0c\u5982\u6709\u9700\u8981\uff0c\u6269\u5bb9 addCount(1L, binCount); return null; } // \u7ed9tab[i]\u8d4b\u503c // \u5982\u679ctab[i]\u7b49\u4e8ec,\u5c31\u5c06tab[i]\u4e0ev\u4ea4\u6362\u6570\u503c static final <K,V> boolean casTabAt(Node<K,V>[] tab, int i, Node<K,V> c, Node<K,V> v) { return U.compareAndSwapObject(tab, ((long)i << ASHIFT) + ABASE, c, v); } /** * \u534f\u52a9\u6269\u5bb9\u65b9\u6cd5\u3002 * \u591a\u7ebf\u7a0b\u4e0b\uff0c\u5f53\u524d\u7ebf\u7a0b\u68c0\u6d4b\u5230\u5176\u4ed6\u7ebf\u7a0b\u6b63\u8fdb\u884c\u6269\u5bb9\u64cd\u4f5c\uff0c\u5219\u534f\u52a9\u5176\u4e00\u8d77\u6269\u5bb9\uff1b *\uff08\u53ea\u6709\u8fd9\u79cd\u60c5\u51b5\u4f1a\u88ab\u8c03\u7528\uff09\u4ece\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u8bf4\uff0c\u5176\u201c\u4f18\u5148\u7ea7\u201d\u5f88\u9ad8\uff0c * \u53ea\u8981\u68c0\u6d4b\u5230\u6269\u5bb9\uff0c\u5c31\u4f1a\u653e\u4e0b\u5176\u4ed6\u5de5\u4f5c\uff0c\u5148\u6269\u5bb9\u3002 * \u8c03\u7528\u4e4b\u524d\uff0cnextTable\u4e00\u5b9a\u5df2\u5b58\u5728\u3002 */ final Node<K,V>[] helpTransfer(Node<K,V>[] tab, Node<K,V> f) { Node<K,V>[] nextTab; int sc; // \u5982\u679cf\u662ftab\u4e2d\u7684\u8fde\u63a5\u8282\u70b9\uff0c\u5e76\u4e14\u5b83\u6240\u8fde\u63a5\u7684table\u975e\u7a7a if (tab != null && (f instanceof ForwardingNode) && (nextTab = ((ForwardingNode<K,V>)f).nextTable) != null) { // \u6807\u5fd7\u4f4d int rs = resizeStamp(tab.length); // \u5f53\u6b63\u5728\u6269\u5bb9\u65f6\uff0c\u5e2e\u52a9\u6269\u5bb9 while (nextTab == nextTable && table == tab && (sc = sizeCtl) < 0) { if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 || sc == rs + MAX_RESIZERS || transferIndex <= 0) break; if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1)) { transfer(tab, nextTab); break; } } return nextTab; } return table; } get \u00b6 get\u65b9\u6cd5\u6bd4\u8f83\u7b80\u5355\uff0c\u6ca1\u6709\u4f7f\u7528\u9501\uff0c\u800c\u662f\u7528Unsafe\u6765\u4fdd\u8bc1\u83b7\u53d6\u7684\u5934\u7ed3\u70b9\u662fvolatile\u7684 public V get(Object key) { Node<K,V>[] tab; Node<K,V> e, p; int n, eh; K ek; // \u83b7\u53d6hash\u503ch int h = spread(key.hashCode()); // tab\u53ea\u662f\u4fdd\u5b58\u4e86hash\u503c\u76f8\u540c\u7684\u5934\u7ed3\u70b9 if ((tab = table) != null && (n = tab.length) > 0 && // table\u91cc\u9762\u6709\u5143\u7d20 (e = tabAt(tab, (n - 1) & h)) != null) {// \u6839\u636eh\u6765\u83b7\u53d6\u5934\u7ed3\u70b9e // hash\u503c\u76f8\u540c\uff0c\u5982\u679c\u627e\u5230key\uff0c\u76f4\u63a5\u8fd4\u56de if ((eh = e.hash) == h) { if ((ek = e.key) == key || (ek != null && key.equals(ek))) return e.val; } // todo\uff1a\u770b\u4e00\u4e0bhash\u503c\u4ec0\u4e48\u65f6\u5019\u5c0f\u4e8e0 else if (eh < 0) return (p = e.find(h, key)) != null ? p.val : null; while ((e = e.next) != null) { if (e.hash == h && ((ek = e.key) == key || (ek != null && key.equals(ek)))) return e.val; } } return null; } //tableAt\u65b9\u6cd5\u4f7f\u7528\u4e86Unsafe\u5bf9\u8c61\u6765\u83b7\u53d6\u6570\u7ec4\u4e2d\u4e0b\u6807\u4e3ai\u7684\u5bf9\u8c61 static final <K,V> Node<K,V> tabAt(Node<K,V>[] tab, int i) { // \u7b2ci\u4e2a\u5143\u7d20\u5b9e\u9645\u5730\u5740i * (2^ASHIFT) + ABASE return (Node<K,V>)U.getObjectVolatile(tab, ((long)i << ASHIFT) + ABASE); } treeifyBin \u00b6 // \u5982\u679ctab\u7684\u957f\u5ea6\u5f88\u5c0f\uff0c\u5c0f\u4e8e64\u4e2a\uff0c\u5c31\u5c1d\u8bd5\u8fdb\u884c\u6269\u5bb9\u4e3a\u4e24\u500d\uff0c // \u5426\u5219\u5c31\u5c06\u4ee5tab[index]\u5f00\u5934\u7684\u94fe\u8868\u8f6c\u6362\u4e3aTreebin private final void treeifyBin(Node<K,V>[] tab, int index) { Node<K,V> b; int n, sc; if (tab != null) { // tab\u7684\u957f\u5ea6\u5c0f\u4e8e64\uff0c\u5c31\u5c1d\u8bd5\u8fdb\u884c\u6269\u5bb9 if ((n = tab.length) < MIN_TREEIFY_CAPACITY) tryPresize(n << 1); else if ((b = tabAt(tab, index)) != null && b.hash >= 0) { synchronized (b) { if (tabAt(tab, index) == b) { TreeNode<K,V> hd = null, tl = null; // \u8fd9\u4e2a\u5faa\u73af\u5efa\u7acb\u4e86TreeNode\u4e2d\u7684\u53cc\u5411\u94fe\u8868\uff0chd\u4fdd\u5b58\u4e86\u53cc\u5411\u94fe\u8868\u7684\u5934\u7ed3\u70b9 for (Node<K,V> e = b; e != null; e = e.next) { TreeNode<K,V> p = new TreeNode<K,V>(e.hash, e.key, e.val, null, null); if ((p.prev = tl) == null) hd = p; else tl.next = p; tl = p; } setTabAt(tab, index, new TreeBin<K,V>(hd)); } } } } } tryPresize \u00b6 \u6709\u5173\u6269\u5bb9\uff0c\u53ef\u4ee5\u53c2\u8003 \u6df1\u5165\u5206\u6790 ConcurrentHashMap 1.8 \u7684\u6269\u5bb9\u5b9e\u73b0 \u8fd9\u7bc7\u6587\u7ae0\u3002 // \u5c1d\u8bd5\u6269\u5bb9\u4f7f\u5b83\u80fd\u653esize\u4e2a\u5143\u7d20 private final void tryPresize(int size) { // \u8ba1\u7b97\u6269\u5bb9\u540e\u7684\u6570\u91cf int c = (size >= (MAXIMUM_CAPACITY >>> 1)) ? MAXIMUM_CAPACITY : tableSizeFor(size + (size >>> 1) + 1); int sc; while ((sc = sizeCtl) >= 0) { Node<K,V>[] tab = table; int n; // \u5982\u679ctab\u662f\u7a7a\u7684\uff0c\u76f4\u63a5\u6269\u5bb9 if (tab == null || (n = tab.length) == 0) { // \u8ba1\u7b97\u6269\u5bb9\u540e\u7684\u5bb9\u91cf n = (sc > c) ? sc : c; if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) { try { if (table == tab) { @SuppressWarnings(\"unchecked\") Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n]; table = nt; // \u4e0b\u6b21\u6269\u5bb9\u7684\u5bb9\u91cf\u9600\u503c\u662f0.75 * n sc = n - (n >>> 2); } } finally { sizeCtl = sc; } } } // \u5bb9\u91cf\u5df2\u7ecf\u591f\u7528\uff0c\u4e0d\u9700\u8981\u8fdb\u884c\u6269\u5bb9\uff1b\u6216\u8005\u5bb9\u91cf\u592a\u5927\uff0c\u65e0\u6cd5\u8fdb\u884c\u6269\u5bb9\u3002 else if (c <= sc || n >= MAXIMUM_CAPACITY) break; // \u4ecd\u7136\u9700\u8981\u6269\u5bb9 else if (tab == table) { int rs = resizeStamp(n); // todo\uff1a\u4e0d\u662f\u5f88\u61c2\u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0 sc < 0 \uff1f\u5148\u770b\u4e00\u4e0btransfer\u7684\u5b9e\u73b0 if (sc < 0) { Node<K,V>[] nt; if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 || sc == rs + MAX_RESIZERS || (nt = nextTable) == null || transferIndex <= 0) break; if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1)) transfer(tab, nt); } else if (U.compareAndSwapInt(this, SIZECTL, sc, (rs << RESIZE_STAMP_SHIFT) + 2)) transfer(tab, null); } } } transfer \u00b6 \u4f2a\u4ee3\u7801\uff1a n = table.length nextTable = new Node[2 * n] forwardingNode = new ForwardingNode forwardingNode.nextTable = nextTable; for(table[i] : table) { for(p = table[i]; p != null ; p = p.next) { if(p.hash & n == 0) \u5c06p\u653e\u5165nextTable[i]\u7684\u6570\u636e\u96c6\u5408\u4e2d else \u5c06p\u653e\u5165nextTable[i+n]\u7684\u6570\u636e\u96c6\u5408\u4e2d } table[i] = forwardingNode; } table = nextTable; nextTable = null; \u6570\u5b66\u516c\u5f0f\uff1a \u5df2\u77e5\uff1an = 2 ^ k \uff0c hash & (n-1) = i\uff0c\u663e\u800c\u6613\u89c1\uff1a \uff081\uff09\u82e5 hash & n = 0\uff0c \u5219 hash &(2*n - 1) = i \uff1b \uff082\uff09\u82e5 hash & n != 0, \u5219 hash&(2*n - 1) = i + n\u3002 \u6e90\u4ee3\u7801\u5728\u6b64\uff1a // \u628atable\u4e2d\u6240\u6709\u7684Node\u653e\u5165\u65b0\u7684table\u4e2d private final void transfer(Node<K,V>[] tab, Node<K,V>[] nextTab) { int n = tab.length, stride; if ((stride = (NCPU > 1) ? (n >>> 3) / NCPU : n) < MIN_TRANSFER_STRIDE) stride = MIN_TRANSFER_STRIDE; // subdivide range if (nextTab == null) { // initiating try { @SuppressWarnings(\"unchecked\") Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n << 1]; nextTab = nt; } catch (Throwable ex) { // try to cope with OOME sizeCtl = Integer.MAX_VALUE; return; } nextTable = nextTab; transferIndex = n; } int nextn = nextTab.length; ForwardingNode<K,V> fwd = new ForwardingNode<K,V>(nextTab); boolean advance = true; boolean finishing = false; // to ensure sweep before committing nextTab for (int i = 0, bound = 0;;) { Node<K,V> f; int fh; while (advance) { int nextIndex, nextBound; if (--i >= bound || finishing) advance = false; else if ((nextIndex = transferIndex) <= 0) { i = -1; advance = false; } else if (U.compareAndSwapInt (this, TRANSFERINDEX, nextIndex, nextBound = (nextIndex > stride ? nextIndex - stride : 0))) { bound = nextBound; i = nextIndex - 1; advance = false; } } if (i < 0 || i >= n || i + n >= nextn) { int sc; if (finishing) { nextTable = null; table = nextTab; sizeCtl = (n << 1) - (n >>> 1); return; } if (U.compareAndSwapInt(this, SIZECTL, sc = sizeCtl, sc - 1)) { if ((sc - 2) != resizeStamp(n) << RESIZE_STAMP_SHIFT) return; finishing = advance = true; i = n; // recheck before commit } } else if ((f = tabAt(tab, i)) == null) advance = casTabAt(tab, i, null, fwd); else if ((fh = f.hash) == MOVED) advance = true; // already processed else { synchronized (f) { if (tabAt(tab, i) == f) { Node<K,V> ln, hn; if (fh >= 0) { int runBit = fh & n; Node<K,V> lastRun = f; for (Node<K,V> p = f.next; p != null; p = p.next) { int b = p.hash & n; if (b != runBit) { runBit = b; lastRun = p; } } if (runBit == 0) { ln = lastRun; hn = null; } else { hn = lastRun; ln = null; } for (Node<K,V> p = f; p != lastRun; p = p.next) { int ph = p.hash; K pk = p.key; V pv = p.val; if ((ph & n) == 0) ln = new Node<K,V>(ph, pk, pv, ln); else hn = new Node<K,V>(ph, pk, pv, hn); } setTabAt(nextTab, i, ln); setTabAt(nextTab, i + n, hn); setTabAt(tab, i, fwd); advance = true; } else if (f instanceof TreeBin) { TreeBin<K,V> t = (TreeBin<K,V>)f; TreeNode<K,V> lo = null, loTail = null; TreeNode<K,V> hi = null, hiTail = null; int lc = 0, hc = 0; for (Node<K,V> e = t.first; e != null; e = e.next) { int h = e.hash; TreeNode<K,V> p = new TreeNode<K,V> (h, e.key, e.val, null, null); if ((h & n) == 0) { if ((p.prev = loTail) == null) lo = p; else loTail.next = p; loTail = p; ++lc; } else { if ((p.prev = hiTail) == null) hi = p; else hiTail.next = p; hiTail = p; ++hc; } } ln = (lc <= UNTREEIFY_THRESHOLD) ? untreeify(lo) : (hc != 0) ? new TreeBin<K,V>(lo) : t; hn = (hc <= UNTREEIFY_THRESHOLD) ? untreeify(hi) : (lc != 0) ? new TreeBin<K,V>(hi) : t; setTabAt(nextTab, i, ln); setTabAt(nextTab, i + n, hn); setTabAt(tab, i, fwd); advance = true; } } } } } } addCount \u00b6 /** * Adds to count, and if table is too small and not already * resizing, initiates transfer. If already resizing, helps * perform transfer if work is available. Rechecks occupancy * after a transfer to see if another resize is already needed * because resizings are lagging additions. * * @param x the count to add * @param check if <0, don't check resize, if <= 1 only check if uncontended */ // \u6dfb\u52a0\u8ba1\u6570\uff0c\u5982\u679ctable\u592a\u5c0f\u4e14table\u6ca1\u6709\u5728\u6269\u5bb9\uff0c\u5c31\u8fdb\u884c\u6269\u5bb9 private final void addCount(long x, int check) { CounterCell[] as; long b, s; // \u5229\u7528CAS\u5feb\u901f\u66f4\u65b0baseCount\u7684\u503c if ((as = counterCells) != null || !U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x)) { CounterCell a; long v; int m; boolean uncontended = true; if (as == null || (m = as.length - 1) < 0 || (a = as[ThreadLocalRandom.getProbe() & m]) == null || !(uncontended = U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) { fullAddCount(x, uncontended); return; } if (check <= 1) return; s = sumCount(); } // \u5f53\u4e4b\u524d\u68c0\u67e5\u7684\u8282\u70b9\u4e2a\u6570\u5927\u4e8e\u7b49\u4e8e0\u65f6\uff0c\u624d\u8003\u8651\u6269\u5bb9 if (check >= 0) { Node<K,V>[] tab, nt; int n, sc; while (s >= (long)(sc = sizeCtl) && (tab = table) != null && (n = tab.length) < MAXIMUM_CAPACITY) { // \u4e3a\u5f53\u524d\u7684n\u4fdd\u7559\u4e00\u4e2a\u6570\uff0c\u4e0d\u540c\u7684\u6570\u7ec4n\uff08\u8fd9\u91ccn=2^k\uff09\u5f97\u5230\u7684\u7ed3\u679c\u5fc5\u7136\u4e0d\u540c\uff0c\u53ef\u7c7b\u6bd4\u65f6\u95f4\u6233 int rs = resizeStamp(n); // \u5982\u679c\u6709\u7ebf\u7a0b\u6b63\u5728\u6269\u5bb9\uff0c\u5c31\u5e2e\u52a9\u5176\u6269\u5bb9 if (sc < 0) { if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 || sc == rs + MAX_RESIZERS || (nt = nextTable) == null || transferIndex <= 0) break; if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1)) transfer(tab, nt); } // \u6ca1\u6709\u7ebf\u7a0b\u5728\u6269\u5bb9\uff0c\u76f4\u63a5\u6269\u5bb9 else if (U.compareAndSwapInt(this, SIZECTL, sc, (rs << RESIZE_STAMP_SHIFT) + 2)) transfer(tab, null); s = sumCount(); } } }","title":"ConcurrentHashMap"},{"location":"java%E5%90%8E%E7%AB%AF/ConcurrentHashMap%281.8%E7%89%88%E6%9C%AC%29%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#concurrenthashmap18","text":"\u57fa\u4e8ejdk1.8\u3002 \u53c2\u8003\u6587\u7ae0\uff1a https://yq.aliyun.com/articles/36781 http://blog.csdn.net/u012834750/article/details/71536618","title":"ConcurrentHashMap(1.8\u7248\u672c)\u6e90\u7801\u5256\u6790"},{"location":"java%E5%90%8E%E7%AB%AF/ConcurrentHashMap%281.8%E7%89%88%E6%9C%AC%29%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#_1","text":"\u4ec5\u5217\u51fa\u6700\u91cd\u8981\u7684\u4ee3\u7801\u7247\u6bb5","title":"\u6570\u636e\u7ed3\u6784"},{"location":"java%E5%90%8E%E7%AB%AF/ConcurrentHashMap%281.8%E7%89%88%E6%9C%AC%29%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#node","text":"static class Node<K,V> implements Map.Entry<K,V> { final int hash; final K key; volatile V val; volatile Node<K,V> next; /** * \u5b50\u7c7b\u4e2d\u91cd\u5199\u4e86\u8fd9\u4e2a\u65b9\u6cd5\uff0c\u8fd9\u91cc\u7684find\u5b9e\u73b0\u4e86\u5728\u94fe\u8868\u4e2d\u67e5\u627ehash\u503c\u7b49\u4e8eh\u4e14key\u7b49\u4e8ek\u7684\u8282\u70b9 */ Node<K,V> find(int h, Object k) { Node<K,V> e = this; if (k != null) { do { K ek; if (e.hash == h && ((ek = e.key) == k || (ek != null && k.equals(ek)))) return e; } while ((e = e.next) != null); } return null; } }","title":"Node"},{"location":"java%E5%90%8E%E7%AB%AF/ConcurrentHashMap%281.8%E7%89%88%E6%9C%AC%29%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#forwardingnode","text":"/** * A node inserted at head of bins during transfer operations. */ // \u5e76\u4e0d\u662f\u6211\u4eec\u4f20\u7edf\u7684\u5305\u542bkey-value\u7684\u8282\u70b9\uff0c\u53ea\u662f\u4e00\u4e2a\u6807\u5fd7\u8282\u70b9\uff0c\u5e76\u4e14\u6307\u5411nextTable\uff0c\u63d0\u4f9bfind\u65b9\u6cd5\u800c\u5df2\u3002\u751f\u547d\u5468\u671f\uff1a\u4ec5\u5b58\u6d3b\u4e8e\u6269\u5bb9\u64cd\u4f5c\u4e14bin\u4e0d\u4e3anull\u65f6\uff0c\u4e00\u5b9a\u4f1a\u51fa\u73b0\u5728\u6bcf\u4e2abin\u7684\u9996\u4f4d\u3002 static final class ForwardingNode<K,V> extends Node<K,V> { final Node<K,V>[] nextTable; ForwardingNode(Node<K,V>[] tab) { super(MOVED, null, null, null); this.nextTable = tab; } Node<K,V> find(int h, Object k) { // loop to avoid arbitrarily deep recursion on forwarding nodes outer: for (Node<K,V>[] tab = nextTable;;) { Node<K,V> e; int n; if (k == null || tab == null || (n = tab.length) == 0 || (e = tabAt(tab, (n - 1) & h)) == null)// \u5934\u7ed3\u70b9\u5b58\u5728e\u4e2d return null; for (;;) { // \u68c0\u67e5\u5934\u7ed3\u70b9\u662f\u5426\u4e3a\u8981\u627e\u7684node int eh; K ek; if ((eh = e.hash) == h && ((ek = e.key) == k || (ek != null && k.equals(ek)))) return e; // \u5982\u679c\u5934\u7ed3\u70b9\u4e0d\u662f\u8981\u627e\u7684\u8282\u70b9 if (eh < 0) { // \u5934\u7ed3\u70b9hash\u503c\u5c0f\u4e8e0 // \u5982\u679c\u5934\u7ed3\u70b9\u662fForwardingNode\uff0c\u90a3\u4e48\u7ee7\u7eed\u4e0b\u4e00\u4e2aForwardingNode\u7684find\u903b\u8f91 if (e instanceof ForwardingNode) { tab = ((ForwardingNode<K,V>)e).nextTable; continue outer; } // \u5982\u679c\u5934\u7ed3\u70b9\u4e0d\u662fForwardingNode\uff0c\u5c31\u8fdb\u884c\u76f8\u5e94\u7684find\u903b\u8f91 else return e.find(h, k); } // \u67e5\u627e\u5230\u5c3e\u90e8\u4ecd\u7136\u6ca1\u6709\u627e\u5230\u5bf9\u5e94\u7684node if ((e = e.next) == null) return null; } } } }","title":"ForwardingNode"},{"location":"java%E5%90%8E%E7%AB%AF/ConcurrentHashMap%281.8%E7%89%88%E6%9C%AC%29%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#treenode","text":"\u7ea2\u9ed1\u6811\u4e2d\u7684\u8282\u70b9\u7c7b\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff1aTreeNode\u53ef\u7528\u4e8e\u6784\u9020\u53cc\u5411\u94fe\u8868\uff0cNode\u5305\u542bnext\u6210\u5458\uff0c\u540c\u65f6\uff0cTreeNode\u52a0\u5165\u4e86prev\u6210\u5458\u3002 static final class TreeNode<K,V> extends Node<K,V> { TreeNode<K,V> parent; // red-black tree links TreeNode<K,V> left; TreeNode<K,V> right; TreeNode<K,V> prev; // needed to unlink next upon deletion boolean red; TreeNode(int hash, K key, V val, Node<K,V> next, TreeNode<K,V> parent) { super(hash, key, val, next); this.parent = parent; } Node<K,V> find(int h, Object k) { return findTreeNode(h, k, null); } final TreeNode<K,V> findTreeNode(int h, Object k, Class<?> kc) { if (k != null) { TreeNode<K,V> p = this; do { int ph, dir; K pk; TreeNode<K,V> q; TreeNode<K,V> pl = p.left, pr = p.right; if ((ph = p.hash) > h) p = pl; else if (ph < h) p = pr; else if ((pk = p.key) == k || (pk != null && k.equals(pk))) return p; // hash\u503c\u76f8\u7b49\uff0ckey\u4e0d\u7b49\uff0c\u5de6\u5b50\u6811\u4e0d\u5b58\u5728\uff0c\u641c\u7d22\u53f3\u5b50\u6811 else if (pl == null) p = pr; // hash\u503c\u76f8\u7b49\uff0ckey\u4e0d\u7b49\uff0c\u53f3\u5b50\u6811\u4e0d\u5b58\u5728\uff0c\u641c\u7d22\u5de6\u5b50\u6811 else if (pr == null) p = pl; /* * comparableClassFor\u7684\u4f5c\u7528\u662f: * \u5982\u679ck\u5b9e\u73b0\u4e86Comparable\u63a5\u53e3\uff0c\u8fd4\u56dek\u7684Class, * \u5426\u5219\u8fd4\u56denull\u3002 * compareComparables\u7684\u4f5c\u7528\u662f\uff1a * \u5c06k\u4e0epk\u505a\u6bd4\u8f83 * \u5982\u679cTreeNode\u7684Key\u53ef\u4ee5\u4f5c\u6bd4\u8f83\uff0c\u5c31\u53ef\u4ee5\u7ee7\u7eed\u5728\u6811\u4e2d\u641c\u7d22 */ else if ((kc != null || (kc = comparableClassFor(k)) != null) && (dir = compareComparables(kc, k, pk)) != 0) p = (dir < 0) ? pl : pr; // \u7531\u4e8ehash\u76f8\u7b49\uff0ckey\u65e0\u6cd5\u505a\u6bd4\u8f83\uff0c\u56e0\u6b64\u5148\u5728\u53f3\u5b50\u6811\u4e2d\u627e else if ((q = pr.findTreeNode(h, k, kc)) != null) return q; // \u53f3\u5b50\u6811\u6ca1\u6709\u627e\u5230\uff0c\u7ee7\u7eed\u4ece\u5f53\u524d\u7684\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4e2d\u627e else p = pl; } while (p != null); } return null; } }","title":"TreeNode"},{"location":"java%E5%90%8E%E7%AB%AF/ConcurrentHashMap%281.8%E7%89%88%E6%9C%AC%29%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#treebin","text":"TreeBin\u5c01\u88c5\u4e86\u7ea2\u9ed1\u6811\u7684\u903b\u8f91\uff0c\u6709\u5173\u7ea2\u9ed1\u6811, \u53ef\u4ee5\u53c2\u8003\u7684\u8d44\u6599\u6709 \u300aAlgorithm\u300b\u7f51\u7ad9 \u4ee5\u53ca \u4e2d\u6587\u7ffb\u8bd1 \u4e5f\u53ef\u4ee5\u8bd5\u73a9 Red/Black Tree Visualization \u3002 \u9644\u6587\u7ae0\u4e2d\u63d0\u5230\u7684\u7ea2\u9ed1\u6811\u65cb\u8f6c\u7684\u52a8\u56fe\u4e0eTreeBin\u4e2d\u7684rotateLeft\u3001rotateRight\u4ee3\u7801\u7247\u6bb5\u5e2e\u52a9\u7406\u89e3\u3002 \u5de6\u65cb\uff1a \u5bf9\u5e94\u4ee3\u7801 static <K,V> TreeNode<K,V> rotateLeft(TreeNode<K,V> root, TreeNode<K,V> p) { TreeNode<K,V> r, pp, rl; // p\u662f\u56fe\u4e2d\u7684E\u8282\u70b9\uff0cr\u662f\u56fe\u4e2d\u7684S\u8282\u70b9 if (p != null && (r = p.right) != null) { if ((rl = p.right = r.left) != null) rl.parent = p; // p\u662f\u6839\u8282\u70b9\uff0c\u5219\u6839\u8282\u70b9\u9700\u8981\u53d8\u5316 if ((pp = r.parent = p.parent) == null) (root = r).red = false; // p\u4e0d\u662f\u6839\u8282\u70b9\uff0c\u5982\u679cp\u662fpp\u7684\u5de6\u8282\u70b9\uff0c\u5c31\u66f4\u65b0pp\u7684left else if (pp.left == p) pp.left = r; else pp.right = r; // \u628ap\u653e\u5728\u5de6\u5b50\u6811\u4e2d r.left = p; p.parent = r; } return root; } \u53f3\u65cb\uff1a \u5bf9\u5e94\u4ee3\u7801 static <K,V> TreeNode<K,V> rotateRight(TreeNode<K,V> root, TreeNode<K,V> p) { TreeNode<K,V> l, pp, lr; // p\u662f\u9014\u4e2d\u7684S\uff0cl\u662f\u56fe\u4e2d\u7684E if (p != null && (l = p.left) != null) { if ((lr = p.left = l.right) != null) lr.parent = p; // p\u662f\u6839\u8282\u70b9\uff0c\u5219\u6839\u8282\u70b9\u9700\u8981\u53d8\u5316 if ((pp = l.parent = p.parent) == null) (root = l).red = false; else if (pp.right == p) pp.right = l; else pp.left = l; l.right = p; p.parent = l; } return root; } \u4ec5\u5217\u51faTreebin\u6570\u636e\u6210\u5458\u4ee5\u53ca\u90e8\u5206\u65b9\u6cd5\uff1a // \u7ef4\u62a4\u4e86\u4e00\u4e2a\u7ea2\u9ed1\u6811 static final class TreeBin<K,V> extends Node<K,V> { TreeNode<K,V> root; // \u94fe\u8868\u5934\u7ed3\u70b9\uff0c\u6bcf\u6b21\u90fd\u5c06\u65b0\u8282\u70b9\u63d2\u5165\u5230\u94fe\u8868\u7684\u5934\u90e8\uff0c\u6210\u4e3a\u65b0\u7684\u5934\u7ed3\u70b9 // \u56e0\u6b64\u8be5\u94fe\u8868\u4e2d\u8282\u70b9\u7684\u987a\u5e8f\u4e0e\u63d2\u5165\u987a\u5e8f\u76f8\u53cd volatile TreeNode<K,V> first; volatile Thread waiter; volatile int lockState; /** * \u8fd4\u56de\u5339\u914d\u7684node\u6216\u8005\u6ca1\u6709\u5339\u914d\u7684\u5c31\u8fd4\u56denull. \u5728\u6811\u4e2d\u4ece\u6839\u8282\u70b9\u5f00\u59cb\u6bd4\u8f83\uff0c * \u5f53\u9501\u4e0d\u53ef\u7528\u7684\u65f6\u5019\u8fdb\u884c\u7ebf\u6027\u641c\u7d22 */ final Node<K,V> find(int h, Object k) { if (k != null) { for (Node<K,V> e = first; e != null; ) { int s; K ek; // \u9501\u4e0d\u53ef\u7528\uff0clockState\u5305\u542b\u4e86WAITER\u6216\u8005WRITER\u6807\u5fd7\u4f4d if (((s = lockState) & (WAITER|WRITER)) != 0) { if (e.hash == h && ((ek = e.key) == k || (ek != null && k.equals(ek)))) return e; e = e.next; } // \u9501\u53ef\u7528\uff0c\u5f53\u524d\u5bf9\u8c61\u8bbe\u7f6e\u4e3aREADER\u72b6\u6001 else if (U.compareAndSwapInt(this, LOCKSTATE, s, s + READER)) { TreeNode<K,V> r, p; try { // \u5728\u6811\u4e2d\u67e5\u627e\u5339\u914d\u7684\u8282\u70b9 p = ((r = root) == null ? null : r.findTreeNode(h, k, null)); } finally { Thread w; // \u53d6\u6d88\u5f53\u524d\u9501\u7684READER\u72b6\u6001 if (U.getAndAddInt(this, LOCKSTATE, -READER) == (READER|WAITER) && (w = waiter) != null) LockSupport.unpark(w); } return p; } } } return null; } // \u5bfb\u627e\u6216\u8005\u6dfb\u52a0\u4e00\u4e2a\u8282\u70b9 final TreeNode<K,V> putTreeVal(int h, K k, V v) { Class<?> kc = null; boolean searched = false; for (TreeNode<K,V> p = root;;) { int dir, ph; K pk; // \u7ea2\u9ed1\u6811\u662f\u7a7a\uff0c\u76f4\u63a5\u63d2\u5165\u5230\u6839\u8282\u70b9 if (p == null) { first = root = new TreeNode<K,V>(h, k, v, null, null); break; } // \u6839\u636ehash\u503c\u8bbe\u7f6e\u6807\u8bb0\u4f4d else if ((ph = p.hash) > h) dir = -1; else if (ph < h) dir = 1; // hash\u503c\u76f8\u540c\uff0c\u5e76\u4e14k\u4e0epk\u76f8\u7b49\uff08equals\uff09\uff0c\u76f4\u63a5\u8fd4\u56de else if ((pk = p.key) == k || (pk != null && k.equals(pk))) return p; // hash\u76f8\u540c\uff0cp\u4e0epk\u4e0dequals\uff0c\u4f46\u662f\u6309\u7167\u6bd4\u8f83\u63a5\u53e3\u53d1\u73b0p\u4e0epk\u76f8\u7b49 else if ((kc == null && (kc = comparableClassFor(k)) == null) || (dir = compareComparables(kc, k, pk)) == 0) { if (!searched) { TreeNode<K,V> q, ch; searched = true; if (((ch = p.left) != null && (q = ch.findTreeNode(h, k, kc)) != null) || ((ch = p.right) != null && (q = ch.findTreeNode(h, k, kc)) != null)) return q; } // \u6839\u636e\u4e00\u79cd\u786e\u5b9a\u7684\u89c4\u5219\u6765\u8fdb\u884c\u6bd4\u8f83\uff0c\u81f3\u4e8e\u89c4\u5219\u672c\u8eab\u5177\u4f53\u662f\u4ec0\u4e48\u75c5\u4e0d\u91cd\u8981 dir = tieBreakOrder(k, pk); } // \u7a0b\u5e8f\u8fd0\u884c\u5230\u8fd9\u91cc\uff0c\u8bf4\u660e\u5f53\u524d\u8282\u70b9\u4e0d\u5339\u914d\uff0c\u4f46\u5b50\u6811\u4e2d\u53ef\u80fd\u4f1a\u6709\u5339\u914d\u7684Node TreeNode<K,V> xp = p; // \u6839\u636e\u5927\u5c0f\u5173\u7cfb\u79fb\u52a8p\u5230\u5de6\u5b50\u6811\u6216\u8005\u53f3\u5b50\u6811 // \u5982\u679c\u6ee1\u8db3p\u4e3anull\uff0c\u5219\u8bf4\u660e\u6811\u4e2d\u6ca1\u6709\u8282\u70b9\u80fd\u4e0e\u4e4b\u5339\u914d\uff0c\u5e94\u5f53\u5728p\u4f4d\u7f6e\u63d2\u5165\u65b0\u8282\u70b9\uff0c\u7136\u540e\u7ef4\u62a4\u7ea2\u9ed1\u6811\u7684\u6027\u8d28 if ((p = (dir <= 0) ? p.left : p.right) == null) { TreeNode<K,V> x, f = first; first = x = new TreeNode<K,V>(h, k, v, f, xp); if (f != null) f.prev = x; if (dir <= 0) xp.left = x; else xp.right = x; // \u4f18\u5148\u5c06\u65b0\u8282\u70b9\u67d3\u4e3a\u7ea2\u8272 if (!xp.red) x.red = true; else { lockRoot(); try { root = balanceInsertion(root, x); } finally { unlockRoot(); } } break; } } assert checkInvariants(root); return null; } } // \u7ea2\u9ed1\u6811\u7684\u5e73\u8861\u63d2\u5165 static <K,V> TreeNode<K,V> balanceInsertion(TreeNode<K,V> root, TreeNode<K,V> x) { x.red = true; // \u5c06x\u67d3\u6210\u7ea2\u8272 for (TreeNode<K,V> xp, xpp, xppl, xppr;;) { // \u6839\u8282\u70b9\u5fc5\u987b\u662f\u9ed1\u8272 if ((xp = x.parent) == null) { x.red = false; return x; } // \u7236\u8282\u70b9\u662f\u9ed1\u8272\u6216\u8005\u7236\u8282\u70b9\u662f\u6839\u8282\u70b9 // \u603b\u4e4b\u7236\u8282\u70b9\u662f\u9ed1\u8272\uff0c\u90a3\u4e48\u4e0d\u4f1a\u8fdd\u53cd\u7ea2\u9ed1\u6811\u6027\u8d28 // \u4e0d\u9700\u8981\u8c03\u6574\u7ed3\u6784\uff0c\u76f4\u63a5\u8fd4\u56de\u6839\u8282\u70b9\u5373\u53ef else if (!xp.red || (xpp = xp.parent) == null) return root; // \u7236\u8282\u70b9\u662f\u7ea2\u8272\uff08\u9700\u8981\u8c03\u6574\uff09\uff0c\u4e14\u5728\u7956\u7236\u8282\u70b9\u7684\u5de6\u5b50\u6811\u4e2d if (xp == (xppl = xpp.left)) { // \u56e0\u4e3a\u7236\u8282\u70b9\u4e3a\u7ea2\u8272\uff0c\u6240\u4ee5xppr\u5fc5\u987b\u662f\u7ea2\u8272\u6216\u7a7a\uff0c\u4e0d\u53ef\u80fd\u662f\u9ed1\u8272 // \u7956\u7236\u8282\u70b9\u7684\u53f3\u8282\u70b9\u4e3a\u7ea2\u8272 if ((xppr = xpp.right) != null && xppr.red) { /** * \u9ed1 \u7ea2 * / \\ \uff08\u67d3\u8272\u540e\uff09 / \\ * \u7ea2 \u7ea2 -> \u9ed1 \u9ed1 * / / * \u7ea2 \u7ea2 * * \u53ef\u89c1\u901a\u8fc7\u8c03\u6574\u989c\u8272\u540e\uff0c\u5b50\u6811\u4e0d\u9700\u8981\u65cb\u8f6c\u5c31\u53ef\u4ee5\u6ee1\u8db3\u7ea2\u9ed1\u6811\u7684\u6027\u8d28 * \u4f46\u7531\u4e8expp\u53d8\u6210\u4e86\u7ea2\u8272\uff0c\u6709\u53ef\u80fd\u8fdd\u53cd\u7ea2\u9ed1\u6811\u6027\u8d28\uff0c\u4ecd\u7136\u9700\u8981\u5411\u4e0a\u8c03\u6574 */ xppr.red = false; xp.red = false; xpp.red = true; x = xpp; } // xppr\u662f\u7a7a else { /** * \u9ed1 * / * \u7ea2 * \\ * \u7ea2 */ if (x == xp.right) { /** * \u8fdb\u884c\u5de6\u65cb\u64cd\u4f5c\uff0c\u53d8\u4e3a\u4ee5\u4e0b\u5f62\u5f0f\uff0c * \u53ef\u4ee5\u770b\u51fa\u6b64\u65f6\u4efb\u7136\u8fdd\u53cd\u7ea2\u9ed1\u6811\u7684\u6027\u8d28\uff0c * \u7136\u800cx\u4ecd\u7136\u6307\u5411\u4e86\u6700\u4e0b\u9762\u51b2\u7a81\u7684\u7ea2\u8272\u8282\u70b9\uff0c * \u6b64\u5904\u4ec5\u4ec5\u8c03\u6574\u4e86\u6811\u7684\u5f62\u72b6 * * \u9ed1 * / * \u7ea2 * / * \u7ea2 */ root = rotateLeft(root, x = xp); xpp = (xp = x.parent) == null ? null : xp.parent; } /* * \u7531\u4e8e\u8c03\u6574\u4e86\u6811\u7684\u5f62\u72b6\uff0c\u56e0\u6b64\u6b64\u65f6\u6811\u4e00\u5b9a\u957f\u6210\u8fd9\u4e2a\u6837\u5b50 * * \u9ed1 * / * \u7ea2 * / * \u7ea2 * * \u5728\u67d3\u8272\u5e76\u53f3\u65cb\u4e4b\u540e\uff0c\u53d8\u4e3a * * \u9ed1 * / \\ * \u7ea2 \u7ea2 */ if (xp != null) { xp.red = false; if (xpp != null) { xpp.red = true; root = rotateRight(root, xpp); } } } } // x\u5728\u7956\u7236\u8282\u70b9\u7684\u53f3\u5b50\u6811\u4e2d\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0ex\u5728\u7956\u7236\u8282\u70b9\u5de6\u5b50\u6811\u4e2d\u7c7b\u4f3c\uff0c\u56e0\u6b64\u4e0d\u591a\u4f5c\u89e3\u91ca\uff0c\u4e0d\u660e\u767d\u7684\u8bdd\u7c7b\u6bd4\u5373\u53ef\u3002 else { /** * \u9ed1 \u7ea2 * / \\ (\u67d3\u8272\u540e) / \\ * \u7ea2 \u7ea2 -> \u9ed1 \u9ed1 * \\ \\ * \u7ea2 \u7ea2\u8272 */ if (xppl != null && xppl.red) { xppl.red = false; xp.red = false; xpp.red = true; x = xpp; } else { if (x == xp.left) { root = rotateRight(root, x = xp); xpp = (xp = x.parent) == null ? null : xp.parent; } if (xp != null) { xp.red = false; if (xpp != null) { xpp.red = true; root = rotateLeft(root, xpp); } } } } } }","title":"TreeBin"},{"location":"java%E5%90%8E%E7%AB%AF/ConcurrentHashMap%281.8%E7%89%88%E6%9C%AC%29%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#_2","text":"// ForwardingNode\u7684hash\u503c\u90fd\u662f-1 static final int MOVED = -1; // Treebin\u7684hash\u503c\u662f-1 static final int TREEBIN = -2; /** * \u5728\u7b2c\u4e00\u6b21insert\u7684\u65f6\u5019\u624d\u8fdb\u884c\u521d\u59cb\u5316(\u5ef6\u8fdf\u521d\u59cb\u5316) * Size\u603b\u662f2\u7684\u5e42. \u76f4\u63a5\u901a\u8fc7\u8fed\u4ee3\u5668\u8bbf\u95ee. */ transient volatile Node<K,V>[] table; // nextTable\u7684\u7528\u9014\uff1a\u53ea\u6709\u5728\u6269\u5bb9\u65f6\u662f\u975e\u7a7a\u7684 private transient volatile Node<K,V>[] nextTable; /** * Base counter value, used mainly when there is no contention, * but also as a fallback during table initialization * races. Updated via CAS. */ private transient volatile long baseCount; /** * sizeCtl\u662f\u63a7\u5236\u6807\u8bc6\u7b26\uff0c\u4e0d\u540c\u7684\u503c\u8868\u793a\u4e0d\u540c\u7684\u610f\u4e49\u3002 * -1\u4ee3\u8868\u6b63\u5728\u521d\u59cb\u5316\uff1b * -(1+\u6709\u6548\u6269\u5bb9\u7ebf\u7a0b\u7684\u6570\u91cf)\uff0c\u6bd4\u5982\uff0c-N \u8868\u793a\u6709N-1\u4e2a\u7ebf\u7a0b\u6b63\u5728\u8fdb\u884c\u6269\u5bb9\u64cd\u4f5c\uff1b * 0 \u8868\u793a\u8fd8\u672a\u8fdb\u884c\u521d\u59cb\u5316 * \u6b63\u6570\u4ee3\u8868\u521d\u59cb\u5316\u6216\u4e0b\u4e00\u6b21\u8fdb\u884c\u6269\u5bb9\u7684\u5927\u5c0f\uff0c\u7c7b\u4f3c\u4e8e\u6269\u5bb9\u9608\u503c\u3002\u5b83\u7684\u503c\u59cb\u7ec8\u662f\u5f53\u524dConcurrentHashMap\u5bb9\u91cf\u76840.75\u500d\uff0c\u8fd9\u4e0eloadfactor\u662f\u5bf9\u5e94\u7684\u3002\u5b9e\u9645\u5bb9\u91cf>=sizeCtl\uff0c\u5219\u6269\u5bb9\u3002 */ private transient volatile int sizeCtl; // \u6269\u5bb9\u7684\u65f6\u5019\uff0cnext\u6570\u7ec4\u4e0b\u6807+1 private transient volatile int transferIndex; /** * Spinlock (locked via CAS) used when resizing and/or creating CounterCells. */ private transient volatile int cellsBusy; /** * Table of counter cells. When non-null, size is a power of 2. */ private transient volatile CounterCell[] counterCells; // \u89c6\u56fe private transient KeySetView<K,V> keySet; private transient ValuesView<K,V> values; private transient EntrySetView<K,V> entrySet;","title":"\u6838\u5fc3\u6210\u5458"},{"location":"java%E5%90%8E%E7%AB%AF/ConcurrentHashMap%281.8%E7%89%88%E6%9C%AC%29%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#_3","text":"","title":"\u6838\u5fc3\u51fd\u6570"},{"location":"java%E5%90%8E%E7%AB%AF/ConcurrentHashMap%281.8%E7%89%88%E6%9C%AC%29%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#concurrenthashmapint-initialcapacity","text":"\u4e4b\u6240\u4ee5\u5217\u51fa\u8fd9\u4e2a\u51fd\u6570\uff0c\u662f\u56e0\u4e3a\u8fd9\u4e2a\u51fd\u6570\u521d\u59cb\u5316\u4e86sizeCtl\uff0c\u5e76\u4e14\u53ef\u4ee5\u770b\u51fatable\u5728\u8fd9\u91cc\u5e76\u6ca1\u6709\u88ab\u521d\u59cb\u5316\uff0c\u800c\u662f\u5728\u63d2\u5165\u5143\u7d20\u7684\u65f6\u5019\u8fdb\u884c\u5ef6\u8fdf\u521d\u59cb\u5316\u3002 \u6211\u4eec\u8981\u6ce8\u610f\u7684\u662ftable\u7684\u957f\u5ea6\u59cb\u7ec8\u662f2\u7684\u5e42\uff0csizeCtl\u7684\u503c\u4e3a\u6b63\u6570\u65f6\u8868\u793a\u6269\u5bb9\u7684\u6700\u5c0f\u9600\u503c\u3002 // \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u6784\u9020\u4e86\u4e00\u4e2a\u80fd\u591f\u5bb9\u7eb3initialCapacity\u4e2a\u5143\u7d20\u7684\u5bf9\u8c61\uff0c // \u4f46\u5b9e\u9645table\u7684\u5927\u5c0f\u6bd41.5\u500d\u7684initialCapacity\u8fd8\u591a public ConcurrentHashMap(int initialCapacity) { if (initialCapacity < 0) throw new IllegalArgumentException(); // \u4fdd\u8bc1cap\u662f2\u7684\u5e42\uff0c\u5176\u4e2dtableSizeFor\u8fd4\u56de\u5927\u4e8e\u5165\u53c2\u7684\u6700\u5c0f\u76842\u7684\u5e42 int cap = ((initialCapacity >= (MAXIMUM_CAPACITY >>> 1)) ? MAXIMUM_CAPACITY : tableSizeFor(initialCapacity + (initialCapacity >>> 1) + 1)); this.sizeCtl = cap; }","title":"ConcurrentHashMap(int initialCapacity)"},{"location":"java%E5%90%8E%E7%AB%AF/ConcurrentHashMap%281.8%E7%89%88%E6%9C%AC%29%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#inittable","text":"// \u521d\u59cb\u5316table\uff0c\u4f7f\u7528sizeCtl\u8bb0\u5f55table\u7684\u5bb9\u91cf // \u4e3a\u4e86\u4fdd\u8bc1\u5e76\u53d1\u8bbf\u95ee\u4e0d\u4f1a\u51fa\u73b0\u51b2\u7a81\uff0c\u4f7f\u7528\u4e86Unsafe\u7684CAS\u64cd\u4f5c private final Node<K,V>[] initTable() { Node<K,V>[] tab; int sc; // tab\u662f\u7a7a\u7684 while ((tab = table) == null || tab.length == 0) { // \u5982\u679c\u5df2\u7ecf\u521d\u59cb\u5316\u8fc7 if ((sc = sizeCtl) < 0) Thread.yield(); // \u9000\u51fa\u521d\u59cb\u5316\u6570\u7ec4\u7684\u7ade\u4e89; just spin // \u5982\u679c\u6ca1\u6709\u7ebf\u7a0b\u5728\u521d\u59cb\u5316\uff0c\u5c06sizeCtl\u8bbe\u7f6e\u4e3a-1\uff0c\u8868\u793a\u6b63\u5728\u521d\u59cb\u5316 // CAS\u64cd\u4f5c\uff0c\u7531\u6b64\u53ef\u89c1sizeCtl\u7ef4\u62a4table\u7684\u5e76\u53d1\u8bbf\u95ee else if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) { try { // \u518d\u6b21\u68c0\u67e5table\u662f\u5426\u4e3a\u7a7a if ((tab = table) == null || tab.length == 0) { // \u8ba1\u7b97\u5206\u914d\u591a\u5c11\u4e2aNode // sc\u5927\u4e8e0\u7684\u65f6\u5019\u8868\u793a\u8981\u5206\u914d\u7684\u5927\u5c0f // \u5426\u5219\u9ed8\u8ba4\u5206\u914d16\u4e2anode int n = (sc > 0) ? sc : DEFAULT_CAPACITY; @SuppressWarnings(\"unchecked\") Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n]; table = tab = nt; // \u4e0b\u6b21\u6269\u5bb9\u7684\u6700\u5c0f\u9600\u503c0.75*n // \u6ce8\u610f0.75 * n < n\uff0c\u800c\u4e14\u5b83\u5f88\u53ef\u80fd\u4e0d\u662f2\u7684\u5e42\uff0c // \u4f8b\u5982n = 16\uff0c \u5219sc = 12\uff1b // \u56e0\u6b64\u8fd9\u4e2a\u9600\u503c\u5728\u540e\u7eed\u6269\u5bb9\u60c5\u51b5\u4e0b\u5b9e\u9645\u4e0a\u4e0d\u4f1a\u6210\u4e3a\u6570\u7ec4\u7684\u5bb9\u91cf\u503c\uff0c\u4f46\u5b83\u53ef\u4ee5\u7528\u6765\u80fd\u4fdd\u8bc1\u7528\u6237\u63d0\u4f9b\u4e86\u5bb9\u91cf\u5927\u5c0f\u65f6\uff0c\u80fd\u591f\u5bb9\u7eb3\u7528\u6237\u8981\u6c42\u6570\u76ee\u7684\u5143\u7d20\u3002 sc = n - (n >>> 2); } } finally { sizeCtl = sc; } break; } } return tab; }","title":"initTable"},{"location":"java%E5%90%8E%E7%AB%AF/ConcurrentHashMap%281.8%E7%89%88%E6%9C%AC%29%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#put","text":"put\u8fc7\u7a0b\u7684\u63cf\u8ff0\uff1a \u4e3a\u8868\u8ff0\u65b9\u4fbf\uff0c\u7528\u7b26\u53f7i \u6765\u8868\u793a (n - 1) & hash\uff0c\u7528newNode\u8868\u793a\u4f7f\u7528key,value\u521b\u5efa\u7684\u8282\u70b9 loop: { if table == null { \u521d\u59cb\u5316\u4e00\u4e2a\u9ed8\u8ba4\u957f\u5ea6\u4e3a16\u7684\u6570\u7ec4 } else table[i] == null { table[i] = newNode } else hash == -1\uff0ctable[i]\u662fForwardingNode { \u8fdb\u884c\u6574\u5408\u8868\u7684\u64cd\u4f5c } else { if hash >= 0\uff0ctable[i]\u4e0d\u662f\u7279\u6b8aNode(\u94fe\u8868\u4e2d\u7684Node) { \u5c06newNode\u63d2\u5165\u5230\u94fe\u8868\u4e2d } else table[i]\u662fTreeBin { newNode\u63d2\u5165\u5230TreeNode\u4e2d } } addCount(1L, binCount); } \u901a\u8fc7\u7814\u8bfb\u4ee3\u7801\uff0c\u53d1\u73b0Doug Lea\u4f7f\u7528\u4e86\u4e00\u79cd\u6709\u6548\u4e14\u9ad8\u6548\u7684\u6280\u5de7\uff1a \u5728\u5faa\u73af\u91cc\u9762\u5d4c\u5957\u4f7f\u7528CAS\u64cd\u4f5c\u3002\u8fd9\u79cd\u6280\u5de7\u628a\u4e34\u754c\u533a\u53d8\u5f97\u5f88\u5c0f\uff0c\u56e0\u6b64\u6bd4\u8f83\u9ad8\u6548\u3002 put\u6e90\u7801\u5982\u4e0b\uff1a public V put(K key, V value) { return putVal(key, value, false); } /** put\u548cputIfAbsent\u90fd\u662f\u901a\u8fc7\u8c03\u7528putVal\u65b9\u6cd5\u6765\u5b9e\u73b0\u7684*/ final V putVal(K key, V value, boolean onlyIfAbsent) { // ConcurrentHashMap\u4e0d\u652f\u6301key\u548cvalue\u662fnull if (key == null || value == null) throw new NullPointerException(); // \u83b7\u53d6hash\u503c int hash = spread(key.hashCode()); int binCount = 0; for (Node<K,V>[] tab = table;;) { Node<K,V> f; int n, i, fh; // case 1\uff1atab\u4e3anull\uff0c\u9700\u8981\u521d\u59cb\u5316tab if (tab == null || (n = tab.length) == 0) tab = initTable(); // case 2: \u6ca1\u6709\u4efb\u4f55\u8282\u70b9hash\u503c\u4e0e\u5f53\u524d\u8981\u63d2\u5165\u7684\u8282\u70b9\u76f8\u540c else if ((f = tabAt(tab, i = (n - 1) & hash)) == null) { if (casTabAt(tab, i, null, new Node<K,V>(hash, key, value, null))) break; // no lock when adding to empty bin } // case 3: \u5f53\u9047\u5230\u8868\u8fde\u63a5\u70b9\u65f6\uff0c\u9700\u8981\u8fdb\u884c\u6574\u5408\u8868\u7684\u64cd\u4f5c // \u9700\u8981\u6ce8\u610f\u7684\u662f\uff0c\u9047\u5230\u8fde\u63a5\u70b9\u7684\u65f6\u5019\uff0c\u5e76\u6ca1\u6709\u63d2\u5165\u65b0\u8282\u70b9\uff0c\u4ec5\u4ec5\u5e2e\u52a9\u6269\u5bb9\uff0c\u56e0\u4e3a\u5f53\u524d\u7ebf\u7a0b\u8feb\u5207\u9700\u8981\u5c3d\u5feb\u63d2\u5165\u65b0\u8282\u70b9\uff0c\u53ea\u80fd\u7b49\u5f85\u6269\u5bb9\u5b8c\u6bd5\u624d\u6709\u53ef\u80fd\u63d2\u5165\u65b0\u8282\u70b9 else if ((fh = f.hash) == MOVED) tab = helpTransfer(tab, f); // case 4: \u627e\u5230\u5bf9\u5e94\u4e8ehash\u503c\u7684\u94fe\u8868\u9996\u8282\u70b9\uff0c\u4e14\u8be5\u8282\u70b9\u4e0d\u662f\u8fde\u63a5\u8282\u70b9 else { V oldVal = null; synchronized (f) { if (tabAt(tab, i) == f) { if (fh >= 0) { binCount = 1; for (Node<K,V> e = f;; ++binCount) { K ek; // \u5982\u679c\u627e\u5230\u76f8\u540ckey\u7684node\uff0c\u6839\u636eonlyIfAbsent\u6765\u66f4\u65b0node\u7684\u503c if (e.hash == hash && ((ek = e.key) == key || (ek != null && key.equals(ek)))) { oldVal = e.val; if (!onlyIfAbsent) e.val = value; break; } // \u5982\u679c\u4e00\u76f4\u5230\u94fe\u8868\u7684\u5c3e\u90e8\u90fd\u6ca1\u6709\u627e\u5230\u4efb\u4f55node\u7684key\u4e0ekey\u76f8\u540c\uff0c\u5c31\u63d2\u5165\u5230\u94fe\u8868\u7684\u5c3e\u90e8 Node<K,V> pred = e; if ((e = e.next) == null) { pred.next = new Node<K,V>(hash, key, value, null); break; } } } // \u5982\u679c\u8be5\u8282\u70b9\u662fTreeBin\uff0c\u5c31\u63d2\u5165\u5230TreeBin\u4e2d else if (f instanceof TreeBin) { Node<K,V> p; binCount = 2; // \u5f53\u5b58\u5728\u76f8\u540c\u7684key\u65f6\uff0cputTreeVal\u4e0d\u4f1a\u4fee\u6539\u90a3\u4e2aTreeNode\uff0c\u800c\u662f\u8fd4\u56de\u7ed9p\uff0c\u7531onlyIfAbsent\u51b3\u5b9a\u662f\u5426\u4fee\u6539p.val if ((p = ((TreeBin<K,V>)f).putTreeVal(hash, key, value)) != null) { oldVal = p.val; if (!onlyIfAbsent) p.val = value; } } } } // \u82e5\u94fe\u8868\u957f\u5ea6\u4e0d\u4f4e\u4e8e8\uff0c\u5c31\u5c06\u94fe\u8868\u8f6c\u6362\u4e3a\u6811 if (binCount != 0) { if (binCount >= TREEIFY_THRESHOLD) treeifyBin(tab, i); if (oldVal != null) return oldVal; break; } } } // \u6dfb\u52a0\u8ba1\u6570\uff0c\u5982\u6709\u9700\u8981\uff0c\u6269\u5bb9 addCount(1L, binCount); return null; } // \u7ed9tab[i]\u8d4b\u503c // \u5982\u679ctab[i]\u7b49\u4e8ec,\u5c31\u5c06tab[i]\u4e0ev\u4ea4\u6362\u6570\u503c static final <K,V> boolean casTabAt(Node<K,V>[] tab, int i, Node<K,V> c, Node<K,V> v) { return U.compareAndSwapObject(tab, ((long)i << ASHIFT) + ABASE, c, v); } /** * \u534f\u52a9\u6269\u5bb9\u65b9\u6cd5\u3002 * \u591a\u7ebf\u7a0b\u4e0b\uff0c\u5f53\u524d\u7ebf\u7a0b\u68c0\u6d4b\u5230\u5176\u4ed6\u7ebf\u7a0b\u6b63\u8fdb\u884c\u6269\u5bb9\u64cd\u4f5c\uff0c\u5219\u534f\u52a9\u5176\u4e00\u8d77\u6269\u5bb9\uff1b *\uff08\u53ea\u6709\u8fd9\u79cd\u60c5\u51b5\u4f1a\u88ab\u8c03\u7528\uff09\u4ece\u67d0\u79cd\u7a0b\u5ea6\u4e0a\u8bf4\uff0c\u5176\u201c\u4f18\u5148\u7ea7\u201d\u5f88\u9ad8\uff0c * \u53ea\u8981\u68c0\u6d4b\u5230\u6269\u5bb9\uff0c\u5c31\u4f1a\u653e\u4e0b\u5176\u4ed6\u5de5\u4f5c\uff0c\u5148\u6269\u5bb9\u3002 * \u8c03\u7528\u4e4b\u524d\uff0cnextTable\u4e00\u5b9a\u5df2\u5b58\u5728\u3002 */ final Node<K,V>[] helpTransfer(Node<K,V>[] tab, Node<K,V> f) { Node<K,V>[] nextTab; int sc; // \u5982\u679cf\u662ftab\u4e2d\u7684\u8fde\u63a5\u8282\u70b9\uff0c\u5e76\u4e14\u5b83\u6240\u8fde\u63a5\u7684table\u975e\u7a7a if (tab != null && (f instanceof ForwardingNode) && (nextTab = ((ForwardingNode<K,V>)f).nextTable) != null) { // \u6807\u5fd7\u4f4d int rs = resizeStamp(tab.length); // \u5f53\u6b63\u5728\u6269\u5bb9\u65f6\uff0c\u5e2e\u52a9\u6269\u5bb9 while (nextTab == nextTable && table == tab && (sc = sizeCtl) < 0) { if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 || sc == rs + MAX_RESIZERS || transferIndex <= 0) break; if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1)) { transfer(tab, nextTab); break; } } return nextTab; } return table; }","title":"put"},{"location":"java%E5%90%8E%E7%AB%AF/ConcurrentHashMap%281.8%E7%89%88%E6%9C%AC%29%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#get","text":"get\u65b9\u6cd5\u6bd4\u8f83\u7b80\u5355\uff0c\u6ca1\u6709\u4f7f\u7528\u9501\uff0c\u800c\u662f\u7528Unsafe\u6765\u4fdd\u8bc1\u83b7\u53d6\u7684\u5934\u7ed3\u70b9\u662fvolatile\u7684 public V get(Object key) { Node<K,V>[] tab; Node<K,V> e, p; int n, eh; K ek; // \u83b7\u53d6hash\u503ch int h = spread(key.hashCode()); // tab\u53ea\u662f\u4fdd\u5b58\u4e86hash\u503c\u76f8\u540c\u7684\u5934\u7ed3\u70b9 if ((tab = table) != null && (n = tab.length) > 0 && // table\u91cc\u9762\u6709\u5143\u7d20 (e = tabAt(tab, (n - 1) & h)) != null) {// \u6839\u636eh\u6765\u83b7\u53d6\u5934\u7ed3\u70b9e // hash\u503c\u76f8\u540c\uff0c\u5982\u679c\u627e\u5230key\uff0c\u76f4\u63a5\u8fd4\u56de if ((eh = e.hash) == h) { if ((ek = e.key) == key || (ek != null && key.equals(ek))) return e.val; } // todo\uff1a\u770b\u4e00\u4e0bhash\u503c\u4ec0\u4e48\u65f6\u5019\u5c0f\u4e8e0 else if (eh < 0) return (p = e.find(h, key)) != null ? p.val : null; while ((e = e.next) != null) { if (e.hash == h && ((ek = e.key) == key || (ek != null && key.equals(ek)))) return e.val; } } return null; } //tableAt\u65b9\u6cd5\u4f7f\u7528\u4e86Unsafe\u5bf9\u8c61\u6765\u83b7\u53d6\u6570\u7ec4\u4e2d\u4e0b\u6807\u4e3ai\u7684\u5bf9\u8c61 static final <K,V> Node<K,V> tabAt(Node<K,V>[] tab, int i) { // \u7b2ci\u4e2a\u5143\u7d20\u5b9e\u9645\u5730\u5740i * (2^ASHIFT) + ABASE return (Node<K,V>)U.getObjectVolatile(tab, ((long)i << ASHIFT) + ABASE); }","title":"get"},{"location":"java%E5%90%8E%E7%AB%AF/ConcurrentHashMap%281.8%E7%89%88%E6%9C%AC%29%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#treeifybin","text":"// \u5982\u679ctab\u7684\u957f\u5ea6\u5f88\u5c0f\uff0c\u5c0f\u4e8e64\u4e2a\uff0c\u5c31\u5c1d\u8bd5\u8fdb\u884c\u6269\u5bb9\u4e3a\u4e24\u500d\uff0c // \u5426\u5219\u5c31\u5c06\u4ee5tab[index]\u5f00\u5934\u7684\u94fe\u8868\u8f6c\u6362\u4e3aTreebin private final void treeifyBin(Node<K,V>[] tab, int index) { Node<K,V> b; int n, sc; if (tab != null) { // tab\u7684\u957f\u5ea6\u5c0f\u4e8e64\uff0c\u5c31\u5c1d\u8bd5\u8fdb\u884c\u6269\u5bb9 if ((n = tab.length) < MIN_TREEIFY_CAPACITY) tryPresize(n << 1); else if ((b = tabAt(tab, index)) != null && b.hash >= 0) { synchronized (b) { if (tabAt(tab, index) == b) { TreeNode<K,V> hd = null, tl = null; // \u8fd9\u4e2a\u5faa\u73af\u5efa\u7acb\u4e86TreeNode\u4e2d\u7684\u53cc\u5411\u94fe\u8868\uff0chd\u4fdd\u5b58\u4e86\u53cc\u5411\u94fe\u8868\u7684\u5934\u7ed3\u70b9 for (Node<K,V> e = b; e != null; e = e.next) { TreeNode<K,V> p = new TreeNode<K,V>(e.hash, e.key, e.val, null, null); if ((p.prev = tl) == null) hd = p; else tl.next = p; tl = p; } setTabAt(tab, index, new TreeBin<K,V>(hd)); } } } } }","title":"treeifyBin"},{"location":"java%E5%90%8E%E7%AB%AF/ConcurrentHashMap%281.8%E7%89%88%E6%9C%AC%29%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#trypresize","text":"\u6709\u5173\u6269\u5bb9\uff0c\u53ef\u4ee5\u53c2\u8003 \u6df1\u5165\u5206\u6790 ConcurrentHashMap 1.8 \u7684\u6269\u5bb9\u5b9e\u73b0 \u8fd9\u7bc7\u6587\u7ae0\u3002 // \u5c1d\u8bd5\u6269\u5bb9\u4f7f\u5b83\u80fd\u653esize\u4e2a\u5143\u7d20 private final void tryPresize(int size) { // \u8ba1\u7b97\u6269\u5bb9\u540e\u7684\u6570\u91cf int c = (size >= (MAXIMUM_CAPACITY >>> 1)) ? MAXIMUM_CAPACITY : tableSizeFor(size + (size >>> 1) + 1); int sc; while ((sc = sizeCtl) >= 0) { Node<K,V>[] tab = table; int n; // \u5982\u679ctab\u662f\u7a7a\u7684\uff0c\u76f4\u63a5\u6269\u5bb9 if (tab == null || (n = tab.length) == 0) { // \u8ba1\u7b97\u6269\u5bb9\u540e\u7684\u5bb9\u91cf n = (sc > c) ? sc : c; if (U.compareAndSwapInt(this, SIZECTL, sc, -1)) { try { if (table == tab) { @SuppressWarnings(\"unchecked\") Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n]; table = nt; // \u4e0b\u6b21\u6269\u5bb9\u7684\u5bb9\u91cf\u9600\u503c\u662f0.75 * n sc = n - (n >>> 2); } } finally { sizeCtl = sc; } } } // \u5bb9\u91cf\u5df2\u7ecf\u591f\u7528\uff0c\u4e0d\u9700\u8981\u8fdb\u884c\u6269\u5bb9\uff1b\u6216\u8005\u5bb9\u91cf\u592a\u5927\uff0c\u65e0\u6cd5\u8fdb\u884c\u6269\u5bb9\u3002 else if (c <= sc || n >= MAXIMUM_CAPACITY) break; // \u4ecd\u7136\u9700\u8981\u6269\u5bb9 else if (tab == table) { int rs = resizeStamp(n); // todo\uff1a\u4e0d\u662f\u5f88\u61c2\u4e3a\u4ec0\u4e48\u4f1a\u51fa\u73b0 sc < 0 \uff1f\u5148\u770b\u4e00\u4e0btransfer\u7684\u5b9e\u73b0 if (sc < 0) { Node<K,V>[] nt; if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 || sc == rs + MAX_RESIZERS || (nt = nextTable) == null || transferIndex <= 0) break; if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1)) transfer(tab, nt); } else if (U.compareAndSwapInt(this, SIZECTL, sc, (rs << RESIZE_STAMP_SHIFT) + 2)) transfer(tab, null); } } }","title":"tryPresize"},{"location":"java%E5%90%8E%E7%AB%AF/ConcurrentHashMap%281.8%E7%89%88%E6%9C%AC%29%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#transfer","text":"\u4f2a\u4ee3\u7801\uff1a n = table.length nextTable = new Node[2 * n] forwardingNode = new ForwardingNode forwardingNode.nextTable = nextTable; for(table[i] : table) { for(p = table[i]; p != null ; p = p.next) { if(p.hash & n == 0) \u5c06p\u653e\u5165nextTable[i]\u7684\u6570\u636e\u96c6\u5408\u4e2d else \u5c06p\u653e\u5165nextTable[i+n]\u7684\u6570\u636e\u96c6\u5408\u4e2d } table[i] = forwardingNode; } table = nextTable; nextTable = null; \u6570\u5b66\u516c\u5f0f\uff1a \u5df2\u77e5\uff1an = 2 ^ k \uff0c hash & (n-1) = i\uff0c\u663e\u800c\u6613\u89c1\uff1a \uff081\uff09\u82e5 hash & n = 0\uff0c \u5219 hash &(2*n - 1) = i \uff1b \uff082\uff09\u82e5 hash & n != 0, \u5219 hash&(2*n - 1) = i + n\u3002 \u6e90\u4ee3\u7801\u5728\u6b64\uff1a // \u628atable\u4e2d\u6240\u6709\u7684Node\u653e\u5165\u65b0\u7684table\u4e2d private final void transfer(Node<K,V>[] tab, Node<K,V>[] nextTab) { int n = tab.length, stride; if ((stride = (NCPU > 1) ? (n >>> 3) / NCPU : n) < MIN_TRANSFER_STRIDE) stride = MIN_TRANSFER_STRIDE; // subdivide range if (nextTab == null) { // initiating try { @SuppressWarnings(\"unchecked\") Node<K,V>[] nt = (Node<K,V>[])new Node<?,?>[n << 1]; nextTab = nt; } catch (Throwable ex) { // try to cope with OOME sizeCtl = Integer.MAX_VALUE; return; } nextTable = nextTab; transferIndex = n; } int nextn = nextTab.length; ForwardingNode<K,V> fwd = new ForwardingNode<K,V>(nextTab); boolean advance = true; boolean finishing = false; // to ensure sweep before committing nextTab for (int i = 0, bound = 0;;) { Node<K,V> f; int fh; while (advance) { int nextIndex, nextBound; if (--i >= bound || finishing) advance = false; else if ((nextIndex = transferIndex) <= 0) { i = -1; advance = false; } else if (U.compareAndSwapInt (this, TRANSFERINDEX, nextIndex, nextBound = (nextIndex > stride ? nextIndex - stride : 0))) { bound = nextBound; i = nextIndex - 1; advance = false; } } if (i < 0 || i >= n || i + n >= nextn) { int sc; if (finishing) { nextTable = null; table = nextTab; sizeCtl = (n << 1) - (n >>> 1); return; } if (U.compareAndSwapInt(this, SIZECTL, sc = sizeCtl, sc - 1)) { if ((sc - 2) != resizeStamp(n) << RESIZE_STAMP_SHIFT) return; finishing = advance = true; i = n; // recheck before commit } } else if ((f = tabAt(tab, i)) == null) advance = casTabAt(tab, i, null, fwd); else if ((fh = f.hash) == MOVED) advance = true; // already processed else { synchronized (f) { if (tabAt(tab, i) == f) { Node<K,V> ln, hn; if (fh >= 0) { int runBit = fh & n; Node<K,V> lastRun = f; for (Node<K,V> p = f.next; p != null; p = p.next) { int b = p.hash & n; if (b != runBit) { runBit = b; lastRun = p; } } if (runBit == 0) { ln = lastRun; hn = null; } else { hn = lastRun; ln = null; } for (Node<K,V> p = f; p != lastRun; p = p.next) { int ph = p.hash; K pk = p.key; V pv = p.val; if ((ph & n) == 0) ln = new Node<K,V>(ph, pk, pv, ln); else hn = new Node<K,V>(ph, pk, pv, hn); } setTabAt(nextTab, i, ln); setTabAt(nextTab, i + n, hn); setTabAt(tab, i, fwd); advance = true; } else if (f instanceof TreeBin) { TreeBin<K,V> t = (TreeBin<K,V>)f; TreeNode<K,V> lo = null, loTail = null; TreeNode<K,V> hi = null, hiTail = null; int lc = 0, hc = 0; for (Node<K,V> e = t.first; e != null; e = e.next) { int h = e.hash; TreeNode<K,V> p = new TreeNode<K,V> (h, e.key, e.val, null, null); if ((h & n) == 0) { if ((p.prev = loTail) == null) lo = p; else loTail.next = p; loTail = p; ++lc; } else { if ((p.prev = hiTail) == null) hi = p; else hiTail.next = p; hiTail = p; ++hc; } } ln = (lc <= UNTREEIFY_THRESHOLD) ? untreeify(lo) : (hc != 0) ? new TreeBin<K,V>(lo) : t; hn = (hc <= UNTREEIFY_THRESHOLD) ? untreeify(hi) : (lc != 0) ? new TreeBin<K,V>(hi) : t; setTabAt(nextTab, i, ln); setTabAt(nextTab, i + n, hn); setTabAt(tab, i, fwd); advance = true; } } } } } }","title":"transfer"},{"location":"java%E5%90%8E%E7%AB%AF/ConcurrentHashMap%281.8%E7%89%88%E6%9C%AC%29%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#addcount","text":"/** * Adds to count, and if table is too small and not already * resizing, initiates transfer. If already resizing, helps * perform transfer if work is available. Rechecks occupancy * after a transfer to see if another resize is already needed * because resizings are lagging additions. * * @param x the count to add * @param check if <0, don't check resize, if <= 1 only check if uncontended */ // \u6dfb\u52a0\u8ba1\u6570\uff0c\u5982\u679ctable\u592a\u5c0f\u4e14table\u6ca1\u6709\u5728\u6269\u5bb9\uff0c\u5c31\u8fdb\u884c\u6269\u5bb9 private final void addCount(long x, int check) { CounterCell[] as; long b, s; // \u5229\u7528CAS\u5feb\u901f\u66f4\u65b0baseCount\u7684\u503c if ((as = counterCells) != null || !U.compareAndSwapLong(this, BASECOUNT, b = baseCount, s = b + x)) { CounterCell a; long v; int m; boolean uncontended = true; if (as == null || (m = as.length - 1) < 0 || (a = as[ThreadLocalRandom.getProbe() & m]) == null || !(uncontended = U.compareAndSwapLong(a, CELLVALUE, v = a.value, v + x))) { fullAddCount(x, uncontended); return; } if (check <= 1) return; s = sumCount(); } // \u5f53\u4e4b\u524d\u68c0\u67e5\u7684\u8282\u70b9\u4e2a\u6570\u5927\u4e8e\u7b49\u4e8e0\u65f6\uff0c\u624d\u8003\u8651\u6269\u5bb9 if (check >= 0) { Node<K,V>[] tab, nt; int n, sc; while (s >= (long)(sc = sizeCtl) && (tab = table) != null && (n = tab.length) < MAXIMUM_CAPACITY) { // \u4e3a\u5f53\u524d\u7684n\u4fdd\u7559\u4e00\u4e2a\u6570\uff0c\u4e0d\u540c\u7684\u6570\u7ec4n\uff08\u8fd9\u91ccn=2^k\uff09\u5f97\u5230\u7684\u7ed3\u679c\u5fc5\u7136\u4e0d\u540c\uff0c\u53ef\u7c7b\u6bd4\u65f6\u95f4\u6233 int rs = resizeStamp(n); // \u5982\u679c\u6709\u7ebf\u7a0b\u6b63\u5728\u6269\u5bb9\uff0c\u5c31\u5e2e\u52a9\u5176\u6269\u5bb9 if (sc < 0) { if ((sc >>> RESIZE_STAMP_SHIFT) != rs || sc == rs + 1 || sc == rs + MAX_RESIZERS || (nt = nextTable) == null || transferIndex <= 0) break; if (U.compareAndSwapInt(this, SIZECTL, sc, sc + 1)) transfer(tab, nt); } // \u6ca1\u6709\u7ebf\u7a0b\u5728\u6269\u5bb9\uff0c\u76f4\u63a5\u6269\u5bb9 else if (U.compareAndSwapInt(this, SIZECTL, sc, (rs << RESIZE_STAMP_SHIFT) + 2)) transfer(tab, null); s = sumCount(); } } }","title":"addCount"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/","text":"Redis CheatSheet \u00b6 \u7b80\u4ecb \u00b6 \u6e05\u5355\u6765\u81ea \u300aRedis\u5f00\u53d1\u4e0e\u8fd0\u7ef4\u300b \u7279\u70b9 \u00b6 \u5feb\uff1b KV\u5b58\u50a8\uff1b \u529f\u80fd\u4e30\u5bcc\uff1a\u952e\u8fc7\u671f\uff0c\u53d1\u5e03\u8ba2\u9605\uff0cLua\uff0c\u4e8b\u52a1\uff0cPipeLine \u5355\u7ebf\u7a0b \u6301\u4e45\u5316 \u4e3b\u4ece\u590d\u5236 \u9ad8\u53ef\u7528 (Sentinel) \u5206\u5e03\u5f0f\uff08Cluster, version > 3.0\uff09 \u4f7f\u7528\u573a\u666f \u00b6 \u53ef\u4ee5\u505a\uff1a * \u7f13\u5b58 * \u8ba1\u6570 * \u5171\u4eabsession * \u9650\u901f * \u6807\u7b7e\uff08\u96c6\u5408\uff09 * \u6392\u884c\u699c\uff08\u6709\u5e8f\u96c6\u5408\uff09 \u7531\u4e8e\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u6570\u636e\u91cf\u4e0d\u80fd\u592a\u5927 API \u00b6 // \u5168\u5c40\u547d\u4ee4 keys * dbsize exists key del key expire key seconds type key object encoding key select dbInx // \u5b57\u7b26\u4e32 strlen key // \u54c8\u5e0c hset key field value hget key field // \u5217\u8868 rpush key value linsert key before|after pivot value lrange key start_inx end_inx blpop // \u96c6\u5408 sadd key e1 e2 ... srem key e1 //\u5220\u9664\u64cd\u4f5c sinter key1 key2 ... // \u591a\u4e2a\u96c6\u5408\u76f8\u4ea4 // \u6709\u5e8f\u96c6\u5408 zadd key score member [score member...] // pipeline mset // \u4e8b\u52a1 multi ... exec // \u811a\u672c\u7ba1\u7406 script load script flush script kill // Bitmaps setbit key offset value getbit key offset // HyperLoglog pfadd key e1 [e2 ...] pfcount key1 [key2 ...] // \u53d1\u5e03\u8ba2\u9605 publish channel message subscribe channel [channel2 ...] // CEO geoadd key longitude latitude member geopos key member // \u83b7\u53d6member\u7684\u7ecf\u7eac\u5ea6 // \u7edf\u8ba1\u4e0e\u6392\u67e5\u95ee\u9898 slowlog get {n} // \u83b7\u53d6\u6700\u8fd1n\u6761\u6162\u67e5\u8be2 redis-cli -h {ip} -p {port} bigkeys // \u83b7\u53d6\u5927\u5bf9\u8c61 redis-cli -h {ip} -p {port} --stat // \u7edf\u8ba1redis\u4f7f\u7528\u60c5\u51b5 \u6570\u636e\u7ed3\u6784\u4e0e\u7f16\u7801 \u00b6 \u5b57\u7b26\u4e32: int 8\u5b57\u8282 embstr < 39\u5b57\u8282 raw \u54c8\u5e0c\uff1a ziplist \u5143\u7d20\u4e2a\u6570 < 512, \u6240\u6709\u503c < 64\u5b57\u8282\uff0c\u5143\u7d20\u8fde\u7eed\u5b58\u50a8\uff0c\u7701\u7a7a\u95f4 hashtable \u5217\u8868\uff1a ziplist entry\u4e2a\u6570<512\u4e2a, \u6240\u6709value < 64\u5b57\u8282 linkedlist \u96c6\u5408\uff1a intset \u6574\u6570\u96c6\u5408\uff0c\u5143\u7d20\u4e2a\u6570<512 hashtable \u6709\u5e8f\u96c6\u5408 ziplist \u5143\u7d20\u4e2a\u6570<128\u4e2a, \u6240\u6709value<64\u5b57\u8282 skiplist \u5b9e\u7528\u529f\u80fd \u00b6 \u6162\u67e5\u8be2\u5206\u6790 \u00b6 slowlog-log-slower-than \u5355\u4f4d\u662f\u5fae\u79d2\uff0c 10 \u6beb\u79d2 slowlog-max-len \u6162\u67e5\u8be2\u6761\u6570\u4e0a\u9650\uff0c 1000\u4ee5\u4e0a Bitmaps \u00b6 \u4e00\u4ebf\u7528\u6237\uff0c\u5f53\u65e5\u662f\u5426\u8bbf\u95ee\u8fc7\u7f51\u7ad9 HyperLoglog \u00b6 \u6709\u53ef\u80fd\u6709\u8bef\u5dee \u53d1\u5e03\u8ba2\u9605 \u00b6 CEO \u00b6 \u5730\u7406\u4f4d\u7f6e\u4fe1\u606f\u8303\u56f4\u8ba1\u7b97 \u6301\u4e45\u5316 \u00b6 RDB \u00b6 \u89e6\u53d1\u673a\u5236 \u00b6 save bgsave \u8fd0\u4f5c\u6d41\u7a0b\u7565\u3002 \u4f18\u70b9\uff1a \u4f7f\u7528LZF\u7b97\u6cd5\u538b\u7f29\uff0c\u7d27\u51d1\uff0c\u9002\u5408\u505a\u5907\u4efd\uff0c\u6bcfXX\u5c0f\u65f6\u5907\u4efd\u4e00\u6b21\uff0c\u7528\u4e8e\u707e\u96be\u6062\u590d \u52a0\u8f7d\u901f\u5ea6\u5feb\u4e8eAOF \u7f3a\u70b9\uff1a \u65e0\u6cd5\u5b9e\u65f6\u6301\u4e45\u5316/\u79d2\u7ea7\u6301\u4e45\u5316\uff0c\u56e0\u4e3afork\u5c5e\u4e8e\u91cd\u91cf\u7ea7\u64cd\u4f5c \u517c\u5bb9\u6027\u95ee\u9898 AOF \u00b6 \u8fd0\u4f5c\u6d41\u7a0b\uff1a \u547d\u4ee4\u5199\u5165(append) \u00b6 \u5199\u5165aof_buf\uff0c\u51cf\u5c0f\u78c1\u76d8\u8d1f\u8f7d \u4f7f\u6587\u672c\u534f\u8bae\uff0c\u56e0\u4e3a\u517c\u5bb9\u6027\u597d\uff0caof\u4e00\u822c\u662f\u8ffd\u52a0\u64cd\u4f5c\uff0c\u53ef\u8bfb\u6027\u597d\uff0c\u65b9\u4fbf\u76f4\u63a5\u4fee\u6539\u548c\u7ba1\u7406 \u6587\u4ef6\u540c\u6b65(sync) \u00b6 \u540c\u6b65\u7b56\u7565\uff1a always \u6bcf\u6761\u547d\u4ee4\u5199\u5165\u7f13\u51b2\u533a\uff0c\u7acb\u5373fsync\u3002 everysec \u547d\u4ee4\u5199\u5165\u7f13\u51b2\u533a\u540ewrite\u3002\u5355\u72ec\u7ebf\u7a0b\u6bcf\u79d2fsync no \u5199\u5165aof_buf\u540e\u8c03\u7528write, \u4e0d\u5bf9aof_buf\u8fdb\u884cfsync \u5e38\u7528everysec, \u7528\u4e8e\u5e73\u8861\u6027\u80fd\u548c\u6570\u636e\u5b89\u5168\u6027\uff0c\u5728\u78c1\u76d8\u7e41\u5fd9\u7684\u65f6\u5019\uff0c\u5b9a\u65f6fsync\u7684\u7ebf\u7a0b\u4f1a\u9020\u6210\u4e3b\u7ebf\u7a0b\u963b\u585e\uff0c\u963b\u585e\u6d41\u7a0b\u5982\u4e0b\uff1a \u4e3b\u7ebf\u7a0b\u5199\u5165AOF\u7f13\u51b2\u533a AOF\u7ebf\u7a0b\u6bcf\u79d2\u6267\u884c\u4e00\u6b21fsync \u4e3b\u7ebf\u7a0b\u5bf9\u6bd4\u4e0a\u6b21AOF fsync\u6210\u529f\u7684\u65f6\u95f4\uff0c\u5982\u679c\u8ddd\u4e0a\u6b21\u6210\u529f\u65f6\u95f4\u57282\u79d2\u5185\u5c31\u4e0d\u963b\u585e\uff0c\u5426\u5219\u5c06\u963b\u585e\u76f4\u5230\u540c\u6b65\u64cd\u4f5c\u5b8c\u6210\u3002\uff08\u56e0\u6b64everysec\u6700\u591a\u53ef\u80fd\u4e22\u59312\u79d2\u6570\u636e\uff09 \u6587\u4ef6\u91cd\u5199(rewrite) \u00b6 \u624b\u52a8\u89e6\u53d1\uff1abgrewriteaof \u81ea\u52a8\u89e6\u53d1\uff1aauto-aof-rewrite-min-size, auto-aof-rewrite-percentage\uff08\u5f53\u524d\u6587\u4ef6\u4f53\u79ef/\u4e0a\u4e00\u6b21\u91cd\u5199\u540e\u4f53\u79ef\uff09 \u91cd\u542f\u52a0\u8f7d(load) \u00b6 \u5f00\u542faof\u7684\u60c5\u51b5\u4e0b\uff0c\u4f18\u5148\u52a0\u8f7daof \u590d\u5236 \u00b6 \u914d\u7f6e \u00b6 \u5efa\u7acb\u590d\u5236 slaveof {masterHost} \u65ad\u5f00\u590d\u5236 slaveof no one \u62d3\u6251\u7ed3\u6784 \u00b6 \u4e00\u4e3b\u4e00\u4ece\uff08\u7b80\u5355\uff0c\u4e0d\u5b89\u5168\uff09 \u4e00\u4e3b\u591a\u4ece\uff08\u53ef\u5229\u7528\u591a\u4e2a\u8282\u70b9\u5b9e\u73b0\u8bfb\u5199\u5206\u79bb\uff0c\u52a0\u91cd\u4e3b\u8282\u70b9\u8d1f\u8f7d\uff0c\u5f71\u54cd\u7a33\u5b9a\u6027\uff09 \u6811\u72b6\u4e3b\u4ece\uff08\u6709\u6548\u964d\u4f4e\u4e3b\u8282\u70b9\u8d1f\u8f7d\u548c\u9700\u8981\u4f20\u9001\u7ed9\u4ece\u8282\u70b9\u7684\u6570\u636e\u91cf\uff09 \u6570\u636e\u540c\u6b65 \u00b6 psync \u547d\u4ee4\u7528\u4e8e\u540c\u6b65\uff0c\u5206\u4e3a\u5168\u91cf\u590d\u5236\u548c\u90e8\u5206\u590d\u5236\uff0c\u53ef\u4ee5\u7528info replication\u6765\u67e5\u770b\u590d\u5236\u504f\u79fb\u91cf\u4ee5\u53ca\u590d\u5236\u79ef\u538b\u7f13\u51b2\u533a \u5fc3\u8df3\u673a\u5236 \u00b6 \u4e3b\u4ece\u8282\u70b9\u5efa\u7acb\u590d\u5236\u540e\uff0c\u7ef4\u62a4\u957f\u8fde\u63a5\u5e76\u5f7c\u6b64\u53d1\u9001\u5fc3\u8df3\u547d\u4ee4\uff1a \u4e3b\u8282\u70b9\u8fde\u63a5\u72b6\u6001\u4e3aflag=M, \u4ece\u8282\u70b9\u8fde\u63a5\u72b6\u6001\u4e3aflag=S \u4e3b\u8282\u70b9\u6bcf\u969410\u79d2\u53d1\u9001ping\uff0c\u7528\u4e8e\u5224\u65ad\u4ece\u8282\u70b9\u662f\u5426\u5b58\u6d3b \u4ece\u8282\u70b9\u6bcf\u79d2\u53d1\u9001replconf ack {offset} \u547d\u4ee4\u4e0a\u62a5\u5f53\u524d\u590d\u5236\u504f\u79fb\u91cf \u54e8\u5175(Sentinel) \u00b6 \u57fa\u672c\u6982\u5ff5 \u00b6 \u7528\u4e8e\u76d1\u63a7\u8282\u70b9\uff0c\u6545\u969c\u8f6c\u79fb \u4e24\u79cd\u542f\u52a8\u65b9\u6cd5\uff1a redis-sentinel XX.conf redis-server XX.conf --sentinel \u5b9e\u73b0\u539f\u7406 \u00b6 \u4e09\u4e2a\u5b9a\u65f6\u4efb\u52a1 \u00b6 \u6bcf\u969410\u79d2\uff0c\u6bcf\u4e2a\u54e8\u5175\u8282\u70b9\u90fd\u5411\u4e3b\u8282\u70b9\u6267\u884cinfo\u547d\u4ee4\uff0c\u83b7\u53d6\u6700\u65b0\u7684\u62d3\u6251\u7ed3\u6784 \u6bcf\u96942\u79d2\uff0c\u6bcf\u9694\u54e8\u5175\u8282\u70b9\u4f1a\u5411\u6570\u636e\u8282\u70b9\u7684__sentinel__:hello\u9891\u9053\u53d1\u9001\u8be5\u54e8\u5175\u8282\u70b9\u5bf9\u4e3b\u8282\u70b9\u7684\u5224\u65ad\uff0c\u8be5\u9891\u9053\u4e5f\u7528\u4e8e\u54e8\u5175\u8282\u70b9\u4ea4\u6362\u4e3b\u8282\u70b9\u7684\u72b6\u6001\uff0c\u4f5c\u4e3a\u5ba2\u89c2\u4e0b\u7ebf\u548c\u9886\u5bfc\u8005\u9009\u4e3e\u7684\u4f9d\u636e \u6bcf\u96941\u79d2\uff0c\u6bcf\u4e2a\u54e8\u5175\u8282\u70b9\u4f1a\u5411\u4e3b\u8282\u70b9\uff0c\u4ece\u8282\u70b9\uff0c\u54e8\u5175\u8282\u70b9\u53d1\u9001\u4e00\u6761ping\u547d\u4ee4\u505a\u4e00\u6b21\u5fc3\u8df3\u68c0\u6d4b\uff0c\u6765\u786e\u8ba4\u8fd9\u4e9b\u8282\u70b9\u662f\u5426\u53ef\u8fbe\u3002 \u4e3b\u89c2\u4e0b\u7ebf\u4e0e\u5ba2\u89c2\u4e0b\u7ebf \u00b6 \u54e8\u5175\u4e3b\u8282\u70b9\u9009\u4e3e \u00b6 Raft\u7b97\u6cd5\u7b80\u8ff0\uff1a \u6bcf\u4e2a\u54e8\u5175\u8282\u70b9\u90fd\u60f3\u6210\u4e3a\u9886\u5bfc\u8005\uff0c\u4f1a\u5411\u5176\u5b83\u54e8\u5175\u8282\u70b9\u53d1\u9001sentinel is-master-down-by-addr \u547d\u4ee4\uff0c\u8981\u6c42\u5c06\u81ea\u5df1\u8bbe\u7f6e\u4e3a\u9886\u5bfc\u8005 \u6bcf\u4e2a\u6536\u5230sentinel is-master-down-by-addr\u547d\u4ee4\u7684\u54e8\u5175\u8282\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u6536\u5230\u8fc7\u5176\u5b83\u8282\u70b9\u7684sentinel is-master-down-by-addr\u547d\u4ee4\uff0c\u5c06\u540c\u610f\u5176\u6210\u4e3a\u9886\u5bfc\u8005\uff0c\u5426\u5219\u62d2\u7edd \u5982\u679c\u8be5\u54e8\u5175\u8282\u70b9\u53d1\u73b0\u5b57\u8282\u7684\u7968\u6570\u5927\u4e8emax(quorum, num(sentinel)/2+1)\uff0c \u90a3\u4e48\u5b83\u5c06\u6210\u4e3a\u9886\u5bfc\u8005 \u5982\u679c\u6b64\u8fc7\u7a0b\u6ca1\u6709\u9009\u4e3e\u51fa\u9886\u5bfc\u8005\uff0c\u5c06\u8fdb\u5165\u4e0b\u4e00\u6b21\u9009\u4e3e\u3002 \u96c6\u7fa4 \u00b6 \u6570\u636e\u5206\u5e03 \u00b6 \u6570\u636e\u5206\u533a\u7406\u8bba \u00b6 \u8282\u70b9\u53d6\u4f59 \u4e00\u81f4\u6027\u54c8\u5e0c\u5206\u533a(\u5e38\u7528\u4e8e\u7f13\u5b58\u573a\u666f) \u865a\u62df\u69fd\u5206\u533a redis\u6570\u636e\u5206\u533a \u00b6 slot = CRC16(key) & 16383 \u529f\u80fd\u9650\u5236 \u00b6 \u6279\u91cf\u64cd\u4f5c\u5982mset\uff0cmget\u53ea\u652f\u6301\u5177\u6709\u76f8\u540cslot\u503c\u7684key\u6267\u884c\u64cd\u4f5c \u53ea\u652f\u6301\u591akey\u5728\u540c\u4e00\u8282\u70b9\u4e0a\u7684\u4e8b\u52a1\u64cd\u4f5c key\u4f5c\u4e3a\u6570\u636e\u5206\u533a\u7684\u6700\u5c0f\u7c92\u5ea6\uff0c\u56e0\u6b64\u4e0d\u80fd\u5c06\u4e00\u4e2a\u5927\u7684\u952e\u503c\u5bf9\u8c61\u5982hash\uff0clist\u6620\u5c04\u5230\u4e0d\u540c\u7684\u8282\u70b9 \u4e0d\u652f\u6301\u591a\u6570\u636e\u5e93\u7a7a\u95f4\u3002\u5355\u673a\u6700\u591a\u53ef\u4f7f\u752816\u4e2a\u6570\u636e\u5e93\uff0c\u96c6\u7fa4\u6a21\u5f0f\u53ea\u80fd\u4f7f\u7528\u4e00\u4e2a\u6570\u636e\u5e93\u7a7a\u95f4\uff0c\u5373db 0 \u590d\u5236\u7ed3\u6784\u53ea\u652f\u6301\u4e00\u5c42\uff0c\u4e0d\u652f\u6301\u5d4c\u5957\u6811\u72b6\u590d\u5236\u7ed3\u6784 \u642d\u5efa\u96c6\u7fa4 \u00b6 \u51c6\u5907\u8282\u70b9 \u00b6 \u914d\u7f6e\uff1a port 6379 # \u5f00\u542f\u96c6\u7fa4\u6a21\u5f0f cluster-enabled yes # \u8282\u70b9\u8d85\u65f6\u65f6\u95f4\uff0c\u5355\u4f4d\u6beb\u79d2 cluster-node-timeout 15000 # \u96c6\u7fa4\u5185\u90e8\u914d\u7f6e\u6587\u4ef6 cluster-config-file \"nodes-6379.conf\" \u542f\u52a8\u8282\u70b9\uff1a redis-server conf/redis-6379.conf \u8282\u70b9\u63e1\u624b \u00b6 cluster meet 127.0.0.1 6381 cluster nodes cluster info \u5206\u914d\u69fd \u00b6 redis-cli -h 127.0.0.1 -p 6379 cluster addslots {0...5461} cluster replicate {node run id} \u8282\u70b9\u901a\u4fe1 \u00b6 Gossip\u6d88\u606f \u00b6 ping pong meet fail \u6d88\u606f\u5934\uff1aclusterMsg ; \u6d88\u606f\u4f53\uff1aclusterMsgData \u8282\u70b9\u9009\u62e9 \u00b6 \u6bcf\u79d2\u968f\u673a\u9009\u53d65\u4e2a\u8282\u70b9\uff0c\u5411\u5176\u4e2d\u6700\u4e45\u6ca1\u6709\u901a\u4fe1\u7684\u8282\u70b9\u53d1\u9001ping\u6d88\u606f\u3002\u6bcf100\u6beb\u79d2\u626b\u63cf\u672c\u5730\u8282\u70b9\u5217\u8868\uff0c\u5411\u6700\u8fd1\u4e00\u6b21\u63a5\u6536pong\u6d88\u606f\u7684\u65f6\u95f4\u5927\u4e8ecluster_node_timeout/2\u7684\u8282\u70b9\u53d1\u9001ping\u6d88\u606f\u3002 \u6ce8\u610f: cluster_node_timeout\u53c2\u6570\u5bf9\u6d88\u606f\u53d1\u9001\u7684\u8282\u70b9\u6570\u5f71\u54cd\u975e\u5e38\u5927\u3002\u8be5\u53c2\u6570\u4f1a\u5f71\u54cd\u6d88\u606f\u4ea4\u6362\u7684\u9891\u7387\u4ece\u800c\u5f71\u54cd\u6545\u969c\u8f6c\u79fb\uff0c\u69fd\u4fe1\u606f\u66f4\u65b0\uff0c\u65b0\u8282\u70b9\u53d1\u73b0\u901f\u5ea6\u3002\u56e0\u6b64\u9700\u8981\u6839\u636e\u4e1a\u52a1\u5bb9\u5fcd\u7a0b\u5ea6\u548c\u8d44\u6e90\u6d88\u8017\u8fdb\u884c\u5e73\u8861\u3002 \u6d88\u606f\u6570\u636e\u91cf \u00b6 \u6d88\u606f\u5934\u4e3b\u8981\u5360\u7528\u7a7a\u95f4\u7684\u5b57\u6bb5\u662fmyslots[cluster_slots/8]\uff0c\u5360\u75282KB; \u6d88\u606f\u4f53\u4f1a\u643a\u5e26\u4e00\u5b9a\u6570\u91cf\u7684\u5176\u5b83\u8282\u70b9\u4fe1\u606f\u7528\u4e8e\u6d88\u606f\u4ea4\u6362\uff0c \u6d88\u606f\u4f53\u4e2d\u5176\u5b83\u8282\u70b9\u7684\u6570\u91cf=max(3, floor(cluster_node_size/10))\u3002 \u6545\u969c\u8f6c\u79fb \u00b6 \u4e3b\u89c2\u4e0b\u7ebf \u00b6 \u6bcf\u4e2a\u8282\u70b9\u5b9a\u671f\u5411\u5176\u5b83\u8282\u70b9\u53d1\u9001ping\u6d88\u606f\uff0c\u82e5\u5728cluster_node_timeout\u4e4b\u5185\u6ca1\u6536\u5230pong\u6d88\u606f\uff0c\u5219\u628a\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u4e3b\u89c2\u4e0b\u7ebf\u72b6\u6001\u3002 \u6bcf\u4e2a\u8282\u70b9\u5185\u7684clusterState\u7ed3\u6784\u90fd\u9700\u8981\u4fdd\u5b58\u5176\u5b83\u8282\u70b9\u7684\u4fe1\u606f\u3002 \u5ba2\u89c2\u4e0b\u7ebf \u00b6 \u5f53\u67d0\u4e2a\u8282\u70b9\u5224\u65ad\u53e6\u4e00\u4e2a\u8282\u70b9\u4e3b\u89c2\u4e0b\u7ebf\u540e\uff0c\u76f8\u5e94\u7684\u8282\u70b9\u72b6\u6001\u4fe1\u606f\u4f1a\u5728\u5bf9\u96c6\u7fa4\u5185\u4f20\u64ad\u3002ping/pong\u6d88\u606f\u4f53\u4f1a\u643a\u5e26\u96c6\u7fa41/10\u7684\u5176\u5b83\u8282\u70b9\u72b6\u6001\u4fe1\u606f\uff0c\u5f53\u63a5\u53d7\u8282\u70b9\u53d1\u73b0\u6d88\u606f\u4f53\u4e2d\u542b\u6709\u4e3b\u89c2\u4e0b\u7ebf\u7684\u8282\u70b9\u65f6\uff0c\u4f1a\u5728\u672c\u5730\u627e\u5230\u6545\u969c\u8282\u70b9\u7684ClusterNode\u7ed3\u6784\uff0c\u4fdd\u5b58\u5230\u8be5\u7ed3\u6784\u4e2d\u4e0b\u7ebf\u62a5\u544a\u94fe\u8868\u4e2d\u3002 \u5f53\u534a\u6570\u4ee5\u4e0a\u6301\u6709\u69fd\u70b9\u4e3b\u8282\u70b9\u90fd\u6807\u8bb0\u67d0\u4e2a\u8282\u70b9\u662f\u4e3b\u89c2\u4e0b\u7ebf\u65f6\uff0c\u89e6\u53d1\u5ba2\u89c2\u4e0b\u7ebf\u6d41\u7a0b\u3002\u8981\u6c42\u534a\u6570\u4ee5\u4e0a\u662f\u4e3a\u4e86\u5e94\u5bf9\u7f51\u7edc\u5206\u533a\u7b49\u539f\u56e0\u9020\u6210\u7684\u96c6\u7fa4\u5206\u9694\u60c5\u51b5\uff0c\u88ab\u5206\u5272\u7684\u5c0f\u96c6\u7fa4\u56e0\u4e3a\u65e0\u6cd5\u5b8c\u6210\u4ece\u4e3b\u89c2\u4e0b\u7ebf\u5230\u5ba2\u89c2\u4e0b\u7ebf\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u4ece\u800c\u9632\u6b62\u5c0f\u96c6\u7fa4\u5b8c\u6210\u6545\u969c\u8f6c\u79fb\u540e\u7ee7\u7eed\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\u3002 \u8d44\u683c\u5ba1\u67e5 \u00b6 \u5982\u679c\u4e0b\u7ebf\u8282\u70b9\u662f\u6301\u6709\u69fd\u7684\u4e3b\u8282\u70b9\u5219\u9700\u8981\u5728\u5b83\u7684\u4ece\u8282\u70b9\u4e2d\u6311\u9009\u51fa\u4e00\u4e2a\u66ff\u6362\u5b83\u3002 \u68c0\u67e5\u6700\u540e\u4e0e\u4e3b\u8282\u70b9\u65ad\u7ebf\u65f6\u95f4\uff0c\u5224\u65ad\u662f\u5426\u6709\u8d44\u683c\u6210\u4e3a\u66ff\u6362\u6545\u969c\u7684\u4e3b\u8282\u70b9\u3002 \u5982\u679c\u4ece\u8282\u70b9\u4e0e\u4e3b\u8282\u70b9\u65ad\u7ebf\u65f6\u95f4\u8d85\u8fc7cluster-node-time * cluser-slave-validity-factor\uff0c\u5219\u5f53\u524d\u4ece\u8282\u70b9\u4e0d\u5177\u5907\u6545\u969c\u8f6c\u79fb\u8d44\u683c\u3002 \u51c6\u5907\u9009\u4e3e\u65f6\u95f4 \u00b6 \u5f53\u524d\u4ece\u8282\u70b9\u5177\u5907\u8d44\u683c\u540e\uff0c\u66f4\u65b0\u89e6\u53d1\u6545\u969c\u9009\u4e3e\u7684\u65f6\u95f4\uff0c\u53ea\u6709\u5230\u8fbe\u6539\u65f6\u95f4\u540e\u624d\u80fd\u6267\u884c\u540e\u7eed\u6d41\u7a0b\u3002(\u5ef6\u8fdf\u89e6\u53d1\u673a\u5236\uff0c\u53ef\u4ee5\u901a\u8fc7\u5bf9\u591a\u4e2a\u4ece\u8282\u70b9\u4f7f\u7528\u4e0d\u540c\u7684\u5ef6\u8fdf\u9009\u4e3e\u65f6\u95f4\u6765\u652f\u6301\u4f18\u5148\u7ea7\u95ee\u9898\u3002\u590d\u5236\u504f\u79fb\u91cf\u8d8a\u5927\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u5ef6\u8fdf\u65f6\u95f4\u8d8a\u5c0f\u3002) \u53d1\u8d77\u9009\u4e3e \u00b6 \u901a\u8fc7\u914d\u7f6e\u7eaa\u5143\uff08configEpoch\uff09\u6765\u4fdd\u8bc1\u6bcf\u4e2a\u4ece\u8282\u70b9\u5728\u4e00\u4e2a\u914d\u7f6e\u7eaa\u5143\u5185\u53ea\u80fd\u53d1\u8d77\u4e00\u6b21\u9009\u4e3e\u6d88\u606f\u3002\u8be5\u9009\u4e3e\u6d88\u606f\u6d88\u606f\u5185\u5bb9\u5982\u540cping\u6d88\u606f\uff0c\u53ea\u662ftype\u7c7b\u578b\u4e3aFAILOVER_AUTH_REQUEST\u3002\u540c\u65f6\u6807\u8bb0\u8be5\u8282\u70b9\u5728\u8be5\u914d\u7f6e\u7eaa\u5143\u5185\u5df2\u53d1\u9001\u8fc7\u6d88\u606f\u72b6\u6001\u3002 \u9009\u4e3e\u6295\u7968 \u00b6 \u6301\u6709\u69fd\u70b9\u4e3b\u8282\u70b9\u5728\u4e00\u4e2a\u914d\u7f6e\u7eaa\u5143\u5185\u53ea\u6709\u552f\u4e00\u7684\u4e00\u5f20\u9009\u7968, \u5f53\u63a5\u5230\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u6295\u7968\u7684\u4ece\u8282\u70b9\u6d88\u606f\u65f6\u56de\u590dFAILOVER_AUTH_REQUEST\u6d88\u606f\u4f5c\u4e3a\u6295\u7968\uff0c\u4e4b\u540e\u76f8\u540c\u7eaa\u5143\u5185\u5176\u5b83\u4ece\u8282\u70b9\u7684\u9009\u4e3e\u6d88\u606f\u5c06\u5ffd\u7565\u3002 \u66ff\u6362\u4e3b\u8282\u70b9 \u00b6 \u5f53\u524d\u4ece\u8282\u70b9\u53d6\u6d88\u590d\u5236\u53d8\u4e3a \u64a4\u9500\u6545\u969c\u8282\u70b9\u590d\u5236\u7684\u69fd\uff0c\u5e76\u5c06\u8fd9\u4e9b\u69fd\u59d4\u6d3e\u7ed9\u81ea\u5df1 \u5411\u96c6\u7fa4\u5185\u5e7f\u64adpong\u6d88\u606f, \u901a\u77e5\u5176\u5b83\u8282\u70b9\u81ea\u5df1\u5df2\u6210\u4e3a\u4e3b\u8282\u70b9 \u8d44\u6599 \u00b6 Raft\u7b97\u6cd5 \u4f5c\u8005 \u4ed8\u78ca\u535a\u5ba2 \u4f5c\u8005 \u5f20\u76ca\u519b\u535a\u5ba2","title":"Redis"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#redis-cheatsheet","text":"","title":"Redis CheatSheet"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_1","text":"\u6e05\u5355\u6765\u81ea \u300aRedis\u5f00\u53d1\u4e0e\u8fd0\u7ef4\u300b","title":"\u7b80\u4ecb"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_2","text":"\u5feb\uff1b KV\u5b58\u50a8\uff1b \u529f\u80fd\u4e30\u5bcc\uff1a\u952e\u8fc7\u671f\uff0c\u53d1\u5e03\u8ba2\u9605\uff0cLua\uff0c\u4e8b\u52a1\uff0cPipeLine \u5355\u7ebf\u7a0b \u6301\u4e45\u5316 \u4e3b\u4ece\u590d\u5236 \u9ad8\u53ef\u7528 (Sentinel) \u5206\u5e03\u5f0f\uff08Cluster, version > 3.0\uff09","title":"\u7279\u70b9"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_3","text":"\u53ef\u4ee5\u505a\uff1a * \u7f13\u5b58 * \u8ba1\u6570 * \u5171\u4eabsession * \u9650\u901f * \u6807\u7b7e\uff08\u96c6\u5408\uff09 * \u6392\u884c\u699c\uff08\u6709\u5e8f\u96c6\u5408\uff09 \u7531\u4e8e\u653e\u5728\u5185\u5b58\u4e2d\uff0c\u6570\u636e\u91cf\u4e0d\u80fd\u592a\u5927","title":"\u4f7f\u7528\u573a\u666f"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#api","text":"// \u5168\u5c40\u547d\u4ee4 keys * dbsize exists key del key expire key seconds type key object encoding key select dbInx // \u5b57\u7b26\u4e32 strlen key // \u54c8\u5e0c hset key field value hget key field // \u5217\u8868 rpush key value linsert key before|after pivot value lrange key start_inx end_inx blpop // \u96c6\u5408 sadd key e1 e2 ... srem key e1 //\u5220\u9664\u64cd\u4f5c sinter key1 key2 ... // \u591a\u4e2a\u96c6\u5408\u76f8\u4ea4 // \u6709\u5e8f\u96c6\u5408 zadd key score member [score member...] // pipeline mset // \u4e8b\u52a1 multi ... exec // \u811a\u672c\u7ba1\u7406 script load script flush script kill // Bitmaps setbit key offset value getbit key offset // HyperLoglog pfadd key e1 [e2 ...] pfcount key1 [key2 ...] // \u53d1\u5e03\u8ba2\u9605 publish channel message subscribe channel [channel2 ...] // CEO geoadd key longitude latitude member geopos key member // \u83b7\u53d6member\u7684\u7ecf\u7eac\u5ea6 // \u7edf\u8ba1\u4e0e\u6392\u67e5\u95ee\u9898 slowlog get {n} // \u83b7\u53d6\u6700\u8fd1n\u6761\u6162\u67e5\u8be2 redis-cli -h {ip} -p {port} bigkeys // \u83b7\u53d6\u5927\u5bf9\u8c61 redis-cli -h {ip} -p {port} --stat // \u7edf\u8ba1redis\u4f7f\u7528\u60c5\u51b5","title":"API"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_4","text":"\u5b57\u7b26\u4e32: int 8\u5b57\u8282 embstr < 39\u5b57\u8282 raw \u54c8\u5e0c\uff1a ziplist \u5143\u7d20\u4e2a\u6570 < 512, \u6240\u6709\u503c < 64\u5b57\u8282\uff0c\u5143\u7d20\u8fde\u7eed\u5b58\u50a8\uff0c\u7701\u7a7a\u95f4 hashtable \u5217\u8868\uff1a ziplist entry\u4e2a\u6570<512\u4e2a, \u6240\u6709value < 64\u5b57\u8282 linkedlist \u96c6\u5408\uff1a intset \u6574\u6570\u96c6\u5408\uff0c\u5143\u7d20\u4e2a\u6570<512 hashtable \u6709\u5e8f\u96c6\u5408 ziplist \u5143\u7d20\u4e2a\u6570<128\u4e2a, \u6240\u6709value<64\u5b57\u8282 skiplist","title":"\u6570\u636e\u7ed3\u6784\u4e0e\u7f16\u7801"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_5","text":"","title":"\u5b9e\u7528\u529f\u80fd"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_6","text":"slowlog-log-slower-than \u5355\u4f4d\u662f\u5fae\u79d2\uff0c 10 \u6beb\u79d2 slowlog-max-len \u6162\u67e5\u8be2\u6761\u6570\u4e0a\u9650\uff0c 1000\u4ee5\u4e0a","title":"\u6162\u67e5\u8be2\u5206\u6790"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#bitmaps","text":"\u4e00\u4ebf\u7528\u6237\uff0c\u5f53\u65e5\u662f\u5426\u8bbf\u95ee\u8fc7\u7f51\u7ad9","title":"Bitmaps"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#hyperloglog","text":"\u6709\u53ef\u80fd\u6709\u8bef\u5dee","title":"HyperLoglog"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_7","text":"","title":"\u53d1\u5e03\u8ba2\u9605"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#ceo","text":"\u5730\u7406\u4f4d\u7f6e\u4fe1\u606f\u8303\u56f4\u8ba1\u7b97","title":"CEO"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_8","text":"","title":"\u6301\u4e45\u5316"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#rdb","text":"","title":"RDB"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_9","text":"save bgsave \u8fd0\u4f5c\u6d41\u7a0b\u7565\u3002 \u4f18\u70b9\uff1a \u4f7f\u7528LZF\u7b97\u6cd5\u538b\u7f29\uff0c\u7d27\u51d1\uff0c\u9002\u5408\u505a\u5907\u4efd\uff0c\u6bcfXX\u5c0f\u65f6\u5907\u4efd\u4e00\u6b21\uff0c\u7528\u4e8e\u707e\u96be\u6062\u590d \u52a0\u8f7d\u901f\u5ea6\u5feb\u4e8eAOF \u7f3a\u70b9\uff1a \u65e0\u6cd5\u5b9e\u65f6\u6301\u4e45\u5316/\u79d2\u7ea7\u6301\u4e45\u5316\uff0c\u56e0\u4e3afork\u5c5e\u4e8e\u91cd\u91cf\u7ea7\u64cd\u4f5c \u517c\u5bb9\u6027\u95ee\u9898","title":"\u89e6\u53d1\u673a\u5236"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#aof","text":"\u8fd0\u4f5c\u6d41\u7a0b\uff1a","title":"AOF"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#append","text":"\u5199\u5165aof_buf\uff0c\u51cf\u5c0f\u78c1\u76d8\u8d1f\u8f7d \u4f7f\u6587\u672c\u534f\u8bae\uff0c\u56e0\u4e3a\u517c\u5bb9\u6027\u597d\uff0caof\u4e00\u822c\u662f\u8ffd\u52a0\u64cd\u4f5c\uff0c\u53ef\u8bfb\u6027\u597d\uff0c\u65b9\u4fbf\u76f4\u63a5\u4fee\u6539\u548c\u7ba1\u7406","title":"\u547d\u4ee4\u5199\u5165(append)"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#sync","text":"\u540c\u6b65\u7b56\u7565\uff1a always \u6bcf\u6761\u547d\u4ee4\u5199\u5165\u7f13\u51b2\u533a\uff0c\u7acb\u5373fsync\u3002 everysec \u547d\u4ee4\u5199\u5165\u7f13\u51b2\u533a\u540ewrite\u3002\u5355\u72ec\u7ebf\u7a0b\u6bcf\u79d2fsync no \u5199\u5165aof_buf\u540e\u8c03\u7528write, \u4e0d\u5bf9aof_buf\u8fdb\u884cfsync \u5e38\u7528everysec, \u7528\u4e8e\u5e73\u8861\u6027\u80fd\u548c\u6570\u636e\u5b89\u5168\u6027\uff0c\u5728\u78c1\u76d8\u7e41\u5fd9\u7684\u65f6\u5019\uff0c\u5b9a\u65f6fsync\u7684\u7ebf\u7a0b\u4f1a\u9020\u6210\u4e3b\u7ebf\u7a0b\u963b\u585e\uff0c\u963b\u585e\u6d41\u7a0b\u5982\u4e0b\uff1a \u4e3b\u7ebf\u7a0b\u5199\u5165AOF\u7f13\u51b2\u533a AOF\u7ebf\u7a0b\u6bcf\u79d2\u6267\u884c\u4e00\u6b21fsync \u4e3b\u7ebf\u7a0b\u5bf9\u6bd4\u4e0a\u6b21AOF fsync\u6210\u529f\u7684\u65f6\u95f4\uff0c\u5982\u679c\u8ddd\u4e0a\u6b21\u6210\u529f\u65f6\u95f4\u57282\u79d2\u5185\u5c31\u4e0d\u963b\u585e\uff0c\u5426\u5219\u5c06\u963b\u585e\u76f4\u5230\u540c\u6b65\u64cd\u4f5c\u5b8c\u6210\u3002\uff08\u56e0\u6b64everysec\u6700\u591a\u53ef\u80fd\u4e22\u59312\u79d2\u6570\u636e\uff09","title":"\u6587\u4ef6\u540c\u6b65(sync)"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#rewrite","text":"\u624b\u52a8\u89e6\u53d1\uff1abgrewriteaof \u81ea\u52a8\u89e6\u53d1\uff1aauto-aof-rewrite-min-size, auto-aof-rewrite-percentage\uff08\u5f53\u524d\u6587\u4ef6\u4f53\u79ef/\u4e0a\u4e00\u6b21\u91cd\u5199\u540e\u4f53\u79ef\uff09","title":"\u6587\u4ef6\u91cd\u5199(rewrite)"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#load","text":"\u5f00\u542faof\u7684\u60c5\u51b5\u4e0b\uff0c\u4f18\u5148\u52a0\u8f7daof","title":"\u91cd\u542f\u52a0\u8f7d(load)"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_10","text":"","title":"\u590d\u5236"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_11","text":"\u5efa\u7acb\u590d\u5236 slaveof {masterHost} \u65ad\u5f00\u590d\u5236 slaveof no one","title":"\u914d\u7f6e"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_12","text":"\u4e00\u4e3b\u4e00\u4ece\uff08\u7b80\u5355\uff0c\u4e0d\u5b89\u5168\uff09 \u4e00\u4e3b\u591a\u4ece\uff08\u53ef\u5229\u7528\u591a\u4e2a\u8282\u70b9\u5b9e\u73b0\u8bfb\u5199\u5206\u79bb\uff0c\u52a0\u91cd\u4e3b\u8282\u70b9\u8d1f\u8f7d\uff0c\u5f71\u54cd\u7a33\u5b9a\u6027\uff09 \u6811\u72b6\u4e3b\u4ece\uff08\u6709\u6548\u964d\u4f4e\u4e3b\u8282\u70b9\u8d1f\u8f7d\u548c\u9700\u8981\u4f20\u9001\u7ed9\u4ece\u8282\u70b9\u7684\u6570\u636e\u91cf\uff09","title":"\u62d3\u6251\u7ed3\u6784"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_13","text":"psync \u547d\u4ee4\u7528\u4e8e\u540c\u6b65\uff0c\u5206\u4e3a\u5168\u91cf\u590d\u5236\u548c\u90e8\u5206\u590d\u5236\uff0c\u53ef\u4ee5\u7528info replication\u6765\u67e5\u770b\u590d\u5236\u504f\u79fb\u91cf\u4ee5\u53ca\u590d\u5236\u79ef\u538b\u7f13\u51b2\u533a","title":"\u6570\u636e\u540c\u6b65"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_14","text":"\u4e3b\u4ece\u8282\u70b9\u5efa\u7acb\u590d\u5236\u540e\uff0c\u7ef4\u62a4\u957f\u8fde\u63a5\u5e76\u5f7c\u6b64\u53d1\u9001\u5fc3\u8df3\u547d\u4ee4\uff1a \u4e3b\u8282\u70b9\u8fde\u63a5\u72b6\u6001\u4e3aflag=M, \u4ece\u8282\u70b9\u8fde\u63a5\u72b6\u6001\u4e3aflag=S \u4e3b\u8282\u70b9\u6bcf\u969410\u79d2\u53d1\u9001ping\uff0c\u7528\u4e8e\u5224\u65ad\u4ece\u8282\u70b9\u662f\u5426\u5b58\u6d3b \u4ece\u8282\u70b9\u6bcf\u79d2\u53d1\u9001replconf ack {offset} \u547d\u4ee4\u4e0a\u62a5\u5f53\u524d\u590d\u5236\u504f\u79fb\u91cf","title":"\u5fc3\u8df3\u673a\u5236"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#sentinel","text":"","title":"\u54e8\u5175(Sentinel)"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_15","text":"\u7528\u4e8e\u76d1\u63a7\u8282\u70b9\uff0c\u6545\u969c\u8f6c\u79fb \u4e24\u79cd\u542f\u52a8\u65b9\u6cd5\uff1a redis-sentinel XX.conf redis-server XX.conf --sentinel","title":"\u57fa\u672c\u6982\u5ff5"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_16","text":"","title":"\u5b9e\u73b0\u539f\u7406"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_17","text":"\u6bcf\u969410\u79d2\uff0c\u6bcf\u4e2a\u54e8\u5175\u8282\u70b9\u90fd\u5411\u4e3b\u8282\u70b9\u6267\u884cinfo\u547d\u4ee4\uff0c\u83b7\u53d6\u6700\u65b0\u7684\u62d3\u6251\u7ed3\u6784 \u6bcf\u96942\u79d2\uff0c\u6bcf\u9694\u54e8\u5175\u8282\u70b9\u4f1a\u5411\u6570\u636e\u8282\u70b9\u7684__sentinel__:hello\u9891\u9053\u53d1\u9001\u8be5\u54e8\u5175\u8282\u70b9\u5bf9\u4e3b\u8282\u70b9\u7684\u5224\u65ad\uff0c\u8be5\u9891\u9053\u4e5f\u7528\u4e8e\u54e8\u5175\u8282\u70b9\u4ea4\u6362\u4e3b\u8282\u70b9\u7684\u72b6\u6001\uff0c\u4f5c\u4e3a\u5ba2\u89c2\u4e0b\u7ebf\u548c\u9886\u5bfc\u8005\u9009\u4e3e\u7684\u4f9d\u636e \u6bcf\u96941\u79d2\uff0c\u6bcf\u4e2a\u54e8\u5175\u8282\u70b9\u4f1a\u5411\u4e3b\u8282\u70b9\uff0c\u4ece\u8282\u70b9\uff0c\u54e8\u5175\u8282\u70b9\u53d1\u9001\u4e00\u6761ping\u547d\u4ee4\u505a\u4e00\u6b21\u5fc3\u8df3\u68c0\u6d4b\uff0c\u6765\u786e\u8ba4\u8fd9\u4e9b\u8282\u70b9\u662f\u5426\u53ef\u8fbe\u3002","title":"\u4e09\u4e2a\u5b9a\u65f6\u4efb\u52a1"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_18","text":"","title":"\u4e3b\u89c2\u4e0b\u7ebf\u4e0e\u5ba2\u89c2\u4e0b\u7ebf"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_19","text":"Raft\u7b97\u6cd5\u7b80\u8ff0\uff1a \u6bcf\u4e2a\u54e8\u5175\u8282\u70b9\u90fd\u60f3\u6210\u4e3a\u9886\u5bfc\u8005\uff0c\u4f1a\u5411\u5176\u5b83\u54e8\u5175\u8282\u70b9\u53d1\u9001sentinel is-master-down-by-addr \u547d\u4ee4\uff0c\u8981\u6c42\u5c06\u81ea\u5df1\u8bbe\u7f6e\u4e3a\u9886\u5bfc\u8005 \u6bcf\u4e2a\u6536\u5230sentinel is-master-down-by-addr\u547d\u4ee4\u7684\u54e8\u5175\u8282\u70b9\uff0c\u5982\u679c\u6ca1\u6709\u6536\u5230\u8fc7\u5176\u5b83\u8282\u70b9\u7684sentinel is-master-down-by-addr\u547d\u4ee4\uff0c\u5c06\u540c\u610f\u5176\u6210\u4e3a\u9886\u5bfc\u8005\uff0c\u5426\u5219\u62d2\u7edd \u5982\u679c\u8be5\u54e8\u5175\u8282\u70b9\u53d1\u73b0\u5b57\u8282\u7684\u7968\u6570\u5927\u4e8emax(quorum, num(sentinel)/2+1)\uff0c \u90a3\u4e48\u5b83\u5c06\u6210\u4e3a\u9886\u5bfc\u8005 \u5982\u679c\u6b64\u8fc7\u7a0b\u6ca1\u6709\u9009\u4e3e\u51fa\u9886\u5bfc\u8005\uff0c\u5c06\u8fdb\u5165\u4e0b\u4e00\u6b21\u9009\u4e3e\u3002","title":"\u54e8\u5175\u4e3b\u8282\u70b9\u9009\u4e3e"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_20","text":"","title":"\u96c6\u7fa4"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_21","text":"","title":"\u6570\u636e\u5206\u5e03"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_22","text":"\u8282\u70b9\u53d6\u4f59 \u4e00\u81f4\u6027\u54c8\u5e0c\u5206\u533a(\u5e38\u7528\u4e8e\u7f13\u5b58\u573a\u666f) \u865a\u62df\u69fd\u5206\u533a","title":"\u6570\u636e\u5206\u533a\u7406\u8bba"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#redis","text":"slot = CRC16(key) & 16383","title":"redis\u6570\u636e\u5206\u533a"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_23","text":"\u6279\u91cf\u64cd\u4f5c\u5982mset\uff0cmget\u53ea\u652f\u6301\u5177\u6709\u76f8\u540cslot\u503c\u7684key\u6267\u884c\u64cd\u4f5c \u53ea\u652f\u6301\u591akey\u5728\u540c\u4e00\u8282\u70b9\u4e0a\u7684\u4e8b\u52a1\u64cd\u4f5c key\u4f5c\u4e3a\u6570\u636e\u5206\u533a\u7684\u6700\u5c0f\u7c92\u5ea6\uff0c\u56e0\u6b64\u4e0d\u80fd\u5c06\u4e00\u4e2a\u5927\u7684\u952e\u503c\u5bf9\u8c61\u5982hash\uff0clist\u6620\u5c04\u5230\u4e0d\u540c\u7684\u8282\u70b9 \u4e0d\u652f\u6301\u591a\u6570\u636e\u5e93\u7a7a\u95f4\u3002\u5355\u673a\u6700\u591a\u53ef\u4f7f\u752816\u4e2a\u6570\u636e\u5e93\uff0c\u96c6\u7fa4\u6a21\u5f0f\u53ea\u80fd\u4f7f\u7528\u4e00\u4e2a\u6570\u636e\u5e93\u7a7a\u95f4\uff0c\u5373db 0 \u590d\u5236\u7ed3\u6784\u53ea\u652f\u6301\u4e00\u5c42\uff0c\u4e0d\u652f\u6301\u5d4c\u5957\u6811\u72b6\u590d\u5236\u7ed3\u6784","title":"\u529f\u80fd\u9650\u5236"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_24","text":"","title":"\u642d\u5efa\u96c6\u7fa4"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_25","text":"\u914d\u7f6e\uff1a port 6379 # \u5f00\u542f\u96c6\u7fa4\u6a21\u5f0f cluster-enabled yes # \u8282\u70b9\u8d85\u65f6\u65f6\u95f4\uff0c\u5355\u4f4d\u6beb\u79d2 cluster-node-timeout 15000 # \u96c6\u7fa4\u5185\u90e8\u914d\u7f6e\u6587\u4ef6 cluster-config-file \"nodes-6379.conf\" \u542f\u52a8\u8282\u70b9\uff1a redis-server conf/redis-6379.conf","title":"\u51c6\u5907\u8282\u70b9"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_26","text":"cluster meet 127.0.0.1 6381 cluster nodes cluster info","title":"\u8282\u70b9\u63e1\u624b"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_27","text":"redis-cli -h 127.0.0.1 -p 6379 cluster addslots {0...5461} cluster replicate {node run id}","title":"\u5206\u914d\u69fd"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_28","text":"","title":"\u8282\u70b9\u901a\u4fe1"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#gossip","text":"ping pong meet fail \u6d88\u606f\u5934\uff1aclusterMsg ; \u6d88\u606f\u4f53\uff1aclusterMsgData","title":"Gossip\u6d88\u606f"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_29","text":"\u6bcf\u79d2\u968f\u673a\u9009\u53d65\u4e2a\u8282\u70b9\uff0c\u5411\u5176\u4e2d\u6700\u4e45\u6ca1\u6709\u901a\u4fe1\u7684\u8282\u70b9\u53d1\u9001ping\u6d88\u606f\u3002\u6bcf100\u6beb\u79d2\u626b\u63cf\u672c\u5730\u8282\u70b9\u5217\u8868\uff0c\u5411\u6700\u8fd1\u4e00\u6b21\u63a5\u6536pong\u6d88\u606f\u7684\u65f6\u95f4\u5927\u4e8ecluster_node_timeout/2\u7684\u8282\u70b9\u53d1\u9001ping\u6d88\u606f\u3002 \u6ce8\u610f: cluster_node_timeout\u53c2\u6570\u5bf9\u6d88\u606f\u53d1\u9001\u7684\u8282\u70b9\u6570\u5f71\u54cd\u975e\u5e38\u5927\u3002\u8be5\u53c2\u6570\u4f1a\u5f71\u54cd\u6d88\u606f\u4ea4\u6362\u7684\u9891\u7387\u4ece\u800c\u5f71\u54cd\u6545\u969c\u8f6c\u79fb\uff0c\u69fd\u4fe1\u606f\u66f4\u65b0\uff0c\u65b0\u8282\u70b9\u53d1\u73b0\u901f\u5ea6\u3002\u56e0\u6b64\u9700\u8981\u6839\u636e\u4e1a\u52a1\u5bb9\u5fcd\u7a0b\u5ea6\u548c\u8d44\u6e90\u6d88\u8017\u8fdb\u884c\u5e73\u8861\u3002","title":"\u8282\u70b9\u9009\u62e9"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_30","text":"\u6d88\u606f\u5934\u4e3b\u8981\u5360\u7528\u7a7a\u95f4\u7684\u5b57\u6bb5\u662fmyslots[cluster_slots/8]\uff0c\u5360\u75282KB; \u6d88\u606f\u4f53\u4f1a\u643a\u5e26\u4e00\u5b9a\u6570\u91cf\u7684\u5176\u5b83\u8282\u70b9\u4fe1\u606f\u7528\u4e8e\u6d88\u606f\u4ea4\u6362\uff0c \u6d88\u606f\u4f53\u4e2d\u5176\u5b83\u8282\u70b9\u7684\u6570\u91cf=max(3, floor(cluster_node_size/10))\u3002","title":"\u6d88\u606f\u6570\u636e\u91cf"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_31","text":"","title":"\u6545\u969c\u8f6c\u79fb"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_32","text":"\u6bcf\u4e2a\u8282\u70b9\u5b9a\u671f\u5411\u5176\u5b83\u8282\u70b9\u53d1\u9001ping\u6d88\u606f\uff0c\u82e5\u5728cluster_node_timeout\u4e4b\u5185\u6ca1\u6536\u5230pong\u6d88\u606f\uff0c\u5219\u628a\u8be5\u8282\u70b9\u6807\u8bb0\u4e3a\u4e3b\u89c2\u4e0b\u7ebf\u72b6\u6001\u3002 \u6bcf\u4e2a\u8282\u70b9\u5185\u7684clusterState\u7ed3\u6784\u90fd\u9700\u8981\u4fdd\u5b58\u5176\u5b83\u8282\u70b9\u7684\u4fe1\u606f\u3002","title":"\u4e3b\u89c2\u4e0b\u7ebf"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_33","text":"\u5f53\u67d0\u4e2a\u8282\u70b9\u5224\u65ad\u53e6\u4e00\u4e2a\u8282\u70b9\u4e3b\u89c2\u4e0b\u7ebf\u540e\uff0c\u76f8\u5e94\u7684\u8282\u70b9\u72b6\u6001\u4fe1\u606f\u4f1a\u5728\u5bf9\u96c6\u7fa4\u5185\u4f20\u64ad\u3002ping/pong\u6d88\u606f\u4f53\u4f1a\u643a\u5e26\u96c6\u7fa41/10\u7684\u5176\u5b83\u8282\u70b9\u72b6\u6001\u4fe1\u606f\uff0c\u5f53\u63a5\u53d7\u8282\u70b9\u53d1\u73b0\u6d88\u606f\u4f53\u4e2d\u542b\u6709\u4e3b\u89c2\u4e0b\u7ebf\u7684\u8282\u70b9\u65f6\uff0c\u4f1a\u5728\u672c\u5730\u627e\u5230\u6545\u969c\u8282\u70b9\u7684ClusterNode\u7ed3\u6784\uff0c\u4fdd\u5b58\u5230\u8be5\u7ed3\u6784\u4e2d\u4e0b\u7ebf\u62a5\u544a\u94fe\u8868\u4e2d\u3002 \u5f53\u534a\u6570\u4ee5\u4e0a\u6301\u6709\u69fd\u70b9\u4e3b\u8282\u70b9\u90fd\u6807\u8bb0\u67d0\u4e2a\u8282\u70b9\u662f\u4e3b\u89c2\u4e0b\u7ebf\u65f6\uff0c\u89e6\u53d1\u5ba2\u89c2\u4e0b\u7ebf\u6d41\u7a0b\u3002\u8981\u6c42\u534a\u6570\u4ee5\u4e0a\u662f\u4e3a\u4e86\u5e94\u5bf9\u7f51\u7edc\u5206\u533a\u7b49\u539f\u56e0\u9020\u6210\u7684\u96c6\u7fa4\u5206\u9694\u60c5\u51b5\uff0c\u88ab\u5206\u5272\u7684\u5c0f\u96c6\u7fa4\u56e0\u4e3a\u65e0\u6cd5\u5b8c\u6210\u4ece\u4e3b\u89c2\u4e0b\u7ebf\u5230\u5ba2\u89c2\u4e0b\u7ebf\u8fd9\u4e00\u8fc7\u7a0b\uff0c\u4ece\u800c\u9632\u6b62\u5c0f\u96c6\u7fa4\u5b8c\u6210\u6545\u969c\u8f6c\u79fb\u540e\u7ee7\u7eed\u5bf9\u5916\u63d0\u4f9b\u670d\u52a1\u3002","title":"\u5ba2\u89c2\u4e0b\u7ebf"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_34","text":"\u5982\u679c\u4e0b\u7ebf\u8282\u70b9\u662f\u6301\u6709\u69fd\u7684\u4e3b\u8282\u70b9\u5219\u9700\u8981\u5728\u5b83\u7684\u4ece\u8282\u70b9\u4e2d\u6311\u9009\u51fa\u4e00\u4e2a\u66ff\u6362\u5b83\u3002 \u68c0\u67e5\u6700\u540e\u4e0e\u4e3b\u8282\u70b9\u65ad\u7ebf\u65f6\u95f4\uff0c\u5224\u65ad\u662f\u5426\u6709\u8d44\u683c\u6210\u4e3a\u66ff\u6362\u6545\u969c\u7684\u4e3b\u8282\u70b9\u3002 \u5982\u679c\u4ece\u8282\u70b9\u4e0e\u4e3b\u8282\u70b9\u65ad\u7ebf\u65f6\u95f4\u8d85\u8fc7cluster-node-time * cluser-slave-validity-factor\uff0c\u5219\u5f53\u524d\u4ece\u8282\u70b9\u4e0d\u5177\u5907\u6545\u969c\u8f6c\u79fb\u8d44\u683c\u3002","title":"\u8d44\u683c\u5ba1\u67e5"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_35","text":"\u5f53\u524d\u4ece\u8282\u70b9\u5177\u5907\u8d44\u683c\u540e\uff0c\u66f4\u65b0\u89e6\u53d1\u6545\u969c\u9009\u4e3e\u7684\u65f6\u95f4\uff0c\u53ea\u6709\u5230\u8fbe\u6539\u65f6\u95f4\u540e\u624d\u80fd\u6267\u884c\u540e\u7eed\u6d41\u7a0b\u3002(\u5ef6\u8fdf\u89e6\u53d1\u673a\u5236\uff0c\u53ef\u4ee5\u901a\u8fc7\u5bf9\u591a\u4e2a\u4ece\u8282\u70b9\u4f7f\u7528\u4e0d\u540c\u7684\u5ef6\u8fdf\u9009\u4e3e\u65f6\u95f4\u6765\u652f\u6301\u4f18\u5148\u7ea7\u95ee\u9898\u3002\u590d\u5236\u504f\u79fb\u91cf\u8d8a\u5927\u4f18\u5148\u7ea7\u8d8a\u9ad8\uff0c\u5ef6\u8fdf\u65f6\u95f4\u8d8a\u5c0f\u3002)","title":"\u51c6\u5907\u9009\u4e3e\u65f6\u95f4"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_36","text":"\u901a\u8fc7\u914d\u7f6e\u7eaa\u5143\uff08configEpoch\uff09\u6765\u4fdd\u8bc1\u6bcf\u4e2a\u4ece\u8282\u70b9\u5728\u4e00\u4e2a\u914d\u7f6e\u7eaa\u5143\u5185\u53ea\u80fd\u53d1\u8d77\u4e00\u6b21\u9009\u4e3e\u6d88\u606f\u3002\u8be5\u9009\u4e3e\u6d88\u606f\u6d88\u606f\u5185\u5bb9\u5982\u540cping\u6d88\u606f\uff0c\u53ea\u662ftype\u7c7b\u578b\u4e3aFAILOVER_AUTH_REQUEST\u3002\u540c\u65f6\u6807\u8bb0\u8be5\u8282\u70b9\u5728\u8be5\u914d\u7f6e\u7eaa\u5143\u5185\u5df2\u53d1\u9001\u8fc7\u6d88\u606f\u72b6\u6001\u3002","title":"\u53d1\u8d77\u9009\u4e3e"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_37","text":"\u6301\u6709\u69fd\u70b9\u4e3b\u8282\u70b9\u5728\u4e00\u4e2a\u914d\u7f6e\u7eaa\u5143\u5185\u53ea\u6709\u552f\u4e00\u7684\u4e00\u5f20\u9009\u7968, \u5f53\u63a5\u5230\u7b2c\u4e00\u4e2a\u8bf7\u6c42\u6295\u7968\u7684\u4ece\u8282\u70b9\u6d88\u606f\u65f6\u56de\u590dFAILOVER_AUTH_REQUEST\u6d88\u606f\u4f5c\u4e3a\u6295\u7968\uff0c\u4e4b\u540e\u76f8\u540c\u7eaa\u5143\u5185\u5176\u5b83\u4ece\u8282\u70b9\u7684\u9009\u4e3e\u6d88\u606f\u5c06\u5ffd\u7565\u3002","title":"\u9009\u4e3e\u6295\u7968"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_38","text":"\u5f53\u524d\u4ece\u8282\u70b9\u53d6\u6d88\u590d\u5236\u53d8\u4e3a \u64a4\u9500\u6545\u969c\u8282\u70b9\u590d\u5236\u7684\u69fd\uff0c\u5e76\u5c06\u8fd9\u4e9b\u69fd\u59d4\u6d3e\u7ed9\u81ea\u5df1 \u5411\u96c6\u7fa4\u5185\u5e7f\u64adpong\u6d88\u606f, \u901a\u77e5\u5176\u5b83\u8282\u70b9\u81ea\u5df1\u5df2\u6210\u4e3a\u4e3b\u8282\u70b9","title":"\u66ff\u6362\u4e3b\u8282\u70b9"},{"location":"java%E5%90%8E%E7%AB%AF/Redis-CheatSheet/#_39","text":"Raft\u7b97\u6cd5 \u4f5c\u8005 \u4ed8\u78ca\u535a\u5ba2 \u4f5c\u8005 \u5f20\u76ca\u519b\u535a\u5ba2","title":"\u8d44\u6599"},{"location":"java%E5%90%8E%E7%AB%AF/Resources/","text":"4.\u8d44\u6e90 \u00b6 4.1 \u4ecb\u7ecd \u00b6 java\u63d0\u4f9b\u4e86\u6807\u51c6\u7c7b java.net.URL \u548c\u6807\u51c6handler\u7528\u6765\u5904\u7406\u4e0d\u540c\u7684URL\u524d\u7f00\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5e76\u975e\u6240\u6709\u5bf9low-level resource\u7684\u8bbf\u95ee\u5b83\u4eec\u90fd\u80fd\u591f\u80dc\u4efb\u3002\u4f8b\u5982\uff0c\u5f53\u8d44\u6e90\u9700\u8981\u4ececlasspath\u6216\u8005\u6709\u5173\u7cfb\u7684 ServletContext \u4e2d\u83b7\u53d6\u65f6\uff0c\u4f60\u627e\u4e0d\u5230 URL \u6807\u51c6\u5316\u7684\u5b9e\u73b0\u3002\u5c3d\u7ba1\u5bf9\u4e8e\u7279\u5b9a\u7684 URL \u524d\u7f00\u6ce8\u518c\u65b0\u7684handler\u662f\u53ef\u80fd\u7684\uff08\u4f8b\u5982\u4e3a http: \u8fd9\u4e2a\u524d\u7f00\u6ce8\u518c\u4e00\u4e2ahandler\uff09\uff0c\u4f46\u662f\u8fd9\u901a\u5e38\u662f\u590d\u6742\u7684\uff0c\u5e76\u4e14 URL \u63a5\u53e3\u4ecd\u7136\u7f3a\u5c11\u4e00\u4e9b\u9700\u8981\u7684\u529f\u80fd\uff0c\u4f8b\u5982\u7528\u4e8e\u68c0\u6d4b\u6307\u5411\u8d44\u6e90\u662f\u5426\u5b58\u5728\u7684\u65b9\u6cd5\u3002 4.2 Resource \u63a5\u53e3 \u00b6 Spring\u7684 Resource \u63a5\u53e3\u610f\u56fe\u6210\u4e3a\u66f4\u52a0\u5f3a\u5927\u7684\u63a5\u53e3\uff0c\u5b83\u62bd\u8c61\u4e86\u5bf9\u4e8elow-level\u8d44\u6e90\u7684\u8bbf\u95ee\u3002 public interface Resource extends InputStreamSource { boolean exists(); boolean isOpen(); URL getURL() throws IOException; File getFile() throws IOException; Resource createRelative(String relativePath) throws IOException; String getFilename(); String getDescription(); } public interface InputStreamSource { InputStream getInputStream() throws IOException; } \u6ce8\u610f Resource \u63a5\u53e3\u4e00\u4e9b\u91cd\u8981\u7684\u65b9\u6cd5\uff1a getInputStream() :\u627e\u5230\u5e76\u6253\u5f00\u8d44\u6e90\uff0c\u8fd4\u56de InputStream \u7528\u4e8e\u8bfb\u53d6\u8d44\u6e90\u3002\u8fd9\u4e2a\u65b9\u6cd5\u671f\u671b\u6bcf\u6b21\u88ab\u8c03\u7528\u90fd\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 InputStream \u3002\u8c03\u7528\u65b9\u9700\u8981\u627f\u62c5\u5173\u95edstream\u7684\u804c\u8d23\u3002 exists() : \u8fd4\u56deboolean\u503c\uff0c\u8868\u793a\u8d44\u6e90\u662f\u5426\u4ee5\u7269\u7406\u5f62\u5f0f\u5b58\u5728\u3002 isOpen() : \u8fd4\u56deboolean\u503c\uff0c\u8868\u793a\u6b64\u8d44\u6e90\u662f\u5426\u5728\u5904\u7406\u4e00\u4e2a\u6253\u5f00\u7684stream\u3002\u5982\u679c\u662ftrue\uff0c InputStream \u4e0d\u80fd\u88ab\u591a\u6b21\u8bfb\u53d6\uff0c\u5e76\u4e14\u5fc5\u987b\u53ea\u80fd\u88ab\u8bfb\u53d6\u4e00\u6b21\u7136\u540e\u88ab\u5173\u95ed\u4ee5\u907f\u514d\u8d44\u6e90\u7684\u6cc4\u9732\u3002\u4e00\u822c\u800c\u8a00resource\u7684\u5b9e\u73b0\u5c06\u4f1a\u8fd4\u56defalse\uff0c\u9664\u4e86 InputStreamResource \u3002 getDescription() : \u8fd4\u56de\u5bf9\u8fd9\u4e2a\u8d44\u6e90\u7684\u63cf\u8ff0\uff0c\u7528\u4e8e\u5728\u8fd9\u4e2a\u8d44\u6e90\u5de5\u4f5c\u7684\u65f6\u5019\u6253\u5370\u9519\u8bef\u4fe1\u606f\u3002\u63cf\u8ff0\u901a\u5e38\u662f\u6587\u4ef6\u7684\u5168\u540d\u6216\u8005\u8d44\u6e90\u7684\u5b9e\u9645URL \u5176\u5b83\u65b9\u6cd5\u5141\u8bb8\u4f60\u83b7\u53d6\u5b9e\u9645\u4ee3\u8868\u8d44\u6e90\u7684URL\u6216\u8005File\u5bf9\u8c61\uff08\u5982\u679c\u57fa\u672c\u7684\u5b9e\u73b0\u662f\u517c\u5bb9\u7684\u5e76\u4e14\u652f\u6301\u5bf9\u4e8e\u7684\u65b9\u6cd5\uff09 Resource\u5728Spring\u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\uff0c\u5f53\u9700\u8981\u7684\u65f6\u5019\u4f1a\u4f5c\u4e3a\u51fd\u6570\u524d\u9762\u4e2d\u7684\u53c2\u6570\u7c7b\u578b\u3002Spring APIs\u4e2d\u7684\u5176\u5b83\u65b9\u6cd5\uff08\u4f8b\u5982ApplicationContext\u4e0d\u540c\u5b9e\u73b0\u7684\u6784\u9020\u51fd\u6570\uff09\uff0c\u4f7f\u7528\u50cfString\u8fd9\u6837\u6ca1\u6709\u7ecf\u8fc7\u4fee\u9970\u6216\u7b80\u5355\u7684\u7c7b\u578b\u6765\u521b\u5efa\u9002\u5408\u4e8econtext\u5b9e\u73b0\u7684Resource\uff0c\u6216\u8005\u901a\u8fc7String path\u7684\u7279\u5b9a\u524d\u7f00\uff0c\u5141\u8bb8\u8c03\u7528\u8005\u786e\u4fdd\u4e00\u4e2a\u7279\u5b9aResource\u5b9e\u73b0\u5fc5\u987b\u88ab\u521b\u5efa\u6216\u4f7f\u7528\u3002 \u5f53Resource\u63a5\u53e3\u5728Spring\u4e2d\u6216\u8005\u88abSpring\u5e7f\u6cdb\u4f7f\u7528\u7684\u540c\u65f6\uff0c\u5b83\u5b9e\u9645\u4e0a\u4f5c\u4e3a\u5b9e\u4f53\u7c7b\u5728\u4f60\u81ea\u5df1\u7684\u4ee3\u7801\u4e2d\u8bbf\u95ee\u8d44\u6e90\u662f\u975e\u5e38\u6709\u7528\u7684\uff0c\u5c3d\u7ba1\u4f60\u5e76\u4e0d\u5173\u5fc3Spring\u7684\u5176\u5b83\u90e8\u5206\u3002\u5c3d\u7ba1\u5b83\u4f7f\u4f60\u7684\u4ee3\u7801\u4e0eSpring\u8026\u5408\u5728\u4e00\u8d77\uff0c\u4f46\u5b83\u5b9e\u9645\u4e0a\u53ea\u8026\u5408\u4e86\u81ea\u5df1\u548c\u4e00\u5c0f\u90e8\u5206\u5b9e\u4f53\u7c7b\uff0c\u5b83\u7528\u6765\u5145\u5f53URL\u7684\u66f4\u5f3a\u5927\u7684\u66ff\u4ee3\u54c1\uff0c\u5e76\u4e14\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u4e0e\u4f60\u5904\u4e8e\u8fd9\u4e2a\u76ee\u7684\uff08\u66ff\u4ee3URL\uff09\u7684\u5176\u5b83\u5e93\u662f\u7b49\u4ef7\u7684\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662fResource\u8fd9\u4e2a\u62bd\u8c61\u5e76\u6ca1\u6709\u66ff\u4ee3\u529f\u80fd\uff1a\u53ea\u8981\u53ef\u80fd\u5b83\u5c31\u80fd\u5305\u88c5\u3002\u4f8b\u5982\uff0cUrlResource\u5305\u88c5\u4e86\u4e00\u4e2aURL\uff0c\u5e76\u4f7f\u7528\u88ab\u5305\u88c5\u7684URL\u505a\u5b9e\u9645\u5de5\u4f5c\u3002 4.3 \u5185\u7f6e\u7684Resource\u5b9e\u73b0 \u00b6 \u5728Spring\u4e2d\u6709\u4e00\u4e9b\u5217Resource\u63a5\u53e3\u7684\u5f00\u7bb1\u5373\u7528\u7684\u5b9e\u73b0\u3002 4.3.1 UrlResource \u00b6 UrlResource\u5305\u88c5\u4e86java.net.URL\uff0c\u5e76\u4e14\u53ef\u4ee5\u7528\u6765\u8bbf\u95ee\u4efb\u4f55\u901a\u8fc7URL\u8bbf\u95ee\u7684\u5bf9\u8c61\uff0c\u4f8b\u5982\u6587\u4ef6\uff0chttp target\uff0c ftp target\u7b49\u7b49\u3002\u6240\u6709\u7684URLs\u90fd\u6709\u4e00\u4e2a\u6807\u51c6\u7684String\u6765\u8868\u793a\uff0c\u4f8b\u5982\u6070\u5f53\u7684\u6807\u51c6\u7684\u524d\u7f00\u7528\u6765\u533a\u5206URL\u7684\u7c7b\u522b\u3002\u4f8b\u5982file\uff1a\u8868\u793a\u8bbf\u95ee\u6587\u4ef6\u7cfb\u7edf\u8def\u5f84\uff0chttp\uff1a\u8868\u793a\u901a\u8fc7http\u534f\u8bae\u8bbf\u95ee\u8d44\u6e90\uff0cftp\uff1a\u8868\u793a\u901a\u8fc7ftp\u534f\u8bae\u8bbf\u95ee\u8d44\u6e90\u5417\uff0c\u7b49\u7b49\u3002 UrlResource\u5bf9\u8c61\u901a\u8fc7UrlResource\u7684\u6784\u9020\u51fd\u6570\u6765\u663e\u5f0f\u5730\u521b\u5efa\uff0c\u4f46\u662f\u5f53\u4f60\u8c03\u7528\u4f7f\u7528String\u53c2\u6570\u4ee3\u8868path\u7684API\u51fd\u6570\u7684\u65f6\u5019\u901a\u5e38\u88ab\u9690\u5f0f\u521b\u5efa\u3002\u5bf9\u4e8e\u540e\u8005\uff0c\u4e00\u4e2a\u53eb\u505aPropertyEditor\u7684JavaBeans\u6700\u7ec8\u51b3\u5b9a\u521b\u5efa\u90a3\u79cd\u7c7b\u578b\u7684Resource\u3002\u5982\u679cpath\u5b57\u7b26\u4e32\u5305\u542b\u4f17\u6240\u5468\u77e5\u7684\u524d\u7f00\uff0c\u4f8b\u5982classpath\uff1a\uff0cPropertyEditor\u5c06\u4f1a\u521b\u5efa\u9002\u5408\u4e8e\u90a3\u4e2a\u524d\u7f00\u7684\u7279\u5b9a\u7684Resource\u3002\u7136\u800c\uff0c\u5982\u679c\u5b83\u4e0d\u8ba4\u8bc6\u90a3\u4e2a\u524d\u7f00\uff0c\u5b83\u5c06\u4f1a\u5047\u8bbe\u8be5\u5b57\u7b26\u4e32\u662f\u4e00\u4e2a\u6807\u51c6\u7684URL\u5b57\u7b26\u4e32\uff0c\u5e76\u4f1a\u521b\u5efaUrlResource\u3002 4.3.2 ClassPathResource \u00b6 \u8fd9\u4e2aclass\u8868\u793a\u8d44\u6e90\u5e94\u8be5\u4ececlasspath\u4e2d\u83b7\u53d6\u3002\u8fd9\u4e2a\u7c7b\u4f7f\u7528thread context class loader\uff0c\u6216\u8005\u7ed9\u5b9aclass loader\uff0c\u6216\u8005\u7ed9\u5b9a\u7684class\u6765\u52a0\u8f7d\u8d44\u6e90\u3002 \u5982\u679c\u7c7b\u8def\u5f84\u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u5b58\u5728\u7684\u8bdd\uff0cResource\u7684\u8fd9\u4e2a\u5b9e\u73b0\u4e5f\u652f\u6301\u89e3\u6790java.io.File\uff0c\u4f46\u662f\u5982\u679ccalsspath resource\u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u662f\u65e0\u6cd5\u5c55\u5f00\u7684\u4f8b\u5982\u5728jar\u5305\u6216\u8005\u5728Servlet Engine\u4e2d\u8fd9\u4e2a\u7c7b\u5c31\u65e0\u6cd5\u89e3\u6790\u4e86\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cResource\u7684\u4e0d\u540c\u5b9e\u73b0\u603b\u662f\u652f\u6301\u5c06\u8d44\u6e90\u89e3\u6790\u4e3ajava.net.URL\u3002 ClassPathResource\u4f7f\u7528\u6784\u9020\u51fd\u6570\u663e\u793a\u7684\u521b\u5efa\uff0c\u4f46\u662f\u5f53\u4f60\u8c03\u7528API\u51fd\u6570\u65f6\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f7f\u7528String\u53c2\u6570\uff0cClassPathResource\u7ecf\u5e38\u88ab\u9690\u5f0f\u7684\u521b\u5efa\u3002\u5bf9\u4e8e\u540e\u8005PropertyEditor\u5c06\u4f1a\u8bc6\u522bString path\u7684classpath:\u524d\u7f00\uff0c\u7136\u540e\u521b\u5efaClassPathResource\u5bf9\u8c61\u3002 4.3.3 FileSystemResource \u00b6 \u8fd9\u4e2a\u7c7b\u662f\u5904\u7406java.io.File\u7684Resource\u63a5\u53e3\u5b9e\u73b0\u3002\u5b83\u660e\u663e\u652f\u6301\u89e3\u6790File\u548cURL\u3002 4.3.4 ServletContextResource \u00b6 \u8fd9\u4e2a\u7c7b\u662fServletContext\u8d44\u6e90\u7684Resource\u5b9e\u73b0\uff0c\u89e3\u6790\u76f8\u5bf9\u5e94web\u5e94\u7528\u7a0b\u5e8f\u6839\u8def\u5f84\u7684\u76f8\u5bf9\u8def\u5f84\u3002 \u5b83\u652f\u6301\u8bbf\u95eeStream\u548cURL\uff0c\u4f46\u662f\u53ea\u6709\u5728web\u5e94\u7528\u7a0b\u5e8f\u6587\u4ef6\u88ab\u5c55\u5f00\u5e76\u4e14\u8d44\u6e90\u5728\u6587\u4ef6\u7cfb\u7edf\u7269\u7406\u5b58\u5728\u65f6\u624d\u5141\u8bb8\u8bbf\u95eejava.io.File\u3002web\u5e94\u7528\u7a0b\u5e8f\u6587\u4ef6\u662f\u5426\u5c55\u5f00\u8fd8\u662f\u76f4\u63a5\u4ecejar \u6587\u4ef6\u6216\u8005\u5176\u5b83\u5730\u65b9\u5982DB\u8bbf\u95ee\u5b9e\u9645\u4e0a\u4f9d\u8d56\u4e8eSevlet\u5bb9\u5668\u3002 4.3.5 InputStreamResource \u00b6 \u8fd9\u4e2a\u7c7b\u662f\u76f8\u5bf9\u4e8eInputStream\u7684Resource\u5b9e\u73b0\u3002\u8fd9\u4e2a\u7c7b\u53ea\u5728\u6ca1\u6709Resource\u7279\u5b9a\u9002\u7528\u7684\u5b9e\u73b0\u7684\u60c5\u51b5\u4e0b\u624d\u5e94\u8be5\u88ab\u4f7f\u7528\u3002\u7279\u522b\u7684\uff0c\u63a8\u8350\u4f7f\u7528ByteArrayResource\u6216\u8005\u4efb\u4f55\u53ef\u80fd\u7684\u57fa\u4e8e\u6587\u4ef6\u7684Resource\u5b9e\u73b0\u3002 \u76f8\u5bf9\u4e8eResource\u7684\u5176\u5b83\u5b9e\u73b0\uff0c\u8fd9\u4e2a\u7c7b\u662f\u5bf9\u4e8e\u4e00\u4e2a\u5df2\u7ecf\u6253\u5f00\u8d44\u6e90\u7684\u63cf\u8ff0\u7b26\u3002\u56e0\u6b64isOpen()\u8fd4\u56detrue\u3002\u5982\u679c\u4f60\u9700\u8981\u5728\u67d0\u4e9b\u5730\u65b9\u6301\u6709\u8d44\u6e90\u63cf\u8ff0\u7b26\u6216\u8005\u591a\u6b21\u8bfb\u53d6stream\uff0c\u4e0d\u8981\u4f7f\u7528\u8fd9\u4e2a\u7c7b\u3002 4.3.6 ByteArrayResource \u00b6 \u8fd9\u4e2a\u7c7b\u662fbyte array\u8d44\u6e90\u7684Resource\u5b9e\u73b0\u3002\u5b83\u4e3a\u7ed9\u5b9a\u7684byte array\u8d44\u6e90\u521b\u5efaByteArrayInputStream\u5bf9\u8c61\u3002 \u8fd9\u4e2a\u7c7b\u9002\u7528\u4e8e\u4ece\u7ed9\u5b9a\u7684byte array\u4e2d\u52a0\u8f7d\u5185\u5bb9\uff0c\u800c\u4e0d\u9700\u8981\u501f\u52a9\u4e8eInputStreamResource\u3002 4.4 ResourceLoader \u00b6 \u5b9e\u73b0\u4e86ResourceLoader\u7684\u5bf9\u8c61\u53ef\u4ee5\u8fd4\u56deResource\u5b9e\u4f8b public interface ResourceLoader { Resource getResource(String location); } \u6240\u6709\u7684\u5e94\u7528\u4e0a\u4e0b\u6587\u90fd\u5b9e\u73b0\u4e86ResourceLoader\u63a5\u53e3\uff0c\u56e0\u6b64\u5e94\u7528\u4e0a\u4e0b\u6587\u53ef\u4ee5\u7528\u6765\u83b7\u53d6Resource\u5b9e\u4f8b\u3002 \u5f53\u4f60\u8c03\u7528\u7279\u5b9a\u7684\u5e94\u7528\u4e0a\u4e0b\u6587\u7684getResource()\u65b9\u6cd5\u65f6\uff0c\u5982\u679clocation path\u6ca1\u6709\u7279\u5b9a\u7684\u524d\u7f00\uff0c\u4f60\u5c06\u4f1a\u83b7\u5f97\u4e00\u4e2a\u9002\u5408\u4e8e\u67d0\u4e2a\u5e94\u7528\u4e0a\u4e0b\u6587\u7684Resource\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u4e0b\u9762\u7684\u4ee3\u7801\u6bb5\u5728\u6267\u884c ClassPathXmlApplicationContext \u8fd9\u4e2a\u5b9e\u4f8b Resource template = ctx.getResource(\"some/resource/path/myTemplate.txt\"); \u8fd9\u6bb5\u4ee3\u7801\u5c06\u4f1a\u83b7\u53d6\u4e00\u4e2aClassPathResource\uff1b\u5982\u679c\u76f8\u540c\u7684\u51fd\u6570\u5728\u6267\u884cFileSystemXmlApplicationContext\u5b9e\u4f8b\uff0c\u4f60\u5c06\u4f1a\u83b7\u5f97FileSystemResource\uff1b\u6267\u884cWebApplicationContext\uff0c\u4f60\u5c06\u4f1a\u83b7\u5f97ServletContextResource\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u4f60\u53ef\u80fd\u60f3\u5f3a\u5236\u4f7f\u7528ClassPathResource\uff0c\u4e0d\u4f9d\u8d56\u4e8e\u5e94\u7528\u4e0a\u4e0b\u6587\u7684\u7c7b\u578b\uff0c\u53ea\u9700\u8981\u786e\u4fdd\u4ee5\u7279\u5b9a\u7684classpath:\u4f5c\u4e3a\u524d\u7f00\u5373\u53ef\u3002 Resource template = ctx.getResource(\"classpath:some/resource/path/myTemplate.txt\"); \u76f8\u4f3c\u7684\uff0c\u901a\u8fc7\u786e\u5b9a\u6807\u51c6\u5f62\u5f0f\u7684ava.net.URL\u53ef\u4ee5\u5f3a\u5236\u83b7\u53d6UrlResource Resource template = ctx.getResource(\"file:///some/resource/path/myTemplate.txt\"); Resource template = ctx.getResource(\"http://myhost.com/resource/path/myTemplate.txt\"); \u4e0b\u9762\u7684\u8868\u683c\u603b\u7ed3\u4e86\u5c06\u5404\u79cdString\u8f6c\u5316\u4e3aResource\u7684\u7b56\u7565 \u524d\u7f00 \u4f8b\u5b50 \u89e3\u91ca classpath: classpath:com/myapp/config.xml \u4ececlasspath\u4e2d\u52a0\u8f7d file: file:///data/config.xml \u4ece\u6587\u4ef6\u7cfb\u7edf\u4e2d\u52a0\u8f7d\u4e3aURL http: http://myserver/logo.png \u52a0\u8f7d\u4e3aURL (none) /data/config.xml \u4f9d\u8d56\u4e8eApplicationContext 4.5 ResourceLoaderAware\u63a5\u53e3 \u00b6 ResourceLoaderAware\u662f\u4e00\u4e2a\u7279\u5b9a\u7684\u6807\u8bb0\u63a5\u53e3\uff0c\u6807\u8bc6\u5bf9\u8c61\u9700\u8981\u63d0\u4f9b\u4e00\u4e2aResourceLoader\u5f15\u7528\u3002 public interface ResourceLoaderAware { void setResourceLoader(ResourceLoader resourceLoader); } \u5f53\u4e00\u4e2a\u7c7b\u5b9e\u73b0\u4e86ResourceLoaderAware\u63a5\u53e3\u5e76\u4e14\u88ab\u53d1\u5e03\u5230\u5e94\u7528\u4e0a\u4e0b\u6587\u65f6\uff08\u4f5c\u4e3aSpring\u7ba1\u7406\u7684bean\uff09\uff0c\u5b83\u88ab\u5e94\u7528\u4e0a\u4e0b\u6587\u8bc6\u522b\u4e3aResourceLoaderAware\u3002\u5e94\u7528\u4e0a\u4e0b\u6587\u5c06\u4f1a\u8c03\u7528setResourceLoader(ResourceLoader)\uff0c\u5e76\u4f7f\u7528\u81ea\u8eab\u4f5c\u4e3a\u53c2\u6570\uff08\u6ce8\u610f\uff0cSpring\u7684\u6240\u6709\u7684\u5e94\u7528\u4e0a\u4e0b\u6587\u90fd\u5b9e\u73b0\u4e86ResourceLoader\u63a5\u53e3\uff09\u3002 \u5f53\u7136\uff0c\u56e0\u4e3aApplicationContext\u662f\u4e00\u4e2aResourceLoader\uff0c\u5b9e\u73b0\u4e86ApplicationContextAware\u63a5\u53e3\u7684bean\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5e94\u7528\u4e0a\u4e0b\u6587\u6765\u52a0\u8f7d\u8d44\u6e90\uff0c\u4f46\u662f\u901a\u5e38\u6765\u8bf4\uff0c\u6700\u597d\u4f7f\u7528\u7279\u5b9a\u7684ResourceLoader\u63a5\u53e3\u5982\u679c\u6b63\u662f\u5b83\u53ea\u9700\u8981\u5e94\u7528\u4e0a\u4e0b\u6587\u6765\u52a0\u8f7dResource\u3002\u8fd9\u6837\u505a\u4f1a\u4f7f\u4ee3\u7801\u8026\u5408\u4e8eResourceLoader\uff0c\u800c\u4e0d\u662f\u8026\u5408\u4e8eSpring\u7684ApplicationContext\u63a5\u53e3\uff0c\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u6765\u770b\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u662f\u4e2a\u5b9e\u7528\u7684\u63a5\u53e3\u3002 \u81ea\u4eceSpring 2.5\u8d77\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528ResourceLoader\u7684\u81ea\u52a8\u6ce8\u5165\u4f5c\u4e3a\u5b9e\u73b0ResourceLoaderAware\u63a5\u53e3\u7684\u66ff\u4ee3\u65b9\u5f0f\u3002\u4f20\u7edf\u7684contructor\u548cbyType\u81ea\u52a8\u6ce8\u5165\u7684\u6a21\u5f0f\u73b0\u5728\u80fd\u591f\u63d0\u4f9bResource\u7c7b\u578b\u7684\u4f9d\u8d56\u4f5c\u4e3a\u76f8\u5e94\u7684\u6784\u9020\u51fd\u6570\u53c2\u6570\u6216\u8005setter\u51fd\u6570\u53c2\u6570\u3002\u5982\u679c\u60f3\u66f4\u7075\u6d3b\u4e9b\uff08\u5305\u62ec\u80fd\u591f\u81ea\u52a8\u6ce8\u5165\u5b57\u6bb5\u548c\u591a\u53c2\u6570\u51fd\u6570\uff09\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u65b0\u7684\u57fa\u4e8e\u6ce8\u89e3\u7684\u81ea\u52a8\u6ce8\u5165\u7279\u6027\u3002\u5728\u90a3\u79cd\u60c5\u51b5\u4e0b\uff0cResourceLoader\u5c06\u4f1a\u7528\u6765\u6ce8\u5165\u5b57\u6bb5\uff0c\u6784\u9020\u51fd\u6570\u53c2\u6570\uff0c\u51fd\u6570\u53c2\u6570\uff0c\u53ea\u8981\u5728\u5b57\u6bb5\uff0c\u6784\u9020\u51fd\u6570\uff0c\u51fd\u6570\u4e0a\u52a0\u4e0a@Autowired\u6ce8\u89e3\u3002 4.6 \u4f7f\u7528\u8d44\u6e90\u4f5c\u4e3a\u4f9d\u8d56 \u00b6 bean\u672c\u8eab\u8981\u901a\u8fc7\u67d0\u79cd\u52a8\u6001\u5904\u7406\u6765\u786e\u5b9a\u548c\u5e94\u7528\u8d44\u6e90\u7684path\uff0c\u4f7f\u7528ResourceLoader\u63a5\u53e3\u6765\u52a0\u8f7d\u8d44\u6e90\u53ef\u80fd\u5bf9bean\u6765\u8bf4\u662f\u6709\u610f\u4e49\u7684\u3002\u4ee5\u52a0\u8f7d\u67d0\u79cd\uff08\u4e0b\u9762\u4ee3\u7801\u4e2d\u7684\uff09template\u4e3a\u4f8b\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u9700\u8981\u7684\u8d44\u6e90\u53d6\u51b3\u4e8e\u7528\u6237\u7684\u89d2\u8272\u3002\u5982\u679c\u8d44\u6e90\u662f\u9759\u6001\u7684\uff0c\u4e0d\u4f7f\u7528ResourceLoader\u4e5f\u53ef\u4ee5\uff0c\u53ea\u9700\u8981bean\u66b4\u9732\u51fa\u6765\u5b83\u9700\u8981\u7684Resource\u5c5e\u6027\u5e76\u6ce8\u5165\u5373\u53ef\u3002 \u6709\u4e2a\u7ec6\u8282\u7684\u5730\u65b9\u662f\u5728\u6ce8\u5165\u5c5e\u6027\u4e0a\uff0c\u6240\u6709\u7684\u5e94\u7528\u4e0a\u4e0b\u6587\u90fdregister\u548c\u4f7f\u7528\u4e86\u4e00\u4e2a\u53eb\u505aPropertyEditor\u7684\u7279\u6b8a\u7684JavaBean\uff0c\u8fd9\u4e2abean\u53ef\u4ee5\u628aString\u8def\u5f84\u88c5\u6362\u6210Resource\u5bf9\u8c61\u3002\u6240\u4ee5\u5982\u679cmyBean\u6709\u4e00\u4e2aResource\u7c7b\u578b\u7684template\u5c5e\u6027\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e\u4e00\u4e2a\u7b80\u5355\u7684string\u6765\u83b7\u53d6\u8d44\u6e90\uff0c\u5982\u4e0b\uff1a <bean id=\"myBean\" class=\"...\"> <property name=\"template\" value=\"some/resource/path/myTemplate.txt\"/> </bean> \u9700\u8981\u6ce8\u610f\u7684\u662f\u8d44\u6e90\u8def\u5f84\u6ca1\u6709\u524d\u7f00\uff0c\u4e4b\u6240\u4ee5\u8fd9\u6837\u662f\u56e0\u4e3a\u5e94\u7528\u4e0a\u4e0b\u6587\u672c\u8eab\u88ab\u5f53\u505aResourceLoader\u6765\u4f7f\u7528\uff0c\u8d44\u6e90\u88ab\u52a0\u8f7d\u4e3aClassPathResource, FileSystemResource \u8fd8\u662f ServletContextResource\u53d6\u51b3\u4e8e\u4e0a\u4e0b\u6587\u7684\u7c7b\u578b\u3002 \u5982\u679c\u60f3\u5f3a\u5236\u4f7f\u7528\u67d0\u79cd\u7c7b\u578b\u7684Resource\uff0c\u52a0\u524d\u7f00\u5c31\u53ef\u4ee5\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u663e\u793a\u4e86\u600e\u6837\u5f3a\u5236\u52a0\u8f7d\u4e3aClassPathResource\u548cUrlResource \uff08\u540e\u8005\u7528\u4e8e\u8bbf\u95ee\u6587\u4ef6\u7cfb\u7edf\u7684\u6587\u4ef6\uff09 <property name=\"template\" value=\"classpath:some/resource/path/myTemplate.txt\"> <property name=\"template\" value=\"file:///some/resource/path/myTemplate.txt\"/> 4.7 \u5e94\u7528\u4e0a\u4e0b\u6587\u548c\u8d44\u6e90\u8def\u5f84 \u00b6 4.7.1 \u6784\u9020\u5e94\u7528\u4e0a\u4e0b\u6587 \u00b6 \u5e94\u7528\u4e0a\u4e0b\u6587\u6784\u9020\u51fd\u6570\u628aString\u6216\u8005String\u6570\u7ec4\u770b\u6210Resource(s)\u7684path(s)\uff0c\u4f8b\u5982xml\u6587\u4ef6\u7ec4\u6210\u4e86context\u7684\u5b9a\u4e49\u3002 \u5c3d\u7ba1\u8fd9\u6837\u7684path\u6ca1\u6709\u4e00\u4e2a\u524d\u7f00\uff0c\u7531\u90a3\u4e2apath\u6765\u6784\u5efa\u7684\u7c7b\u578b\u548c\u7528\u6765\u52a0\u8f7d\u7684bean\u7684\u5b9a\u4e49\uff0c\u53d6\u51b3\u548c\u9002\u7528\u4e8e\u67d0\u79cd\u5e94\u7528\u4e0a\u4e0b\u6587\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u50cf\u4e0b\u9762\u8fd9\u6837\u521b\u5efaClassPathXmlApplicationContext\uff1a ApplicationContext ctx = new ClassPathXmlApplicationContext(\"conf/appContext.xml\"); bean\u7684\u5b9a\u4e49\u5c06\u4ececlasspath\u4e2d\u52a0\u8f7d\uff0c\u4f5c\u4e3aClassPathResource\u6765\u4f7f\u7528\u3002\u4f46\u662f\u5982\u679c\u4f60\u50cf\u4e0b\u9762\u8fd9\u6837\u521b\u5efaFileSystemXmlApplicationContext\uff1a ApplicationContext ctx = new FileSystemXmlApplicationContext(\"conf/appContext.xml\"); bean\u5b9a\u4e49\u5c06\u4ece\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4f4d\u7f6e\u52a0\u8f7d\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c06\u76f8\u5bf9\u4e8e\u5f53\u524d\u5de5\u4f5c\u8def\u5f84\u6765\u5bfb\u627e\u6587\u4ef6\u4f4d\u7f6e\u3002 \u6ce8\u610f\u4f7f\u7528classpath\u524d\u7f00\u4f5c\u4e3a\u6807\u51c6\u7684URL\u524d\u7f00\u5c06\u4f1a\u91cd\u8f7dResource\u7684\u9ed8\u8ba4\u7c7b\u578b\u6765\u52a0\u8f7d\u5b9a\u4e49\u3002\u6240\u4ee5\u4e0b\u9762\u8fd9\u4e2aFileSystemXmlApplicationContext ApplicationContext ctx = new FileSystemXmlApplicationContext(\"classpath:conf/appContext.xml\"); \u5c06\u4f1a\u4ececlasspath\u6765\u52a0\u8f7dbean\u7684\u5b9a\u4e49\u3002\u7136\u800c\uff0c\u5b83\u4ecd\u7136\u662f\u4e00\u4e2aFileSystemXmlApplicationContext\u3002\u5982\u679c\u540e\u9762\u4f5c\u4e3aResourceLoader\u6765\u4f7f\u7528\uff0c\u4efb\u4f55\u6ca1\u6709\u524d\u7f00\u7684path\u5c06\u4f1a\u88ab\u8ba4\u4e3a\u662f\u6587\u4ef6\u7cfb\u7edf\u7684path\u3002 \u6784\u9020ClassPathXmlApplicationContext\u5b9e\u4f8b \u00b6 ClassPathXmlApplicationContext\u66b4\u9732\u4e86\u4e00\u4e9b\u5217\u7684\u6784\u9020\u51fd\u6570\u4f7f\u5b9e\u4f8b\u5316\u66f4\u65b9\u4fbf\u3002\u57fa\u672c\u7684\u60f3\u6cd5\u662f\u53ea\u662f\u63d0\u4f9b\u4e00\u4e2aString\u6570\u7ec4\uff0c\u8fd9\u4e2a\u6570\u7ec4\u53ea\u662f\u5305\u542b\u4e86xml\u6587\u4ef6\u7684\u6587\u4ef6\u540d\uff08\u6ca1\u6709\u524d\u7f00\u4fe1\u606f\uff09\uff0c\u540c\u65f6\u63d0\u4f9b\u4e00\u4e2aclass\uff1bClassPathXmlApplicationContext\u5c06\u4f1a\u6839\u636e\u63d0\u4f9b\u7684class\u884d\u751f\u51fa\u8def\u5f84\u4fe1\u606f\u3002 \u4e00\u4e2a\u4f8b\u5b50\u53ef\u4ee5\u89e3\u91ca\u6e05\u695a\u3002\u8def\u5f84\u5e03\u5c40\u662f\u4e0b\u9762\u8fd9\u6837\uff1a | com/ |-- foo/ | |-- services.xml | |-- daos.xml |-- MessengerService.class \u7531services.xml\u548cdaos.xm\u5b9a\u4e49\u7684bean\u6765\u7ec4\u6210ClassPathXmlApplicationContext\uff1a ApplicationContext ctx = new ClassPathXmlApplicationContext(new String[] {\"services.xml\", \"daos.xml\"}, MessengerService.class); \u60f3\u66f4\u8be6\u7ec6\u7684\u4e86\u89e3\u4e0d\u540c\u7684\u6784\u9020\u5668\u8bf7\u53c2\u8003ClassPathXmlApplicationContext\u7684javadocs\u3002 4.7.2 \u5e94\u7528\u4e0a\u4e0b\u6587\u6784\u9020\u5668resource path\u4e2d\u7684\u901a\u914d\u7b26 \u00b6 Resource path\u5728\u5e94\u7528\u4e0a\u4e0b\u6587\u6784\u9020\u5668\u4e2d\u7684\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u7b80\u5355\u7684path\uff08\u50cf\u4e0a\u9762\u4e00\u6837\uff09\u4e00\u4e00\u5bf9\u5e94\u4e8e\u76ee\u6807Resource\uff0c\u6216\u8005\u5305\u542b\u7279\u6b8a\u7684\u201cclasspath*:\u201d\u524d\u7f00\u6216\u8005\u5185\u90e8Ant\u98ce\u683c\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff08\u4f7f\u7528Spring\u7684PathMatcher\u6765\u5339\u914d\uff09\u3002\u540e\u9762\u4e24\u79cd\u90fd\u662f\u6709\u6548\u7684\u901a\u914d\u7b26\u3002 \u8fd9\u79cd\u673a\u5236\u7684\u4e00\u79cd\u7528\u5904\u662f\u7ec4\u88c5\u7ec4\u88c5\u98ce\u683c\u7684\u5e94\u7528\u3002\u6240\u6709\u7684\u7ec4\u4ef6\u53ef\u4ee5\u5c06\u4e0a\u4e0b\u6587\u5b9a\u4e49\u7247\u6bb5\u53d1\u5e03\u5230\u4e00\u4e2a\u5df2\u77e5\u7684path\u4f4d\u7f6e\uff0c\u5f53\u4f7f\u7528classpath*:\u4f5c\u4e3apath\u7684\u524d\u7f00\u6765\u521b\u5efa\u6700\u7ec8\u7684\u5e94\u7528\u4e0a\u4e0b\u6587\u65f6\uff0c\u6240\u6709\u7684\u7ec4\u4ef6\u7247\u6bb5\u53ef\u4ee5\u88ab\u81ea\u52a8\u9009\u62e9\u3002 \u6ce8\u610f\u8fd9\u79cd\u901a\u914d\u7b26\u662f\u5e94\u7528\u4e0a\u4e0b\u6587\u6784\u9020\u5668\u4e2dResource path\u7684\u7279\u6b8a\u7528\u6cd5\uff08\u6216\u8005\u8bf4\u76f4\u63a5\u4f7f\u7528\u4e86PathMatcher\uff09\uff0c\u5728\u6784\u9020\u7684\u65f6\u5019\u89e3\u6790\u5b8c\u6210\u3002\u5b83\u4e0eResource\u7c7b\u578b\u672c\u8eab\u6ca1\u6709\u5173\u7cfb\u3002\u4e0d\u80fd\u4f7f\u7528classpath*\uff1a\u524d\u7f00\u6765\u6784\u9020\u4e00\u4e2a\u5b9e\u9645\u7684Resource\uff0c\u56e0\u4e3a\u4e00\u4e2aResource\u4e00\u6b21\u53ea\u80fd\u6307\u5411\u4e00\u4e2a\u8d44\u6e90\u3002 Ant\u98ce\u683c\u7684Pattern \u00b6 \u5f53\u4f4d\u7f6e\u7684path\u5305\u542b\u4e86Ant\u98ce\u683c\u7684pattern\u7684\u65f6\u5019\uff0c\u4f8b\u5982 /WEB-INF/*-context.xml |-- com/mycompany/**/applicationContext.xml |-- file:C:/some/path/*-context.xml |-- classpath:com/mycompany/**/applicationContext.xml \u89e3\u6790\u5668\u9075\u5faa\u4e00\u79cd\u66f4\u52a0\u590d\u6742\u4f46\u662f\u5b9a\u4e49\u7684\u6b65\u9aa4\u6765\u89e3\u6790\u901a\u914d\u7b26\u3002\u5b83\u4e3a\u6700\u540e\u6ca1\u6709\u901a\u914d\u7b26\u7684path\u4ea7\u751f\u4e00\u4e2aResource\u5e76\u4e14\u4ece\u4e2d\u83b7\u53d6\u4e00\u4e2aURL\u3002\u5982\u679c\u8fd9\u4e2aURL\u4e0d\u662fjar:\u7c7b\u578b\u7684URL\u6216\u8005\u7279\u6b8a\u5bb9\u5668\u7684\u53d8\u4f53\uff08\u4f8b\u5982WebLogic\u4e2d\u7684zip\uff1a\uff0cWebSphere\u4e2d\u7684wsjar\uff09\uff0c\u5c31\u53ef\u4ee5\u4ece\u4e2d\u83b7\u53d6\u4e00\u4e2ajava.io.File\u5e76\u901a\u8fc7\u904d\u5386\u6587\u4ef6\u7cfb\u7edf\u6765\u89e3\u6790\u901a\u914d\u7b26\u3002\u5982\u679c\u662f\u4e00\u4e2ajar\u7684URL\uff0c\u89e3\u6790\u5668\u4ece\u4e2d\u83b7\u53d6\u4e00\u4e2ajava.net.JarURLConnection\u6216\u8005\u4eba\u5de5\u8f6c\u6362jar URL\u7136\u540e\u904d\u5386jar\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u6765\u89e3\u6790\u901a\u914d\u7b26\u3002 \u8574\u542b\u7684\u53ef\u79fb\u690d\u6027 \u00b6 \u5982\u679c\u67d0\u4e00\u4e2apath\u5df2\u7ecf\u662f\u4e00\u4e2a\u6587\u4ef6\u7684URL\uff08\u6216\u8005\u663e\u5f0f\u7684\u6216\u8005\u662f\u9690\u5f0f\u7684\uff09\u56e0\u4e3aResourceLoader\u662f\u57fa\u4e8e\u6587\u4ef6\u7cfb\u7edf\u7684\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u53ef\u79fb\u690d\u98ce\u683c\u7684\u901a\u914d\u7b26\u662f\u6709\u6548\u7684\u3002 \u5982\u679c\u67d0\u4e00\u4e2apath\u662fclasspath\u4e2d\u7684\u4f4d\u7f6e\uff0c\u89e3\u6790\u5668\u5c31\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528Classloader.getResource()\u6765\u83b7\u53d6\u6700\u540e\u7684\u6ca1\u6709\u901a\u914d\u7b26\u7684URL\u8def\u5f84\u3002\u56e0\u4e3a\u5b83\u53ea\u662fpath\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\uff08\u800c\u4e0d\u662f\u5728\u6700\u540e\u7684\u6587\u4ef6\u540d\uff09\u5b9e\u9645\u4e0a\uff08\u5728ClassLoader javadocs\uff09\u4e2d\u6ca1\u6709\u5b9a\u4e49\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8fd4\u56de\u54ea\u79cd\u7c7b\u578b\u7684URL\u3002\u5b9e\u9645\u4e0a\uff0c\u603b\u662f\u4f7f\u7528java.io.File\u6765\u8868\u793a\u76ee\u5f55\uff0c\u4e0d\u8bbaclasspath resource\u89e3\u6790\u5230\u6587\u4ef6\u7cfb\u7edf\u4f4d\u7f6e\u6216\u8005\u67d0\u79cdjar\u7684URL\u6216\u8005jar\u7684\u4f4d\u7f6e\u3002\u540c\u65f6\u5b83\u8003\u8651\u4e86\u64cd\u4f5c\u7684\u53ef\u79fb\u690d\u6027\u3002 \u5982\u679cjar\u7684URL\u4ece\u6700\u540e\u7684\u6ca1\u6709\u901a\u914d\u7b26\u7684\u7247\u6bb5\u83b7\u53d6\uff0c\u8fd9\u4e2a\u89e3\u6790\u5668\u5c31\u4e00\u5b9a\u80fd\u4ece\u4e2d\u83b7\u53d6java.net.JarURLConnection\uff0c\u6216\u8005\u4eba\u5de5\u8f6c\u6362jar\u7684URL\uff0c\u4e00\u5b9a\u80fd\u904d\u5386jar\u7684\u5185\u5bb9\u5e76\u89e3\u6790\u901a\u914d\u7b26\u3002\u8fd9\u5c06\u5728\u5927\u591a\u6570\u7684\u73af\u5883\u4e0b\u6709\u6548\uff0c\u4f46\u662f\u4e5f\u4f1a\u5931\u8d25\uff0c\u5f3a\u70c8\u63a8\u8350\u5728\u4f60\u4f9d\u8d56\u8fd9\u79cd\u65b9\u5f0f\u524d\u5728\u81ea\u5df1\u7684\u73af\u5883\u4e2d\u6d4b\u4e00\u4e0b\u80fd\u4e0d\u80fd\u89e3\u6790\u6765\u81eajar\u7684\u8d44\u6e90\u3002 classpath*:\u524d\u7f00\u7684\u53ef\u79fb\u690d\u6027 \u00b6 \u5f53\u6784\u9020\u57fa\u4e8exml\u7684\u5e94\u7528\u4e0a\u4e0b\u6587\u65f6\uff0c\u8868\u793a\u4f4d\u7f6e\u7684string\u53ef\u80fd\u4f7f\u7528classpath*:\u524d\u7f00\uff1a ApplicationContext ctx = new ClassPathXmlApplicationContext(\"classpath*:conf/appContext.xml\"); \u8fd9\u79cd\u7279\u6b8a\u7684\u524d\u7f00\u786e\u5b9a\u6240\u6709\u5fc5\u987b\u83b7\u53d6\u7684classpath\u8d44\u6e90\uff08\u5728\u5185\u90e8\uff0c\u672c\u8d28\u4e0a\u8c03\u7528ClassLoader.getResources(\u2026\u200b)\uff09\uff0c\u7136\u540e\u5408\u5e76\u6210\u6700\u540e\u7684\u5e94\u7528\u4e0a\u4e0b\u6587\u5b9a\u4e49\u3002","title":"Resources"},{"location":"java%E5%90%8E%E7%AB%AF/Resources/#4","text":"","title":"4.\u8d44\u6e90"},{"location":"java%E5%90%8E%E7%AB%AF/Resources/#41","text":"java\u63d0\u4f9b\u4e86\u6807\u51c6\u7c7b java.net.URL \u548c\u6807\u51c6handler\u7528\u6765\u5904\u7406\u4e0d\u540c\u7684URL\u524d\u7f00\u3002\u4e0d\u5e78\u7684\u662f\uff0c\u5e76\u975e\u6240\u6709\u5bf9low-level resource\u7684\u8bbf\u95ee\u5b83\u4eec\u90fd\u80fd\u591f\u80dc\u4efb\u3002\u4f8b\u5982\uff0c\u5f53\u8d44\u6e90\u9700\u8981\u4ececlasspath\u6216\u8005\u6709\u5173\u7cfb\u7684 ServletContext \u4e2d\u83b7\u53d6\u65f6\uff0c\u4f60\u627e\u4e0d\u5230 URL \u6807\u51c6\u5316\u7684\u5b9e\u73b0\u3002\u5c3d\u7ba1\u5bf9\u4e8e\u7279\u5b9a\u7684 URL \u524d\u7f00\u6ce8\u518c\u65b0\u7684handler\u662f\u53ef\u80fd\u7684\uff08\u4f8b\u5982\u4e3a http: \u8fd9\u4e2a\u524d\u7f00\u6ce8\u518c\u4e00\u4e2ahandler\uff09\uff0c\u4f46\u662f\u8fd9\u901a\u5e38\u662f\u590d\u6742\u7684\uff0c\u5e76\u4e14 URL \u63a5\u53e3\u4ecd\u7136\u7f3a\u5c11\u4e00\u4e9b\u9700\u8981\u7684\u529f\u80fd\uff0c\u4f8b\u5982\u7528\u4e8e\u68c0\u6d4b\u6307\u5411\u8d44\u6e90\u662f\u5426\u5b58\u5728\u7684\u65b9\u6cd5\u3002","title":"4.1 \u4ecb\u7ecd"},{"location":"java%E5%90%8E%E7%AB%AF/Resources/#42-resource","text":"Spring\u7684 Resource \u63a5\u53e3\u610f\u56fe\u6210\u4e3a\u66f4\u52a0\u5f3a\u5927\u7684\u63a5\u53e3\uff0c\u5b83\u62bd\u8c61\u4e86\u5bf9\u4e8elow-level\u8d44\u6e90\u7684\u8bbf\u95ee\u3002 public interface Resource extends InputStreamSource { boolean exists(); boolean isOpen(); URL getURL() throws IOException; File getFile() throws IOException; Resource createRelative(String relativePath) throws IOException; String getFilename(); String getDescription(); } public interface InputStreamSource { InputStream getInputStream() throws IOException; } \u6ce8\u610f Resource \u63a5\u53e3\u4e00\u4e9b\u91cd\u8981\u7684\u65b9\u6cd5\uff1a getInputStream() :\u627e\u5230\u5e76\u6253\u5f00\u8d44\u6e90\uff0c\u8fd4\u56de InputStream \u7528\u4e8e\u8bfb\u53d6\u8d44\u6e90\u3002\u8fd9\u4e2a\u65b9\u6cd5\u671f\u671b\u6bcf\u6b21\u88ab\u8c03\u7528\u90fd\u8fd4\u56de\u4e00\u4e2a\u65b0\u7684 InputStream \u3002\u8c03\u7528\u65b9\u9700\u8981\u627f\u62c5\u5173\u95edstream\u7684\u804c\u8d23\u3002 exists() : \u8fd4\u56deboolean\u503c\uff0c\u8868\u793a\u8d44\u6e90\u662f\u5426\u4ee5\u7269\u7406\u5f62\u5f0f\u5b58\u5728\u3002 isOpen() : \u8fd4\u56deboolean\u503c\uff0c\u8868\u793a\u6b64\u8d44\u6e90\u662f\u5426\u5728\u5904\u7406\u4e00\u4e2a\u6253\u5f00\u7684stream\u3002\u5982\u679c\u662ftrue\uff0c InputStream \u4e0d\u80fd\u88ab\u591a\u6b21\u8bfb\u53d6\uff0c\u5e76\u4e14\u5fc5\u987b\u53ea\u80fd\u88ab\u8bfb\u53d6\u4e00\u6b21\u7136\u540e\u88ab\u5173\u95ed\u4ee5\u907f\u514d\u8d44\u6e90\u7684\u6cc4\u9732\u3002\u4e00\u822c\u800c\u8a00resource\u7684\u5b9e\u73b0\u5c06\u4f1a\u8fd4\u56defalse\uff0c\u9664\u4e86 InputStreamResource \u3002 getDescription() : \u8fd4\u56de\u5bf9\u8fd9\u4e2a\u8d44\u6e90\u7684\u63cf\u8ff0\uff0c\u7528\u4e8e\u5728\u8fd9\u4e2a\u8d44\u6e90\u5de5\u4f5c\u7684\u65f6\u5019\u6253\u5370\u9519\u8bef\u4fe1\u606f\u3002\u63cf\u8ff0\u901a\u5e38\u662f\u6587\u4ef6\u7684\u5168\u540d\u6216\u8005\u8d44\u6e90\u7684\u5b9e\u9645URL \u5176\u5b83\u65b9\u6cd5\u5141\u8bb8\u4f60\u83b7\u53d6\u5b9e\u9645\u4ee3\u8868\u8d44\u6e90\u7684URL\u6216\u8005File\u5bf9\u8c61\uff08\u5982\u679c\u57fa\u672c\u7684\u5b9e\u73b0\u662f\u517c\u5bb9\u7684\u5e76\u4e14\u652f\u6301\u5bf9\u4e8e\u7684\u65b9\u6cd5\uff09 Resource\u5728Spring\u4e2d\u88ab\u5e7f\u6cdb\u4f7f\u7528\uff0c\u5f53\u9700\u8981\u7684\u65f6\u5019\u4f1a\u4f5c\u4e3a\u51fd\u6570\u524d\u9762\u4e2d\u7684\u53c2\u6570\u7c7b\u578b\u3002Spring APIs\u4e2d\u7684\u5176\u5b83\u65b9\u6cd5\uff08\u4f8b\u5982ApplicationContext\u4e0d\u540c\u5b9e\u73b0\u7684\u6784\u9020\u51fd\u6570\uff09\uff0c\u4f7f\u7528\u50cfString\u8fd9\u6837\u6ca1\u6709\u7ecf\u8fc7\u4fee\u9970\u6216\u7b80\u5355\u7684\u7c7b\u578b\u6765\u521b\u5efa\u9002\u5408\u4e8econtext\u5b9e\u73b0\u7684Resource\uff0c\u6216\u8005\u901a\u8fc7String path\u7684\u7279\u5b9a\u524d\u7f00\uff0c\u5141\u8bb8\u8c03\u7528\u8005\u786e\u4fdd\u4e00\u4e2a\u7279\u5b9aResource\u5b9e\u73b0\u5fc5\u987b\u88ab\u521b\u5efa\u6216\u4f7f\u7528\u3002 \u5f53Resource\u63a5\u53e3\u5728Spring\u4e2d\u6216\u8005\u88abSpring\u5e7f\u6cdb\u4f7f\u7528\u7684\u540c\u65f6\uff0c\u5b83\u5b9e\u9645\u4e0a\u4f5c\u4e3a\u5b9e\u4f53\u7c7b\u5728\u4f60\u81ea\u5df1\u7684\u4ee3\u7801\u4e2d\u8bbf\u95ee\u8d44\u6e90\u662f\u975e\u5e38\u6709\u7528\u7684\uff0c\u5c3d\u7ba1\u4f60\u5e76\u4e0d\u5173\u5fc3Spring\u7684\u5176\u5b83\u90e8\u5206\u3002\u5c3d\u7ba1\u5b83\u4f7f\u4f60\u7684\u4ee3\u7801\u4e0eSpring\u8026\u5408\u5728\u4e00\u8d77\uff0c\u4f46\u5b83\u5b9e\u9645\u4e0a\u53ea\u8026\u5408\u4e86\u81ea\u5df1\u548c\u4e00\u5c0f\u90e8\u5206\u5b9e\u4f53\u7c7b\uff0c\u5b83\u7528\u6765\u5145\u5f53URL\u7684\u66f4\u5f3a\u5927\u7684\u66ff\u4ee3\u54c1\uff0c\u5e76\u4e14\u53ef\u4ee5\u88ab\u8ba4\u4e3a\u4e0e\u4f60\u5904\u4e8e\u8fd9\u4e2a\u76ee\u7684\uff08\u66ff\u4ee3URL\uff09\u7684\u5176\u5b83\u5e93\u662f\u7b49\u4ef7\u7684\u3002 \u503c\u5f97\u6ce8\u610f\u7684\u662fResource\u8fd9\u4e2a\u62bd\u8c61\u5e76\u6ca1\u6709\u66ff\u4ee3\u529f\u80fd\uff1a\u53ea\u8981\u53ef\u80fd\u5b83\u5c31\u80fd\u5305\u88c5\u3002\u4f8b\u5982\uff0cUrlResource\u5305\u88c5\u4e86\u4e00\u4e2aURL\uff0c\u5e76\u4f7f\u7528\u88ab\u5305\u88c5\u7684URL\u505a\u5b9e\u9645\u5de5\u4f5c\u3002","title":"4.2 Resource \u63a5\u53e3"},{"location":"java%E5%90%8E%E7%AB%AF/Resources/#43-resource","text":"\u5728Spring\u4e2d\u6709\u4e00\u4e9b\u5217Resource\u63a5\u53e3\u7684\u5f00\u7bb1\u5373\u7528\u7684\u5b9e\u73b0\u3002","title":"4.3 \u5185\u7f6e\u7684Resource\u5b9e\u73b0"},{"location":"java%E5%90%8E%E7%AB%AF/Resources/#431-urlresource","text":"UrlResource\u5305\u88c5\u4e86java.net.URL\uff0c\u5e76\u4e14\u53ef\u4ee5\u7528\u6765\u8bbf\u95ee\u4efb\u4f55\u901a\u8fc7URL\u8bbf\u95ee\u7684\u5bf9\u8c61\uff0c\u4f8b\u5982\u6587\u4ef6\uff0chttp target\uff0c ftp target\u7b49\u7b49\u3002\u6240\u6709\u7684URLs\u90fd\u6709\u4e00\u4e2a\u6807\u51c6\u7684String\u6765\u8868\u793a\uff0c\u4f8b\u5982\u6070\u5f53\u7684\u6807\u51c6\u7684\u524d\u7f00\u7528\u6765\u533a\u5206URL\u7684\u7c7b\u522b\u3002\u4f8b\u5982file\uff1a\u8868\u793a\u8bbf\u95ee\u6587\u4ef6\u7cfb\u7edf\u8def\u5f84\uff0chttp\uff1a\u8868\u793a\u901a\u8fc7http\u534f\u8bae\u8bbf\u95ee\u8d44\u6e90\uff0cftp\uff1a\u8868\u793a\u901a\u8fc7ftp\u534f\u8bae\u8bbf\u95ee\u8d44\u6e90\u5417\uff0c\u7b49\u7b49\u3002 UrlResource\u5bf9\u8c61\u901a\u8fc7UrlResource\u7684\u6784\u9020\u51fd\u6570\u6765\u663e\u5f0f\u5730\u521b\u5efa\uff0c\u4f46\u662f\u5f53\u4f60\u8c03\u7528\u4f7f\u7528String\u53c2\u6570\u4ee3\u8868path\u7684API\u51fd\u6570\u7684\u65f6\u5019\u901a\u5e38\u88ab\u9690\u5f0f\u521b\u5efa\u3002\u5bf9\u4e8e\u540e\u8005\uff0c\u4e00\u4e2a\u53eb\u505aPropertyEditor\u7684JavaBeans\u6700\u7ec8\u51b3\u5b9a\u521b\u5efa\u90a3\u79cd\u7c7b\u578b\u7684Resource\u3002\u5982\u679cpath\u5b57\u7b26\u4e32\u5305\u542b\u4f17\u6240\u5468\u77e5\u7684\u524d\u7f00\uff0c\u4f8b\u5982classpath\uff1a\uff0cPropertyEditor\u5c06\u4f1a\u521b\u5efa\u9002\u5408\u4e8e\u90a3\u4e2a\u524d\u7f00\u7684\u7279\u5b9a\u7684Resource\u3002\u7136\u800c\uff0c\u5982\u679c\u5b83\u4e0d\u8ba4\u8bc6\u90a3\u4e2a\u524d\u7f00\uff0c\u5b83\u5c06\u4f1a\u5047\u8bbe\u8be5\u5b57\u7b26\u4e32\u662f\u4e00\u4e2a\u6807\u51c6\u7684URL\u5b57\u7b26\u4e32\uff0c\u5e76\u4f1a\u521b\u5efaUrlResource\u3002","title":"4.3.1 UrlResource"},{"location":"java%E5%90%8E%E7%AB%AF/Resources/#432-classpathresource","text":"\u8fd9\u4e2aclass\u8868\u793a\u8d44\u6e90\u5e94\u8be5\u4ececlasspath\u4e2d\u83b7\u53d6\u3002\u8fd9\u4e2a\u7c7b\u4f7f\u7528thread context class loader\uff0c\u6216\u8005\u7ed9\u5b9aclass loader\uff0c\u6216\u8005\u7ed9\u5b9a\u7684class\u6765\u52a0\u8f7d\u8d44\u6e90\u3002 \u5982\u679c\u7c7b\u8def\u5f84\u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u5b58\u5728\u7684\u8bdd\uff0cResource\u7684\u8fd9\u4e2a\u5b9e\u73b0\u4e5f\u652f\u6301\u89e3\u6790java.io.File\uff0c\u4f46\u662f\u5982\u679ccalsspath resource\u5728\u6587\u4ef6\u7cfb\u7edf\u4e2d\u662f\u65e0\u6cd5\u5c55\u5f00\u7684\u4f8b\u5982\u5728jar\u5305\u6216\u8005\u5728Servlet Engine\u4e2d\u8fd9\u4e2a\u7c7b\u5c31\u65e0\u6cd5\u89e3\u6790\u4e86\u3002\u4e3a\u4e86\u89e3\u51b3\u8fd9\u4e2a\u95ee\u9898\uff0cResource\u7684\u4e0d\u540c\u5b9e\u73b0\u603b\u662f\u652f\u6301\u5c06\u8d44\u6e90\u89e3\u6790\u4e3ajava.net.URL\u3002 ClassPathResource\u4f7f\u7528\u6784\u9020\u51fd\u6570\u663e\u793a\u7684\u521b\u5efa\uff0c\u4f46\u662f\u5f53\u4f60\u8c03\u7528API\u51fd\u6570\u65f6\uff0c\u8fd9\u4e2a\u51fd\u6570\u4f7f\u7528String\u53c2\u6570\uff0cClassPathResource\u7ecf\u5e38\u88ab\u9690\u5f0f\u7684\u521b\u5efa\u3002\u5bf9\u4e8e\u540e\u8005PropertyEditor\u5c06\u4f1a\u8bc6\u522bString path\u7684classpath:\u524d\u7f00\uff0c\u7136\u540e\u521b\u5efaClassPathResource\u5bf9\u8c61\u3002","title":"4.3.2 ClassPathResource"},{"location":"java%E5%90%8E%E7%AB%AF/Resources/#433-filesystemresource","text":"\u8fd9\u4e2a\u7c7b\u662f\u5904\u7406java.io.File\u7684Resource\u63a5\u53e3\u5b9e\u73b0\u3002\u5b83\u660e\u663e\u652f\u6301\u89e3\u6790File\u548cURL\u3002","title":"4.3.3 FileSystemResource"},{"location":"java%E5%90%8E%E7%AB%AF/Resources/#434-servletcontextresource","text":"\u8fd9\u4e2a\u7c7b\u662fServletContext\u8d44\u6e90\u7684Resource\u5b9e\u73b0\uff0c\u89e3\u6790\u76f8\u5bf9\u5e94web\u5e94\u7528\u7a0b\u5e8f\u6839\u8def\u5f84\u7684\u76f8\u5bf9\u8def\u5f84\u3002 \u5b83\u652f\u6301\u8bbf\u95eeStream\u548cURL\uff0c\u4f46\u662f\u53ea\u6709\u5728web\u5e94\u7528\u7a0b\u5e8f\u6587\u4ef6\u88ab\u5c55\u5f00\u5e76\u4e14\u8d44\u6e90\u5728\u6587\u4ef6\u7cfb\u7edf\u7269\u7406\u5b58\u5728\u65f6\u624d\u5141\u8bb8\u8bbf\u95eejava.io.File\u3002web\u5e94\u7528\u7a0b\u5e8f\u6587\u4ef6\u662f\u5426\u5c55\u5f00\u8fd8\u662f\u76f4\u63a5\u4ecejar \u6587\u4ef6\u6216\u8005\u5176\u5b83\u5730\u65b9\u5982DB\u8bbf\u95ee\u5b9e\u9645\u4e0a\u4f9d\u8d56\u4e8eSevlet\u5bb9\u5668\u3002","title":"4.3.4 ServletContextResource"},{"location":"java%E5%90%8E%E7%AB%AF/Resources/#435-inputstreamresource","text":"\u8fd9\u4e2a\u7c7b\u662f\u76f8\u5bf9\u4e8eInputStream\u7684Resource\u5b9e\u73b0\u3002\u8fd9\u4e2a\u7c7b\u53ea\u5728\u6ca1\u6709Resource\u7279\u5b9a\u9002\u7528\u7684\u5b9e\u73b0\u7684\u60c5\u51b5\u4e0b\u624d\u5e94\u8be5\u88ab\u4f7f\u7528\u3002\u7279\u522b\u7684\uff0c\u63a8\u8350\u4f7f\u7528ByteArrayResource\u6216\u8005\u4efb\u4f55\u53ef\u80fd\u7684\u57fa\u4e8e\u6587\u4ef6\u7684Resource\u5b9e\u73b0\u3002 \u76f8\u5bf9\u4e8eResource\u7684\u5176\u5b83\u5b9e\u73b0\uff0c\u8fd9\u4e2a\u7c7b\u662f\u5bf9\u4e8e\u4e00\u4e2a\u5df2\u7ecf\u6253\u5f00\u8d44\u6e90\u7684\u63cf\u8ff0\u7b26\u3002\u56e0\u6b64isOpen()\u8fd4\u56detrue\u3002\u5982\u679c\u4f60\u9700\u8981\u5728\u67d0\u4e9b\u5730\u65b9\u6301\u6709\u8d44\u6e90\u63cf\u8ff0\u7b26\u6216\u8005\u591a\u6b21\u8bfb\u53d6stream\uff0c\u4e0d\u8981\u4f7f\u7528\u8fd9\u4e2a\u7c7b\u3002","title":"4.3.5 InputStreamResource"},{"location":"java%E5%90%8E%E7%AB%AF/Resources/#436-bytearrayresource","text":"\u8fd9\u4e2a\u7c7b\u662fbyte array\u8d44\u6e90\u7684Resource\u5b9e\u73b0\u3002\u5b83\u4e3a\u7ed9\u5b9a\u7684byte array\u8d44\u6e90\u521b\u5efaByteArrayInputStream\u5bf9\u8c61\u3002 \u8fd9\u4e2a\u7c7b\u9002\u7528\u4e8e\u4ece\u7ed9\u5b9a\u7684byte array\u4e2d\u52a0\u8f7d\u5185\u5bb9\uff0c\u800c\u4e0d\u9700\u8981\u501f\u52a9\u4e8eInputStreamResource\u3002","title":"4.3.6 ByteArrayResource"},{"location":"java%E5%90%8E%E7%AB%AF/Resources/#44-resourceloader","text":"\u5b9e\u73b0\u4e86ResourceLoader\u7684\u5bf9\u8c61\u53ef\u4ee5\u8fd4\u56deResource\u5b9e\u4f8b public interface ResourceLoader { Resource getResource(String location); } \u6240\u6709\u7684\u5e94\u7528\u4e0a\u4e0b\u6587\u90fd\u5b9e\u73b0\u4e86ResourceLoader\u63a5\u53e3\uff0c\u56e0\u6b64\u5e94\u7528\u4e0a\u4e0b\u6587\u53ef\u4ee5\u7528\u6765\u83b7\u53d6Resource\u5b9e\u4f8b\u3002 \u5f53\u4f60\u8c03\u7528\u7279\u5b9a\u7684\u5e94\u7528\u4e0a\u4e0b\u6587\u7684getResource()\u65b9\u6cd5\u65f6\uff0c\u5982\u679clocation path\u6ca1\u6709\u7279\u5b9a\u7684\u524d\u7f00\uff0c\u4f60\u5c06\u4f1a\u83b7\u5f97\u4e00\u4e2a\u9002\u5408\u4e8e\u67d0\u4e2a\u5e94\u7528\u4e0a\u4e0b\u6587\u7684Resource\u7c7b\u578b\u3002\u4f8b\u5982\uff0c\u5047\u8bbe\u4e0b\u9762\u7684\u4ee3\u7801\u6bb5\u5728\u6267\u884c ClassPathXmlApplicationContext \u8fd9\u4e2a\u5b9e\u4f8b Resource template = ctx.getResource(\"some/resource/path/myTemplate.txt\"); \u8fd9\u6bb5\u4ee3\u7801\u5c06\u4f1a\u83b7\u53d6\u4e00\u4e2aClassPathResource\uff1b\u5982\u679c\u76f8\u540c\u7684\u51fd\u6570\u5728\u6267\u884cFileSystemXmlApplicationContext\u5b9e\u4f8b\uff0c\u4f60\u5c06\u4f1a\u83b7\u5f97FileSystemResource\uff1b\u6267\u884cWebApplicationContext\uff0c\u4f60\u5c06\u4f1a\u83b7\u5f97ServletContextResource\uff0c\u4ee5\u6b64\u7c7b\u63a8\u3002 \u53e6\u4e00\u65b9\u9762\uff0c\u4f60\u53ef\u80fd\u60f3\u5f3a\u5236\u4f7f\u7528ClassPathResource\uff0c\u4e0d\u4f9d\u8d56\u4e8e\u5e94\u7528\u4e0a\u4e0b\u6587\u7684\u7c7b\u578b\uff0c\u53ea\u9700\u8981\u786e\u4fdd\u4ee5\u7279\u5b9a\u7684classpath:\u4f5c\u4e3a\u524d\u7f00\u5373\u53ef\u3002 Resource template = ctx.getResource(\"classpath:some/resource/path/myTemplate.txt\"); \u76f8\u4f3c\u7684\uff0c\u901a\u8fc7\u786e\u5b9a\u6807\u51c6\u5f62\u5f0f\u7684ava.net.URL\u53ef\u4ee5\u5f3a\u5236\u83b7\u53d6UrlResource Resource template = ctx.getResource(\"file:///some/resource/path/myTemplate.txt\"); Resource template = ctx.getResource(\"http://myhost.com/resource/path/myTemplate.txt\"); \u4e0b\u9762\u7684\u8868\u683c\u603b\u7ed3\u4e86\u5c06\u5404\u79cdString\u8f6c\u5316\u4e3aResource\u7684\u7b56\u7565 \u524d\u7f00 \u4f8b\u5b50 \u89e3\u91ca classpath: classpath:com/myapp/config.xml \u4ececlasspath\u4e2d\u52a0\u8f7d file: file:///data/config.xml \u4ece\u6587\u4ef6\u7cfb\u7edf\u4e2d\u52a0\u8f7d\u4e3aURL http: http://myserver/logo.png \u52a0\u8f7d\u4e3aURL (none) /data/config.xml \u4f9d\u8d56\u4e8eApplicationContext","title":"4.4 ResourceLoader"},{"location":"java%E5%90%8E%E7%AB%AF/Resources/#45-resourceloaderaware","text":"ResourceLoaderAware\u662f\u4e00\u4e2a\u7279\u5b9a\u7684\u6807\u8bb0\u63a5\u53e3\uff0c\u6807\u8bc6\u5bf9\u8c61\u9700\u8981\u63d0\u4f9b\u4e00\u4e2aResourceLoader\u5f15\u7528\u3002 public interface ResourceLoaderAware { void setResourceLoader(ResourceLoader resourceLoader); } \u5f53\u4e00\u4e2a\u7c7b\u5b9e\u73b0\u4e86ResourceLoaderAware\u63a5\u53e3\u5e76\u4e14\u88ab\u53d1\u5e03\u5230\u5e94\u7528\u4e0a\u4e0b\u6587\u65f6\uff08\u4f5c\u4e3aSpring\u7ba1\u7406\u7684bean\uff09\uff0c\u5b83\u88ab\u5e94\u7528\u4e0a\u4e0b\u6587\u8bc6\u522b\u4e3aResourceLoaderAware\u3002\u5e94\u7528\u4e0a\u4e0b\u6587\u5c06\u4f1a\u8c03\u7528setResourceLoader(ResourceLoader)\uff0c\u5e76\u4f7f\u7528\u81ea\u8eab\u4f5c\u4e3a\u53c2\u6570\uff08\u6ce8\u610f\uff0cSpring\u7684\u6240\u6709\u7684\u5e94\u7528\u4e0a\u4e0b\u6587\u90fd\u5b9e\u73b0\u4e86ResourceLoader\u63a5\u53e3\uff09\u3002 \u5f53\u7136\uff0c\u56e0\u4e3aApplicationContext\u662f\u4e00\u4e2aResourceLoader\uff0c\u5b9e\u73b0\u4e86ApplicationContextAware\u63a5\u53e3\u7684bean\u4e5f\u53ef\u4ee5\u76f4\u63a5\u4f7f\u7528\u5e94\u7528\u4e0a\u4e0b\u6587\u6765\u52a0\u8f7d\u8d44\u6e90\uff0c\u4f46\u662f\u901a\u5e38\u6765\u8bf4\uff0c\u6700\u597d\u4f7f\u7528\u7279\u5b9a\u7684ResourceLoader\u63a5\u53e3\u5982\u679c\u6b63\u662f\u5b83\u53ea\u9700\u8981\u5e94\u7528\u4e0a\u4e0b\u6587\u6765\u52a0\u8f7dResource\u3002\u8fd9\u6837\u505a\u4f1a\u4f7f\u4ee3\u7801\u8026\u5408\u4e8eResourceLoader\uff0c\u800c\u4e0d\u662f\u8026\u5408\u4e8eSpring\u7684ApplicationContext\u63a5\u53e3\uff0c\u4ece\u8fd9\u4e2a\u89d2\u5ea6\u6765\u770b\u53ef\u4ee5\u8ba4\u4e3a\u8fd9\u662f\u4e2a\u5b9e\u7528\u7684\u63a5\u53e3\u3002 \u81ea\u4eceSpring 2.5\u8d77\uff0c\u4f60\u53ef\u4ee5\u4f7f\u7528ResourceLoader\u7684\u81ea\u52a8\u6ce8\u5165\u4f5c\u4e3a\u5b9e\u73b0ResourceLoaderAware\u63a5\u53e3\u7684\u66ff\u4ee3\u65b9\u5f0f\u3002\u4f20\u7edf\u7684contructor\u548cbyType\u81ea\u52a8\u6ce8\u5165\u7684\u6a21\u5f0f\u73b0\u5728\u80fd\u591f\u63d0\u4f9bResource\u7c7b\u578b\u7684\u4f9d\u8d56\u4f5c\u4e3a\u76f8\u5e94\u7684\u6784\u9020\u51fd\u6570\u53c2\u6570\u6216\u8005setter\u51fd\u6570\u53c2\u6570\u3002\u5982\u679c\u60f3\u66f4\u7075\u6d3b\u4e9b\uff08\u5305\u62ec\u80fd\u591f\u81ea\u52a8\u6ce8\u5165\u5b57\u6bb5\u548c\u591a\u53c2\u6570\u51fd\u6570\uff09\uff0c\u53ef\u4ee5\u8003\u8651\u4f7f\u7528\u65b0\u7684\u57fa\u4e8e\u6ce8\u89e3\u7684\u81ea\u52a8\u6ce8\u5165\u7279\u6027\u3002\u5728\u90a3\u79cd\u60c5\u51b5\u4e0b\uff0cResourceLoader\u5c06\u4f1a\u7528\u6765\u6ce8\u5165\u5b57\u6bb5\uff0c\u6784\u9020\u51fd\u6570\u53c2\u6570\uff0c\u51fd\u6570\u53c2\u6570\uff0c\u53ea\u8981\u5728\u5b57\u6bb5\uff0c\u6784\u9020\u51fd\u6570\uff0c\u51fd\u6570\u4e0a\u52a0\u4e0a@Autowired\u6ce8\u89e3\u3002","title":"4.5 ResourceLoaderAware\u63a5\u53e3"},{"location":"java%E5%90%8E%E7%AB%AF/Resources/#46","text":"bean\u672c\u8eab\u8981\u901a\u8fc7\u67d0\u79cd\u52a8\u6001\u5904\u7406\u6765\u786e\u5b9a\u548c\u5e94\u7528\u8d44\u6e90\u7684path\uff0c\u4f7f\u7528ResourceLoader\u63a5\u53e3\u6765\u52a0\u8f7d\u8d44\u6e90\u53ef\u80fd\u5bf9bean\u6765\u8bf4\u662f\u6709\u610f\u4e49\u7684\u3002\u4ee5\u52a0\u8f7d\u67d0\u79cd\uff08\u4e0b\u9762\u4ee3\u7801\u4e2d\u7684\uff09template\u4e3a\u4f8b\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0b\u9700\u8981\u7684\u8d44\u6e90\u53d6\u51b3\u4e8e\u7528\u6237\u7684\u89d2\u8272\u3002\u5982\u679c\u8d44\u6e90\u662f\u9759\u6001\u7684\uff0c\u4e0d\u4f7f\u7528ResourceLoader\u4e5f\u53ef\u4ee5\uff0c\u53ea\u9700\u8981bean\u66b4\u9732\u51fa\u6765\u5b83\u9700\u8981\u7684Resource\u5c5e\u6027\u5e76\u6ce8\u5165\u5373\u53ef\u3002 \u6709\u4e2a\u7ec6\u8282\u7684\u5730\u65b9\u662f\u5728\u6ce8\u5165\u5c5e\u6027\u4e0a\uff0c\u6240\u6709\u7684\u5e94\u7528\u4e0a\u4e0b\u6587\u90fdregister\u548c\u4f7f\u7528\u4e86\u4e00\u4e2a\u53eb\u505aPropertyEditor\u7684\u7279\u6b8a\u7684JavaBean\uff0c\u8fd9\u4e2abean\u53ef\u4ee5\u628aString\u8def\u5f84\u88c5\u6362\u6210Resource\u5bf9\u8c61\u3002\u6240\u4ee5\u5982\u679cmyBean\u6709\u4e00\u4e2aResource\u7c7b\u578b\u7684template\u5c5e\u6027\uff0c\u5c31\u53ef\u4ee5\u901a\u8fc7\u914d\u7f6e\u4e00\u4e2a\u7b80\u5355\u7684string\u6765\u83b7\u53d6\u8d44\u6e90\uff0c\u5982\u4e0b\uff1a <bean id=\"myBean\" class=\"...\"> <property name=\"template\" value=\"some/resource/path/myTemplate.txt\"/> </bean> \u9700\u8981\u6ce8\u610f\u7684\u662f\u8d44\u6e90\u8def\u5f84\u6ca1\u6709\u524d\u7f00\uff0c\u4e4b\u6240\u4ee5\u8fd9\u6837\u662f\u56e0\u4e3a\u5e94\u7528\u4e0a\u4e0b\u6587\u672c\u8eab\u88ab\u5f53\u505aResourceLoader\u6765\u4f7f\u7528\uff0c\u8d44\u6e90\u88ab\u52a0\u8f7d\u4e3aClassPathResource, FileSystemResource \u8fd8\u662f ServletContextResource\u53d6\u51b3\u4e8e\u4e0a\u4e0b\u6587\u7684\u7c7b\u578b\u3002 \u5982\u679c\u60f3\u5f3a\u5236\u4f7f\u7528\u67d0\u79cd\u7c7b\u578b\u7684Resource\uff0c\u52a0\u524d\u7f00\u5c31\u53ef\u4ee5\u3002\u4e0b\u9762\u7684\u4f8b\u5b50\u663e\u793a\u4e86\u600e\u6837\u5f3a\u5236\u52a0\u8f7d\u4e3aClassPathResource\u548cUrlResource \uff08\u540e\u8005\u7528\u4e8e\u8bbf\u95ee\u6587\u4ef6\u7cfb\u7edf\u7684\u6587\u4ef6\uff09 <property name=\"template\" value=\"classpath:some/resource/path/myTemplate.txt\"> <property name=\"template\" value=\"file:///some/resource/path/myTemplate.txt\"/>","title":"4.6 \u4f7f\u7528\u8d44\u6e90\u4f5c\u4e3a\u4f9d\u8d56"},{"location":"java%E5%90%8E%E7%AB%AF/Resources/#47","text":"","title":"4.7 \u5e94\u7528\u4e0a\u4e0b\u6587\u548c\u8d44\u6e90\u8def\u5f84"},{"location":"java%E5%90%8E%E7%AB%AF/Resources/#471","text":"\u5e94\u7528\u4e0a\u4e0b\u6587\u6784\u9020\u51fd\u6570\u628aString\u6216\u8005String\u6570\u7ec4\u770b\u6210Resource(s)\u7684path(s)\uff0c\u4f8b\u5982xml\u6587\u4ef6\u7ec4\u6210\u4e86context\u7684\u5b9a\u4e49\u3002 \u5c3d\u7ba1\u8fd9\u6837\u7684path\u6ca1\u6709\u4e00\u4e2a\u524d\u7f00\uff0c\u7531\u90a3\u4e2apath\u6765\u6784\u5efa\u7684\u7c7b\u578b\u548c\u7528\u6765\u52a0\u8f7d\u7684bean\u7684\u5b9a\u4e49\uff0c\u53d6\u51b3\u548c\u9002\u7528\u4e8e\u67d0\u79cd\u5e94\u7528\u4e0a\u4e0b\u6587\u3002\u4f8b\u5982\uff0c\u5982\u679c\u4f60\u50cf\u4e0b\u9762\u8fd9\u6837\u521b\u5efaClassPathXmlApplicationContext\uff1a ApplicationContext ctx = new ClassPathXmlApplicationContext(\"conf/appContext.xml\"); bean\u7684\u5b9a\u4e49\u5c06\u4ececlasspath\u4e2d\u52a0\u8f7d\uff0c\u4f5c\u4e3aClassPathResource\u6765\u4f7f\u7528\u3002\u4f46\u662f\u5982\u679c\u4f60\u50cf\u4e0b\u9762\u8fd9\u6837\u521b\u5efaFileSystemXmlApplicationContext\uff1a ApplicationContext ctx = new FileSystemXmlApplicationContext(\"conf/appContext.xml\"); bean\u5b9a\u4e49\u5c06\u4ece\u6587\u4ef6\u7cfb\u7edf\u4e2d\u4f4d\u7f6e\u52a0\u8f7d\uff0c\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u5c06\u76f8\u5bf9\u4e8e\u5f53\u524d\u5de5\u4f5c\u8def\u5f84\u6765\u5bfb\u627e\u6587\u4ef6\u4f4d\u7f6e\u3002 \u6ce8\u610f\u4f7f\u7528classpath\u524d\u7f00\u4f5c\u4e3a\u6807\u51c6\u7684URL\u524d\u7f00\u5c06\u4f1a\u91cd\u8f7dResource\u7684\u9ed8\u8ba4\u7c7b\u578b\u6765\u52a0\u8f7d\u5b9a\u4e49\u3002\u6240\u4ee5\u4e0b\u9762\u8fd9\u4e2aFileSystemXmlApplicationContext ApplicationContext ctx = new FileSystemXmlApplicationContext(\"classpath:conf/appContext.xml\"); \u5c06\u4f1a\u4ececlasspath\u6765\u52a0\u8f7dbean\u7684\u5b9a\u4e49\u3002\u7136\u800c\uff0c\u5b83\u4ecd\u7136\u662f\u4e00\u4e2aFileSystemXmlApplicationContext\u3002\u5982\u679c\u540e\u9762\u4f5c\u4e3aResourceLoader\u6765\u4f7f\u7528\uff0c\u4efb\u4f55\u6ca1\u6709\u524d\u7f00\u7684path\u5c06\u4f1a\u88ab\u8ba4\u4e3a\u662f\u6587\u4ef6\u7cfb\u7edf\u7684path\u3002","title":"4.7.1 \u6784\u9020\u5e94\u7528\u4e0a\u4e0b\u6587"},{"location":"java%E5%90%8E%E7%AB%AF/Resources/#classpathxmlapplicationcontext","text":"ClassPathXmlApplicationContext\u66b4\u9732\u4e86\u4e00\u4e9b\u5217\u7684\u6784\u9020\u51fd\u6570\u4f7f\u5b9e\u4f8b\u5316\u66f4\u65b9\u4fbf\u3002\u57fa\u672c\u7684\u60f3\u6cd5\u662f\u53ea\u662f\u63d0\u4f9b\u4e00\u4e2aString\u6570\u7ec4\uff0c\u8fd9\u4e2a\u6570\u7ec4\u53ea\u662f\u5305\u542b\u4e86xml\u6587\u4ef6\u7684\u6587\u4ef6\u540d\uff08\u6ca1\u6709\u524d\u7f00\u4fe1\u606f\uff09\uff0c\u540c\u65f6\u63d0\u4f9b\u4e00\u4e2aclass\uff1bClassPathXmlApplicationContext\u5c06\u4f1a\u6839\u636e\u63d0\u4f9b\u7684class\u884d\u751f\u51fa\u8def\u5f84\u4fe1\u606f\u3002 \u4e00\u4e2a\u4f8b\u5b50\u53ef\u4ee5\u89e3\u91ca\u6e05\u695a\u3002\u8def\u5f84\u5e03\u5c40\u662f\u4e0b\u9762\u8fd9\u6837\uff1a | com/ |-- foo/ | |-- services.xml | |-- daos.xml |-- MessengerService.class \u7531services.xml\u548cdaos.xm\u5b9a\u4e49\u7684bean\u6765\u7ec4\u6210ClassPathXmlApplicationContext\uff1a ApplicationContext ctx = new ClassPathXmlApplicationContext(new String[] {\"services.xml\", \"daos.xml\"}, MessengerService.class); \u60f3\u66f4\u8be6\u7ec6\u7684\u4e86\u89e3\u4e0d\u540c\u7684\u6784\u9020\u5668\u8bf7\u53c2\u8003ClassPathXmlApplicationContext\u7684javadocs\u3002","title":"\u6784\u9020ClassPathXmlApplicationContext\u5b9e\u4f8b"},{"location":"java%E5%90%8E%E7%AB%AF/Resources/#472-resource-path","text":"Resource path\u5728\u5e94\u7528\u4e0a\u4e0b\u6587\u6784\u9020\u5668\u4e2d\u7684\u503c\u53ef\u4ee5\u662f\u4e00\u4e2a\u7b80\u5355\u7684path\uff08\u50cf\u4e0a\u9762\u4e00\u6837\uff09\u4e00\u4e00\u5bf9\u5e94\u4e8e\u76ee\u6807Resource\uff0c\u6216\u8005\u5305\u542b\u7279\u6b8a\u7684\u201cclasspath*:\u201d\u524d\u7f00\u6216\u8005\u5185\u90e8Ant\u98ce\u683c\u7684\u6b63\u5219\u8868\u8fbe\u5f0f\uff08\u4f7f\u7528Spring\u7684PathMatcher\u6765\u5339\u914d\uff09\u3002\u540e\u9762\u4e24\u79cd\u90fd\u662f\u6709\u6548\u7684\u901a\u914d\u7b26\u3002 \u8fd9\u79cd\u673a\u5236\u7684\u4e00\u79cd\u7528\u5904\u662f\u7ec4\u88c5\u7ec4\u88c5\u98ce\u683c\u7684\u5e94\u7528\u3002\u6240\u6709\u7684\u7ec4\u4ef6\u53ef\u4ee5\u5c06\u4e0a\u4e0b\u6587\u5b9a\u4e49\u7247\u6bb5\u53d1\u5e03\u5230\u4e00\u4e2a\u5df2\u77e5\u7684path\u4f4d\u7f6e\uff0c\u5f53\u4f7f\u7528classpath*:\u4f5c\u4e3apath\u7684\u524d\u7f00\u6765\u521b\u5efa\u6700\u7ec8\u7684\u5e94\u7528\u4e0a\u4e0b\u6587\u65f6\uff0c\u6240\u6709\u7684\u7ec4\u4ef6\u7247\u6bb5\u53ef\u4ee5\u88ab\u81ea\u52a8\u9009\u62e9\u3002 \u6ce8\u610f\u8fd9\u79cd\u901a\u914d\u7b26\u662f\u5e94\u7528\u4e0a\u4e0b\u6587\u6784\u9020\u5668\u4e2dResource path\u7684\u7279\u6b8a\u7528\u6cd5\uff08\u6216\u8005\u8bf4\u76f4\u63a5\u4f7f\u7528\u4e86PathMatcher\uff09\uff0c\u5728\u6784\u9020\u7684\u65f6\u5019\u89e3\u6790\u5b8c\u6210\u3002\u5b83\u4e0eResource\u7c7b\u578b\u672c\u8eab\u6ca1\u6709\u5173\u7cfb\u3002\u4e0d\u80fd\u4f7f\u7528classpath*\uff1a\u524d\u7f00\u6765\u6784\u9020\u4e00\u4e2a\u5b9e\u9645\u7684Resource\uff0c\u56e0\u4e3a\u4e00\u4e2aResource\u4e00\u6b21\u53ea\u80fd\u6307\u5411\u4e00\u4e2a\u8d44\u6e90\u3002","title":"4.7.2 \u5e94\u7528\u4e0a\u4e0b\u6587\u6784\u9020\u5668resource path\u4e2d\u7684\u901a\u914d\u7b26"},{"location":"java%E5%90%8E%E7%AB%AF/Resources/#antpattern","text":"\u5f53\u4f4d\u7f6e\u7684path\u5305\u542b\u4e86Ant\u98ce\u683c\u7684pattern\u7684\u65f6\u5019\uff0c\u4f8b\u5982 /WEB-INF/*-context.xml |-- com/mycompany/**/applicationContext.xml |-- file:C:/some/path/*-context.xml |-- classpath:com/mycompany/**/applicationContext.xml \u89e3\u6790\u5668\u9075\u5faa\u4e00\u79cd\u66f4\u52a0\u590d\u6742\u4f46\u662f\u5b9a\u4e49\u7684\u6b65\u9aa4\u6765\u89e3\u6790\u901a\u914d\u7b26\u3002\u5b83\u4e3a\u6700\u540e\u6ca1\u6709\u901a\u914d\u7b26\u7684path\u4ea7\u751f\u4e00\u4e2aResource\u5e76\u4e14\u4ece\u4e2d\u83b7\u53d6\u4e00\u4e2aURL\u3002\u5982\u679c\u8fd9\u4e2aURL\u4e0d\u662fjar:\u7c7b\u578b\u7684URL\u6216\u8005\u7279\u6b8a\u5bb9\u5668\u7684\u53d8\u4f53\uff08\u4f8b\u5982WebLogic\u4e2d\u7684zip\uff1a\uff0cWebSphere\u4e2d\u7684wsjar\uff09\uff0c\u5c31\u53ef\u4ee5\u4ece\u4e2d\u83b7\u53d6\u4e00\u4e2ajava.io.File\u5e76\u901a\u8fc7\u904d\u5386\u6587\u4ef6\u7cfb\u7edf\u6765\u89e3\u6790\u901a\u914d\u7b26\u3002\u5982\u679c\u662f\u4e00\u4e2ajar\u7684URL\uff0c\u89e3\u6790\u5668\u4ece\u4e2d\u83b7\u53d6\u4e00\u4e2ajava.net.JarURLConnection\u6216\u8005\u4eba\u5de5\u8f6c\u6362jar URL\u7136\u540e\u904d\u5386jar\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u6765\u89e3\u6790\u901a\u914d\u7b26\u3002","title":"Ant\u98ce\u683c\u7684Pattern"},{"location":"java%E5%90%8E%E7%AB%AF/Resources/#_1","text":"\u5982\u679c\u67d0\u4e00\u4e2apath\u5df2\u7ecf\u662f\u4e00\u4e2a\u6587\u4ef6\u7684URL\uff08\u6216\u8005\u663e\u5f0f\u7684\u6216\u8005\u662f\u9690\u5f0f\u7684\uff09\u56e0\u4e3aResourceLoader\u662f\u57fa\u4e8e\u6587\u4ef6\u7cfb\u7edf\u7684\uff0c\u53ef\u4ee5\u4fdd\u8bc1\u53ef\u79fb\u690d\u98ce\u683c\u7684\u901a\u914d\u7b26\u662f\u6709\u6548\u7684\u3002 \u5982\u679c\u67d0\u4e00\u4e2apath\u662fclasspath\u4e2d\u7684\u4f4d\u7f6e\uff0c\u89e3\u6790\u5668\u5c31\u53ef\u4ee5\u901a\u8fc7\u8c03\u7528Classloader.getResource()\u6765\u83b7\u53d6\u6700\u540e\u7684\u6ca1\u6709\u901a\u914d\u7b26\u7684URL\u8def\u5f84\u3002\u56e0\u4e3a\u5b83\u53ea\u662fpath\u4e2d\u7684\u4e00\u4e2a\u8282\u70b9\uff08\u800c\u4e0d\u662f\u5728\u6700\u540e\u7684\u6587\u4ef6\u540d\uff09\u5b9e\u9645\u4e0a\uff08\u5728ClassLoader javadocs\uff09\u4e2d\u6ca1\u6709\u5b9a\u4e49\u8fd9\u79cd\u60c5\u51b5\u4e0b\u8fd4\u56de\u54ea\u79cd\u7c7b\u578b\u7684URL\u3002\u5b9e\u9645\u4e0a\uff0c\u603b\u662f\u4f7f\u7528java.io.File\u6765\u8868\u793a\u76ee\u5f55\uff0c\u4e0d\u8bbaclasspath resource\u89e3\u6790\u5230\u6587\u4ef6\u7cfb\u7edf\u4f4d\u7f6e\u6216\u8005\u67d0\u79cdjar\u7684URL\u6216\u8005jar\u7684\u4f4d\u7f6e\u3002\u540c\u65f6\u5b83\u8003\u8651\u4e86\u64cd\u4f5c\u7684\u53ef\u79fb\u690d\u6027\u3002 \u5982\u679cjar\u7684URL\u4ece\u6700\u540e\u7684\u6ca1\u6709\u901a\u914d\u7b26\u7684\u7247\u6bb5\u83b7\u53d6\uff0c\u8fd9\u4e2a\u89e3\u6790\u5668\u5c31\u4e00\u5b9a\u80fd\u4ece\u4e2d\u83b7\u53d6java.net.JarURLConnection\uff0c\u6216\u8005\u4eba\u5de5\u8f6c\u6362jar\u7684URL\uff0c\u4e00\u5b9a\u80fd\u904d\u5386jar\u7684\u5185\u5bb9\u5e76\u89e3\u6790\u901a\u914d\u7b26\u3002\u8fd9\u5c06\u5728\u5927\u591a\u6570\u7684\u73af\u5883\u4e0b\u6709\u6548\uff0c\u4f46\u662f\u4e5f\u4f1a\u5931\u8d25\uff0c\u5f3a\u70c8\u63a8\u8350\u5728\u4f60\u4f9d\u8d56\u8fd9\u79cd\u65b9\u5f0f\u524d\u5728\u81ea\u5df1\u7684\u73af\u5883\u4e2d\u6d4b\u4e00\u4e0b\u80fd\u4e0d\u80fd\u89e3\u6790\u6765\u81eajar\u7684\u8d44\u6e90\u3002","title":"\u8574\u542b\u7684\u53ef\u79fb\u690d\u6027"},{"location":"java%E5%90%8E%E7%AB%AF/Resources/#classpath","text":"\u5f53\u6784\u9020\u57fa\u4e8exml\u7684\u5e94\u7528\u4e0a\u4e0b\u6587\u65f6\uff0c\u8868\u793a\u4f4d\u7f6e\u7684string\u53ef\u80fd\u4f7f\u7528classpath*:\u524d\u7f00\uff1a ApplicationContext ctx = new ClassPathXmlApplicationContext(\"classpath*:conf/appContext.xml\"); \u8fd9\u79cd\u7279\u6b8a\u7684\u524d\u7f00\u786e\u5b9a\u6240\u6709\u5fc5\u987b\u83b7\u53d6\u7684classpath\u8d44\u6e90\uff08\u5728\u5185\u90e8\uff0c\u672c\u8d28\u4e0a\u8c03\u7528ClassLoader.getResources(\u2026\u200b)\uff09\uff0c\u7136\u540e\u5408\u5e76\u6210\u6700\u540e\u7684\u5e94\u7528\u4e0a\u4e0b\u6587\u5b9a\u4e49\u3002","title":"classpath*:\u524d\u7f00\u7684\u53ef\u79fb\u690d\u6027"},{"location":"java%E5%90%8E%E7%AB%AF/Spark-Overview/","text":"Spark Overview(\u7ffb\u8bd1) \u00b6 Apache Spark\u662f\u4e00\u4e2a\u5feb\u901f\u5e76\u4e14\u901a\u7528\u7684\u96c6\u7fa4\u8ba1\u7b97\u7cfb\u7edf\u3002\u5b83\u63d0\u4f9b\u4e86high level\u7684Java, Scala, Python \u548c R \u8bed\u8a00\u7684api\uff0c\u4ee5\u53ca\u4e00\u4e2a\u7ecf\u8fc7\u4f18\u5316\u7684\u652f\u6301\u901a\u7528\u56fe\u8868\u7684\u5f15\u64ce\u3002\u5b83\u4e5f\u652f\u6301\u975e\u5e38\u4e30\u5bcc\u7684\u5de5\u5177\u5e93\uff0c\u4f8b\u5982 Spark SQL \u7528\u4e8esql\u548c\u7ed3\u6784\u5316\u6570\u636e\u7684\u5904\u7406\uff0c MLlib \u7528\u4e8e\u673a\u5668\u5b66\u4e60\uff0c GraphX \u7528\u4e8e\u5904\u7406\u56fe\uff0c\u4ee5\u53ca Spark Streaming \u4e0b\u8f7d \u00b6 \u4ece \u4e0b\u8f7d\u9875 \u83b7\u53d6Spark\u3002\u8fd9\u4e2a\u6587\u6863\u5bf9\u5e94\u4e8eSpark 2.0.2. Spark\u4f7f\u7528Hadoop\u4e3aHDFS\u548cYARN\u505a\u7684\u5ba2\u6237\u7aef\u5e93\u3002\u4e0b\u8f7d\u7684\u538b\u7f29\u6587\u4ef6\u6253\u5305\u4e86\u4e00\u4e9b\u6d41\u884c\u7248\u672c\u7684Hadoop\u3002\u7528\u6237\u4e5f\u53ef\u4ee5\u4e0b\u8f7dHadoop\u514d\u8d39\u7248\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5e76\u901a\u8fc7 \u53c2\u6570\u5316Spark\u7684classpath \u6765\u4f7f\u7528\u4efb\u610f\u7248\u672c\u7684Hadoop\u6765\u8fd0\u884cSpark \u5982\u679c\u4f60\u60f3\u7f16\u8bd1Spark\u7684\u6e90\u7801\uff0c\u8bbf\u95ee Build Spark Spark\u65e2\u53ef\u4ee5\u8fd0\u884c\u5728Windows, Unix, Mac OS\u7b49\u7cfb\u7edf\u4e2d\u3002\u5728\u672c\u5730\u8fd0\u884cSpark\u662f\u975e\u5e38\u7b80\u5355\u7684--\u4f60\u53ea\u9700\u8981\u5b89\u88c5\u4e86java\uff0c\u5e76JAVA_HOME\u73af\u5883\u5373\u53ef\u3002 Spark\u80fd\u591f\u8fd0\u884c\u5728Java 7+, Python 2.6+/3.4+ \u4ee5\u53ca R 3.1+\u3002Spark 2.0.2\u63d0\u4f9b\u7684Scala API\u9700\u8981\u4f7f\u7528 Scala 2.11\u3002\u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u4e00\u4e2a\u517c\u5bb9Scala 2.11\u7684\u7248\u672c\u3002 \u8fd0\u884c\u4f8b\u5b50\u548cshell \u00b6 Spark \u6709\u4e00\u7cfb\u5217\u7684\u6837\u4f8b\u7a0b\u5e8f\u3002Scala, Java, Python \u548c R\u7684\u4f8b\u5b50\u5728examples/src/main\u6587\u4ef6\u5939\u4e0b\u9762\u3002\u4e3a\u4e86\u8fd0\u884cJava\u6216\u8005Scala\u7684\u6837\u4f8b\u7a0b\u5e8f\uff0c\u5728Spark\u4e00\u7ea7\u76ee\u5f55\u4e0b\u4f7f\u7528 bin/run-example <class> [params] (\u5728\u5e55\u540e\uff0c\u8fd9\u6761\u547d\u4ee4\u8c03\u7528\u4e86\u5176\u5b83\u901a\u7528\u7684 spark-submit \u811a\u672c \u6765\u767b\u9646\u5e94\u7528\u7a0b\u5e8f )\u3002\u4f8b\u5982\uff0c ./bin/run-example SparkPi 10 \u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7Scala Shell\u6765\u8fd0\u884cSpark\u3002\u8fd9\u662f\u5b66\u4e60\u6846\u67b6\u975e\u5e38\u597d\u7684\u65b9\u5f0f\u3002 ./bin/spark-shell --master local[2] --master\u9009\u9879\u786e\u5b9a\u4e86 cluster\u7684master\u7684URL \uff0clocal\u5728\u672c\u5730\u8fd0\u884c\u4e00\u4e2a\u7ebf\u7a0b\uff0clocal[N]\u5728\u672c\u5730\u8fd0\u884cN\u4e2a\u7ebf\u7a0b\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528local\u6765\u542f\u52a8\u6d4b\u4e00\u4e0b\u8fd9\u70b9\u3002\u4f7f\u7528--help\u9009\u9879\u53ef\u4ee5\u83b7\u5f97\u6240\u6709\u7684\u9009\u9879\u3002 Spark\u4e5f\u63d0\u4f9b\u4e86Python API\u3002\u8981\u5728Python\u63a5\u53d7\u5668\u4e2d\u8fd0\u884cSpark\uff0c\u4f7f\u7528bin/pyspark ./bin/pyspark --master local[2] \u4ece1.4\u5f00\u59cbSpark\u4e5f\u63d0\u4f9b\u4e86\u5b9e\u9a8c\u6027\u7684 R API \uff08\u53ea\u5305\u542b\u4e86DataFrames APIs\uff09\u3002\u8981\u5728R\u89e3\u91ca\u5668\u4e2d\u8fd0\u884cSpark\uff0c\u4f7f\u7528 bin/sparkR : ./bin/sparkR --master local[2] \u4e5f\u63d0\u4f9b\u4e86R\u8bed\u8a00\u7684\u6837\u4f8b\u5e94\u7528\u7a0b\u5e8f\u3002\u4f8b\u5982\uff1a ./bin/spark-submit examples/src/main/r/dataframe.R \u767b\u9646cluster \u00b6 cluster mode overview \u89e3\u91ca\u4e86\u8fd0\u884ccluster\u7684\u5173\u952e\u6982\u5ff5\u3002Spark\u53ef\u4ee5\u81ea\u5df1\u8fd0\u884c\uff0c\u4e5f\u53ef\u4ee5\u4e0e\u51e0\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684cluster manager\u4e00\u8d77\u8fd0\u884c\u3002\u5f53\u524d\u63d0\u4f9b\u4e86\u51e0\u4e2a\u53d1\u5e03\u7684\u9009\u9879\uff1a \u72ec\u7acb\u8fd0\u884c\u6a21\u5f0f\u53d1\u5e03 \u5728\u79c1\u6709cluster\u4e0a\u53d1\u5e03Spark\u6700\u7b80\u5355\u7684\u65b9\u5f0f Apache Mesos Hadoop YARN \u8bfb\u5b8c\u8fd9\u7bc7\u6587\u6863\u63a5\u4e0b\u6765\u53bb\u54ea\u91cc \u00b6 Programming Guides: \u00b6 \u5feb\u901f\u5f00\u59cb : \u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0bSpark API; Spark\u7f16\u7a0b\u6307\u5bfc : \u5404\u79cd\u8bed\u8a00(Scala, Java, Python, R)\u8be6\u7ec6\u7684overview \u57fa\u4e8eSpark\u7684\u6a21\u5757: Spark Streaming : \u5b9e\u65f6\u5904\u7406\u6570\u636e\u6d41 Spark SQL, Datasets, and DataFrames : \u652f\u6301\u7ed3\u6784\u5316\u6570\u636e\u548c\u5173\u7cfb\u67e5\u8be2 MLlib : \u5185\u7f6e\u7684\u673a\u5668\u5b66\u4e60\u7684\u5e93 GraphX : Spark\u56fe\u8868\u5904\u7406\u7684\u6700\u65b0\u7684API API Docs: \u00b6 Spark Scala API (Scaladoc) Spark Java API (Javadoc) Spark Python API (Sphinx) Spark R API (Roxygen2) \u53d1\u5e03\u6307\u5bfc: \u00b6 Cluster Overview : \u4ecb\u7ecd\u5f53\u8fd0\u884ccluster\u7684\u65f6\u5019\uff0c\u4f60\u9700\u8981\u4e86\u89e3\u7684\u6982\u5ff5\u548c\u7ec4\u4ef6 \u63d0\u4ea4\u5e94\u7528 : \u4ecb\u7ecd\u6253\u5305\u548c\u53d1\u5e03\u5e94\u7528 \u53d1\u5e03\u6a21\u5f0f: Amazon EC2 : \u4ecb\u7ecd\u4e00\u4e9b\u811a\u672c\u5e2e\u4f60\u57285\u5206\u949f\u5185\u767b\u9646\u8fd0\u884c\u5728EC2\u4e0a\u7684cluster \u72ec\u7acb\u53d1\u5e03\u6a21\u5f0f : \u4ecb\u7ecd\u4e0d\u4f7f\u7528\u7b2c\u4e09\u65b9\u96c6\u7fa4\u7ba1\u7406\u8f6f\u4ef6\u5feb\u901f\u767b\u9646\u4e00\u4e2a\u72ec\u7acb\u7684cluster Mesos : \u4ecb\u7ecd\u53d1\u5e03\u4e00\u4e2a\u4f7f\u7528Apache Mesos\u7684cluster YARN : \u4ecb\u7ecd\u5728Hadoop NextGen (YARN)\u4e0a\u53d1\u5e03Spark \u5176\u5b83\u6587\u6863: \u00b6 \u914d\u7f6e \u76d1\u63a7 : \u76d1\u63a7\u5e94\u7528\u7a0b\u5e8f\u7684\u884c\u4e3a \u901a\u4fe1 : \u4f18\u5316\u6027\u80fd\u548c\u5185\u5b58\u5360\u7528\u7684\u6700\u4f73\u5b9e\u8df5 \u5de5\u4f5c\u8c03\u5ea6 : \u5728Spark\u5e94\u7528\u4e4b\u95f4\u6216\u8005\u5e94\u7528\u5185\u90e8\u8c03\u5ea6\u8d44\u6e90 \u5b89\u5168\u6027 \u786c\u4ef6\u51c6\u5907 : \u63a8\u8350\u7684\u96c6\u7fa4\u786c\u4ef6 \u4e0e\u5176\u5b83\u5b58\u50a8\u7cfb\u7edf\u96c6\u6210: OpenStack Swift \u7f16\u8bd1Spark : \u4f7f\u7528Maven\u7f16\u8bd1 Contributing to Spark \u7b2c\u4e09\u65b9\u9879\u76ee : \u76f8\u5173\u7684Spark\u9879\u76ee \u5916\u90e8\u8d44\u6e90: \u00b6 Spark Homepage Spark Wiki Spark\u793e\u533a \u8d44\u6e90, \u4ee5\u53ca\u672c\u5730\u4f1a\u8bae StackOverflow tag apache-spark \u90ae\u4ef6\u5217\u8868 : \u63d0\u95ee\u5173\u4e8eSpark\u7684\u95ee\u9898 AMP Camps : \u4e00\u4e9b\u5217\u5728\u7f8e\u56fd\u4f2f\u514b\u5229\u7684\u8bad\u7ec3\u8425\uff0c\u4e3b\u8981\u8ba8\u8bba\u5173\u4e8eSpark, Spark Streaming, Mesos\u7b49\u7b49\u7684\u7279\u6027\u548c\u8bad\u7ec3. \u89c6\u9891 , \u5e7b\u706f\u7247 \u4ee5\u53ca \u7ec3\u4e60 \u5728\u7ebf\u4e0a\u90fd\u662f\u514d\u8d39\u7684\u3002 Code Examples : \u66f4\u591a\u6837\u4f8b\u5728Spark\u7684\u5b50\u6587\u4ef6\u5939 example \u4e0b\u9762\u90fd\u662f\u53ef\u7528\u7684 ( Scala , Java , Python , R )","title":"Spark"},{"location":"java%E5%90%8E%E7%AB%AF/Spark-Overview/#spark-overview","text":"Apache Spark\u662f\u4e00\u4e2a\u5feb\u901f\u5e76\u4e14\u901a\u7528\u7684\u96c6\u7fa4\u8ba1\u7b97\u7cfb\u7edf\u3002\u5b83\u63d0\u4f9b\u4e86high level\u7684Java, Scala, Python \u548c R \u8bed\u8a00\u7684api\uff0c\u4ee5\u53ca\u4e00\u4e2a\u7ecf\u8fc7\u4f18\u5316\u7684\u652f\u6301\u901a\u7528\u56fe\u8868\u7684\u5f15\u64ce\u3002\u5b83\u4e5f\u652f\u6301\u975e\u5e38\u4e30\u5bcc\u7684\u5de5\u5177\u5e93\uff0c\u4f8b\u5982 Spark SQL \u7528\u4e8esql\u548c\u7ed3\u6784\u5316\u6570\u636e\u7684\u5904\u7406\uff0c MLlib \u7528\u4e8e\u673a\u5668\u5b66\u4e60\uff0c GraphX \u7528\u4e8e\u5904\u7406\u56fe\uff0c\u4ee5\u53ca Spark Streaming","title":"Spark Overview(\u7ffb\u8bd1)"},{"location":"java%E5%90%8E%E7%AB%AF/Spark-Overview/#_1","text":"\u4ece \u4e0b\u8f7d\u9875 \u83b7\u53d6Spark\u3002\u8fd9\u4e2a\u6587\u6863\u5bf9\u5e94\u4e8eSpark 2.0.2. Spark\u4f7f\u7528Hadoop\u4e3aHDFS\u548cYARN\u505a\u7684\u5ba2\u6237\u7aef\u5e93\u3002\u4e0b\u8f7d\u7684\u538b\u7f29\u6587\u4ef6\u6253\u5305\u4e86\u4e00\u4e9b\u6d41\u884c\u7248\u672c\u7684Hadoop\u3002\u7528\u6237\u4e5f\u53ef\u4ee5\u4e0b\u8f7dHadoop\u514d\u8d39\u7248\u7684\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u5e76\u901a\u8fc7 \u53c2\u6570\u5316Spark\u7684classpath \u6765\u4f7f\u7528\u4efb\u610f\u7248\u672c\u7684Hadoop\u6765\u8fd0\u884cSpark \u5982\u679c\u4f60\u60f3\u7f16\u8bd1Spark\u7684\u6e90\u7801\uff0c\u8bbf\u95ee Build Spark Spark\u65e2\u53ef\u4ee5\u8fd0\u884c\u5728Windows, Unix, Mac OS\u7b49\u7cfb\u7edf\u4e2d\u3002\u5728\u672c\u5730\u8fd0\u884cSpark\u662f\u975e\u5e38\u7b80\u5355\u7684--\u4f60\u53ea\u9700\u8981\u5b89\u88c5\u4e86java\uff0c\u5e76JAVA_HOME\u73af\u5883\u5373\u53ef\u3002 Spark\u80fd\u591f\u8fd0\u884c\u5728Java 7+, Python 2.6+/3.4+ \u4ee5\u53ca R 3.1+\u3002Spark 2.0.2\u63d0\u4f9b\u7684Scala API\u9700\u8981\u4f7f\u7528 Scala 2.11\u3002\u8fd9\u610f\u5473\u7740\u4f60\u9700\u8981\u4e00\u4e2a\u517c\u5bb9Scala 2.11\u7684\u7248\u672c\u3002","title":"\u4e0b\u8f7d"},{"location":"java%E5%90%8E%E7%AB%AF/Spark-Overview/#shell","text":"Spark \u6709\u4e00\u7cfb\u5217\u7684\u6837\u4f8b\u7a0b\u5e8f\u3002Scala, Java, Python \u548c R\u7684\u4f8b\u5b50\u5728examples/src/main\u6587\u4ef6\u5939\u4e0b\u9762\u3002\u4e3a\u4e86\u8fd0\u884cJava\u6216\u8005Scala\u7684\u6837\u4f8b\u7a0b\u5e8f\uff0c\u5728Spark\u4e00\u7ea7\u76ee\u5f55\u4e0b\u4f7f\u7528 bin/run-example <class> [params] (\u5728\u5e55\u540e\uff0c\u8fd9\u6761\u547d\u4ee4\u8c03\u7528\u4e86\u5176\u5b83\u901a\u7528\u7684 spark-submit \u811a\u672c \u6765\u767b\u9646\u5e94\u7528\u7a0b\u5e8f )\u3002\u4f8b\u5982\uff0c ./bin/run-example SparkPi 10 \u4f60\u4e5f\u53ef\u4ee5\u901a\u8fc7Scala Shell\u6765\u8fd0\u884cSpark\u3002\u8fd9\u662f\u5b66\u4e60\u6846\u67b6\u975e\u5e38\u597d\u7684\u65b9\u5f0f\u3002 ./bin/spark-shell --master local[2] --master\u9009\u9879\u786e\u5b9a\u4e86 cluster\u7684master\u7684URL \uff0clocal\u5728\u672c\u5730\u8fd0\u884c\u4e00\u4e2a\u7ebf\u7a0b\uff0clocal[N]\u5728\u672c\u5730\u8fd0\u884cN\u4e2a\u7ebf\u7a0b\u3002\u4f60\u53ef\u4ee5\u4f7f\u7528local\u6765\u542f\u52a8\u6d4b\u4e00\u4e0b\u8fd9\u70b9\u3002\u4f7f\u7528--help\u9009\u9879\u53ef\u4ee5\u83b7\u5f97\u6240\u6709\u7684\u9009\u9879\u3002 Spark\u4e5f\u63d0\u4f9b\u4e86Python API\u3002\u8981\u5728Python\u63a5\u53d7\u5668\u4e2d\u8fd0\u884cSpark\uff0c\u4f7f\u7528bin/pyspark ./bin/pyspark --master local[2] \u4ece1.4\u5f00\u59cbSpark\u4e5f\u63d0\u4f9b\u4e86\u5b9e\u9a8c\u6027\u7684 R API \uff08\u53ea\u5305\u542b\u4e86DataFrames APIs\uff09\u3002\u8981\u5728R\u89e3\u91ca\u5668\u4e2d\u8fd0\u884cSpark\uff0c\u4f7f\u7528 bin/sparkR : ./bin/sparkR --master local[2] \u4e5f\u63d0\u4f9b\u4e86R\u8bed\u8a00\u7684\u6837\u4f8b\u5e94\u7528\u7a0b\u5e8f\u3002\u4f8b\u5982\uff1a ./bin/spark-submit examples/src/main/r/dataframe.R","title":"\u8fd0\u884c\u4f8b\u5b50\u548cshell"},{"location":"java%E5%90%8E%E7%AB%AF/Spark-Overview/#cluster","text":"cluster mode overview \u89e3\u91ca\u4e86\u8fd0\u884ccluster\u7684\u5173\u952e\u6982\u5ff5\u3002Spark\u53ef\u4ee5\u81ea\u5df1\u8fd0\u884c\uff0c\u4e5f\u53ef\u4ee5\u4e0e\u51e0\u4e2a\u5df2\u7ecf\u5b58\u5728\u7684cluster manager\u4e00\u8d77\u8fd0\u884c\u3002\u5f53\u524d\u63d0\u4f9b\u4e86\u51e0\u4e2a\u53d1\u5e03\u7684\u9009\u9879\uff1a \u72ec\u7acb\u8fd0\u884c\u6a21\u5f0f\u53d1\u5e03 \u5728\u79c1\u6709cluster\u4e0a\u53d1\u5e03Spark\u6700\u7b80\u5355\u7684\u65b9\u5f0f Apache Mesos Hadoop YARN","title":"\u767b\u9646cluster"},{"location":"java%E5%90%8E%E7%AB%AF/Spark-Overview/#_2","text":"","title":"\u8bfb\u5b8c\u8fd9\u7bc7\u6587\u6863\u63a5\u4e0b\u6765\u53bb\u54ea\u91cc"},{"location":"java%E5%90%8E%E7%AB%AF/Spark-Overview/#programming-guides","text":"\u5feb\u901f\u5f00\u59cb : \u7b80\u5355\u4ecb\u7ecd\u4e00\u4e0bSpark API; Spark\u7f16\u7a0b\u6307\u5bfc : \u5404\u79cd\u8bed\u8a00(Scala, Java, Python, R)\u8be6\u7ec6\u7684overview \u57fa\u4e8eSpark\u7684\u6a21\u5757: Spark Streaming : \u5b9e\u65f6\u5904\u7406\u6570\u636e\u6d41 Spark SQL, Datasets, and DataFrames : \u652f\u6301\u7ed3\u6784\u5316\u6570\u636e\u548c\u5173\u7cfb\u67e5\u8be2 MLlib : \u5185\u7f6e\u7684\u673a\u5668\u5b66\u4e60\u7684\u5e93 GraphX : Spark\u56fe\u8868\u5904\u7406\u7684\u6700\u65b0\u7684API","title":"Programming Guides:"},{"location":"java%E5%90%8E%E7%AB%AF/Spark-Overview/#api-docs","text":"Spark Scala API (Scaladoc) Spark Java API (Javadoc) Spark Python API (Sphinx) Spark R API (Roxygen2)","title":"API Docs:"},{"location":"java%E5%90%8E%E7%AB%AF/Spark-Overview/#_3","text":"Cluster Overview : \u4ecb\u7ecd\u5f53\u8fd0\u884ccluster\u7684\u65f6\u5019\uff0c\u4f60\u9700\u8981\u4e86\u89e3\u7684\u6982\u5ff5\u548c\u7ec4\u4ef6 \u63d0\u4ea4\u5e94\u7528 : \u4ecb\u7ecd\u6253\u5305\u548c\u53d1\u5e03\u5e94\u7528 \u53d1\u5e03\u6a21\u5f0f: Amazon EC2 : \u4ecb\u7ecd\u4e00\u4e9b\u811a\u672c\u5e2e\u4f60\u57285\u5206\u949f\u5185\u767b\u9646\u8fd0\u884c\u5728EC2\u4e0a\u7684cluster \u72ec\u7acb\u53d1\u5e03\u6a21\u5f0f : \u4ecb\u7ecd\u4e0d\u4f7f\u7528\u7b2c\u4e09\u65b9\u96c6\u7fa4\u7ba1\u7406\u8f6f\u4ef6\u5feb\u901f\u767b\u9646\u4e00\u4e2a\u72ec\u7acb\u7684cluster Mesos : \u4ecb\u7ecd\u53d1\u5e03\u4e00\u4e2a\u4f7f\u7528Apache Mesos\u7684cluster YARN : \u4ecb\u7ecd\u5728Hadoop NextGen (YARN)\u4e0a\u53d1\u5e03Spark","title":"\u53d1\u5e03\u6307\u5bfc:"},{"location":"java%E5%90%8E%E7%AB%AF/Spark-Overview/#_4","text":"\u914d\u7f6e \u76d1\u63a7 : \u76d1\u63a7\u5e94\u7528\u7a0b\u5e8f\u7684\u884c\u4e3a \u901a\u4fe1 : \u4f18\u5316\u6027\u80fd\u548c\u5185\u5b58\u5360\u7528\u7684\u6700\u4f73\u5b9e\u8df5 \u5de5\u4f5c\u8c03\u5ea6 : \u5728Spark\u5e94\u7528\u4e4b\u95f4\u6216\u8005\u5e94\u7528\u5185\u90e8\u8c03\u5ea6\u8d44\u6e90 \u5b89\u5168\u6027 \u786c\u4ef6\u51c6\u5907 : \u63a8\u8350\u7684\u96c6\u7fa4\u786c\u4ef6 \u4e0e\u5176\u5b83\u5b58\u50a8\u7cfb\u7edf\u96c6\u6210: OpenStack Swift \u7f16\u8bd1Spark : \u4f7f\u7528Maven\u7f16\u8bd1 Contributing to Spark \u7b2c\u4e09\u65b9\u9879\u76ee : \u76f8\u5173\u7684Spark\u9879\u76ee","title":"\u5176\u5b83\u6587\u6863:"},{"location":"java%E5%90%8E%E7%AB%AF/Spark-Overview/#_5","text":"Spark Homepage Spark Wiki Spark\u793e\u533a \u8d44\u6e90, \u4ee5\u53ca\u672c\u5730\u4f1a\u8bae StackOverflow tag apache-spark \u90ae\u4ef6\u5217\u8868 : \u63d0\u95ee\u5173\u4e8eSpark\u7684\u95ee\u9898 AMP Camps : \u4e00\u4e9b\u5217\u5728\u7f8e\u56fd\u4f2f\u514b\u5229\u7684\u8bad\u7ec3\u8425\uff0c\u4e3b\u8981\u8ba8\u8bba\u5173\u4e8eSpark, Spark Streaming, Mesos\u7b49\u7b49\u7684\u7279\u6027\u548c\u8bad\u7ec3. \u89c6\u9891 , \u5e7b\u706f\u7247 \u4ee5\u53ca \u7ec3\u4e60 \u5728\u7ebf\u4e0a\u90fd\u662f\u514d\u8d39\u7684\u3002 Code Examples : \u66f4\u591a\u6837\u4f8b\u5728Spark\u7684\u5b50\u6587\u4ef6\u5939 example \u4e0b\u9762\u90fd\u662f\u53ef\u7528\u7684 ( Scala , Java , Python , R )","title":"\u5916\u90e8\u8d44\u6e90:"},{"location":"java%E5%90%8E%E7%AB%AF/ZooKeeper-overview/","text":"ZooKeeper: \u5206\u5e03\u5f0f\u5e94\u7528\u7684\u5206\u5e03\u5f0f\u534f\u8c03\u670d\u52a1 \u00b6 ZooKeeper\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7684\uff0c\u5f00\u6e90\u7684\uff0c\u534f\u8c03\u5206\u5e03\u5f0f\u5e94\u7528\u7684service. \u5b83\u66b4\u9732\u4e86\u4e00\u7ec4\u7b80\u5355\u7684\u539f\u8bed\uff0c\u5206\u5e03\u5f0f\u5e94\u7528\u53ef\u4ee5\u57fa\u4e8e\u8fd9\u4e9b\u539f\u8bed\u53ef\u4ee5\u6784\u5efa\u5e76\u5b9e\u73b0high level\u7684\u540c\u6b65\u670d\u52a1\uff0c\u914d\u7f6e\u7ba1\u7406\uff0c\u5206\u7ec4\u548c\u547d\u540d\u3002\u5b83\u6613\u7f16\u7a0b\uff0c\u4f7f\u7528\u7684\u6570\u636e\u6a21\u578b\u98ce\u683c\u4e0e\u6211\u4eec\u6240\u719f\u6089\u7684\u6587\u4ef6\u7cfb\u7edf\u6811\u7ed3\u6784\u975e\u5e38\u76f8\u4f3c\u3002\u5b83\u4f7f\u7528java\u6765\u8fd0\u884c\u5e76\u4e14\u5bf9java\u548cc\u90fd\u6709\u826f\u597d\u7684\u652f\u6301\u3002 \u4f17\u6240\u5468\u77e5\uff0c\u8981\u4f7f\u5f97Coordination services\uff08\u534f\u8c03\u670d\u52a1\uff09\u6b63\u786e\u662f\u975e\u5e38\u56f0\u96be\u7684\u3002Coordination services\u6709\u5f88\u591a\u975e\u5e38\u5bb9\u6613\u51fa\u9519\u7684\u5730\u65b9\uff0c\u4f8b\u5982\u8fb9\u754c\u6761\u4ef6\u548c\u6b7b\u9501\u3002ZooKeeper\u7684\u52a8\u673a\u5c31\u662f\u51cf\u5c11\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u590d\u6742\u6027\uff0c\u4e0d\u5fc5\u81ea\u5df1\u4ece\u5934\u5b9e\u73b0coordination services\u7684\u804c\u8d23\u3002 \u8bbe\u8ba1\u76ee\u6807 \u00b6 \u7b80\u5355 \u00b6 \u901a\u8fc7\u4e00\u4e2a\u5171\u4eab\u7684\u5206\u5c42\u6b21\u7684\u547d\u540d\u7a7a\u95f4\uff0cZookeeper\u5141\u8bb8\u5206\u5e03\u5f0f\u8fdb\u7a0b\u80fd\u591f\u4e92\u76f8\u534f\u8c03\u3002\u8fd9\u4e2a\u547d\u540d\u7a7a\u95f4\u7531\u767b\u8bb0\u7684\u6570\u636e\u8282\u70b9\u7ec4\u6210\uff0c\u7528zookeeper\u7684\u8bf4\u6cd5\uff0c\u5b83\u4eec\u975e\u5e38\u76f8\u4f3c\u4e8e\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u7684\u5173\u7cfb\u3002\u4e0e\u5178\u578b\u7684\u6587\u4ef6\u7cfb\u7edf\u4e0d\u540c\uff0c\u6587\u4ef6\u7cfb\u7edf\u88ab\u7528\u6765\u5b58\u50a8\u6570\u636e\uff0czookeeper\u7684\u6570\u636e\u662f\u653e\u5728\u5185\u5b58\u4e2d\u7684\uff0c\u8fd9\u610f\u5473\u7740zookeeper\u80fd\u591f\u5b9e\u73b0\u9ad8\u541e\u5410\u548c\u4f4e\u5ef6\u8fdf\u3002 zookeeper\u7684\u5b9e\u73b0\u7740\u91cd\u8003\u8651\u5e76\u4fdd\u8bc1\u9ad8\u6548\u6027\uff0c\u9ad8\u53ef\u9760\u6027\uff0c\u4e25\u683c\u7684\u987a\u5e8f\u8bbf\u95ee\u3002ZooKeeper\u7684\u9ad8\u6548\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u88ab\u7528\u5728\u5927\u89c4\u6a21\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u3002\u53ef\u9760\u6027\u80fd\u4fdd\u8bc1\u5b83\u4e0d\u4f1a\u56e0\u4e3a\u4e00\u4e2a\u8282\u70b9\u7684\u5931\u8d25\u800c\u5931\u8d25\u3002\u4e25\u683c\u7684\u987a\u5e8f\u6027\u610f\u5473\u7740\u590d\u6742\u7684\u540c\u6b65\u539f\u8bed\u80fd\u591f\u5728\u5ba2\u6237\u7aef\u88ab\u975e\u5e38\u7b80\u5355\u7684\u5b9e\u73b0\u3002 \u590d\u6742 \u00b6 \u4e0ezookeeper\u6240\u670d\u52a1\u7684\u4e0d\u540c\u7ebf\u7a0b\u4e00\u6837\uff0czookeeper\u610f\u56fe\u81ea\u8eab\u88ab\u590d\u5236\u5728\u4e00\u7cfb\u5217\u7684\u53eb\u505aensemble\u7684\u4e3b\u673a\u4e0a\u3002 \u56fe\u4e2d\u6240\u6709\u7684server\u7ec4\u6210\u4e86zookeeper\u670d\u52a1\uff0c\u5b83\u4eec\u5fc5\u987b\u4e92\u76f8\u77e5\u9053\u5f7c\u6b64\u3002\u5b83\u4eec\u5728\u5185\u5b58\u4e2d\u7ef4\u62a4\u4e86\u4e00\u4e2a\u955c\u50cf\u72b6\u6001\uff0c\u8fd9\u4e2a\u955c\u50cf\u4e0etransaction logs\u548csnapshots\u4e00\u8d77\u88ab\u6301\u4e45\u5316\u3002\u53ea\u8981\u5927\u591a\u6570\u7684server\u662f\u53ef\u7528\u7684\uff0czookeeper\u5c31\u4f1a\u662f\u53ef\u7528\u7684\u3002 Client \u8fde\u63a5\u5230\u4e00\u4e2a\u5355\u72ec\u7684zookeeper server\u4e0a\u3002\u8fd9\u4e2aclient\u7ef4\u62a4\u4e86tcp\u8fde\u63a5\uff0c\u8fd9\u4e2a\u8fde\u63a5\u53ef\u4ee5\u7528\u6765\u53d1\u9001request\uff0c\u83b7\u53d6response\uff0c\u83b7\u53d6watch events\uff0c\u4ee5\u53ca\u53d1\u9001heart beats. \u5982\u679c\u8fde\u5230server\u7684tcp\u8fde\u63a5\u65ad\u5f00\uff0cclient\u4f1a\u8fde\u5230\u5176\u5b83\u7684server. \u6709\u5e8f \u00b6 ZooKeeper\u4e3a\u6bcf\u6b21update\u64cd\u4f5c\u8bb0\u5f55\u4e00\u4e2a\u6570\u5b57\uff0c\u8fd9\u4e2a\u6570\u5b57\u4ee3\u8868\u4e86ZooKeeper\u4e8b\u7269\u7684\u987a\u5e8f\u3002\u540e\u7eed\u7684\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u987a\u5e8f\u6765\u5b9e\u73b0high level\u7684\u62bd\u8c61\uff0c\u4f8b\u5982\u540c\u6b65\u7684\u8bed\u4e49\u3002 \u5feb\u901f \u00b6 \u5728\u8bfb\u7684\u5de5\u4f5c\u8d1f\u8f7d\u4e3a\u4e3b\u7684\u65f6\u5019\uff0czookeeper\u975e\u5e38\u5feb\u3002ZooKeeper\u5e94\u7528\u8fd0\u884c\u5728\u6570\u4ee5\u5343\u8ba1\u7684\u673a\u5668\u4e0a\uff0c\u5728\u8bfb\u5199\u6bd4\u4f8b\u4e3a10:1\u7684\u65f6\u5019\u5b83\u7684\u8868\u73b0\u662f\u6700\u597d\u7684\u3002 \u6570\u636e\u6a21\u578b\u548c\u5c42\u6b21\u6027\u7684\u547d\u540d\u7a7a\u95f4 \u00b6 ZooKeeper\u63d0\u4f9b\u7684\u547d\u540d\u7a7a\u95f4\u6709\u70b9\u50cf\u6807\u51c6\u7684\u6587\u4ef6\u7cfb\u7edf\u3002name\u7531\u4e00\u7cfb\u5217\u88ab / \u5206\u5f00\u7684\u8def\u5f84\u5143\u7d20\u7ec4\u6210\u3002 zookeeper\u4e2d\u7684\u6bcf\u4e2anode\u7531\u4e00\u4e2apath\u6765\u6807\u8bc6\u3002 \u8282\u70b9\u548c\u4e34\u65f6\u6027\u8282\u70b9(ephemeral nodes) \u00b6 \u4e0e\u6807\u51c6\u7684\u6587\u4ef6\u7cfb\u7edf\u4e0d\u540c\u7684\u662f\uff0cZooKeeper\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u65e2\u53ef\u4ee5\u6709\u6570\u636e\u4e5f\u53ef\u4ee5\u6709\u5b50\u8282\u70b9\u3002\u5b83\u5c31\u50cf\u4e00\u4e2a\u5141\u8bb8\u6587\u4ef6\u4e5f\u53ef\u4ee5\u540c\u65f6\u662f\u8def\u5f84\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\uff08zookeeper\u88ab\u8bbe\u8ba1\u7528\u6765\u5b58\u50a8\u534f\u8c03\u7684\u6570\u636e\u6709\uff1a\u72b6\u6001\u4fe1\u606f\uff0c\u914d\u7f6e\uff0c\u5730\u5740\u7b49\u7b49\uff0c\u6240\u4ee5\u5b58\u50a8\u5728\u6bcf\u4e2anode\u4e2d\u7684\u6570\u636e\u662f\u975e\u5e38\u5c0f\u7684\uff0c\u5728KB\u8303\u56f4\u4e4b\u5185\u3002\uff09\u4e3a\u4e86\u4f7f\u8868\u8fbe\u6e05\u6670\uff0c\u5f53\u6211\u4eec\u8ba8\u8bbazookeeper\u6570\u636e\u8282\u70b9\u7684\u65f6\u5019\u6211\u4eec\u7528znode\u6765\u8868\u793a\u3002 znode\u7ef4\u62a4\u4e86\u4e00\u4e2a\u7edf\u8ba1\u7ed3\u6784\uff0c\u4e3a\u4e86\u4fdd\u8bc1cache\u7684\u6709\u6548\u548c\u534f\u8c03update\uff0c\u91cc\u9762\u5305\u542b\u4e86\u6570\u636e\u6539\u53d8\u7684\u7248\u672c\u53f7\uff0c\u8bbf\u95ee\u63a7\u5236\u5217\u8868\uff08ACL\uff09\u6539\u53d8\u7684\u7248\u672c\u53f7\uff0c\u65f6\u95f4\u6233\uff08timestamp\uff09\u7684\u7248\u672c\u53f7\u3002\u6bcf\u6b21znode\u4e2d\u7684\u6570\u636e\u6539\u53d8\u7684\u65f6\u5019\uff0c\u7248\u672c\u53f7\u5c06\u4f1a\u589e\u52a0\u3002\u4f8b\u5982\uff0cclient\u83b7\u53d6\u6570\u636e\u7684\u65f6\u5019\u5b83\u4e5f\u4f1a\u6536\u5230\u6570\u636e\u7684\u7248\u672c\u53f7\u3002 znode\u547d\u540d\u7a7a\u95f4\u4e2d\u5b58\u50a8\u7684\u6570\u636e\u7684\u8bfb\u5199\u662f\u81ea\u52a8\u5b8c\u6210\u7684\u3002\u8bfb\u64cd\u4f5c\u83b7\u53d6znode\u7684\u6570\u636e\uff0c\u5199\u5c06\u4f1a\u66ff\u4ee3znode\u4e2d\u6240\u6709\u7684\u6570\u636e\u3002\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u8bbf\u95ee\u63a7\u5236\u5217\u8868\uff08ACL\uff09\u7528\u6765\u9650\u5236\u8c01\u53ef\u4ee5\u505a\u4ec0\u4e48\u3002 ZooKeeper\u4e5f\u6709\u4e34\u65f6\u6027\u8282\u70b9(ephemeral nodes)\u7684\u6982\u5ff5\u3002\u53ea\u8981\u521b\u5efa\u8fd9\u4e9bznode\u7684session\u662factive\u7684\uff0c\u8fd9\u4e9bznode\u5c31\u5b58\u5728\u3002\u5f53session\u7ed3\u675f\u7684\u65f6\u5019znode\u4e5f\u88ab\u5220\u9664\u4e86\u3002\u5f53\u4f60\u60f3\u8981\u5b9e\u73b0[tbd]\u7684\u65f6\u5019Ephemeral nodes\u662f\u975e\u5e38\u6709\u7528\u7684\u3002(\u8fd9\u91cc\u7684[tbd]\u662fto be discussion\u7684\u7f29\u5199\uff0c\u6709\u5f85\u8ba8\u8bba\u7684\u610f\u601d) Conditional updates\u548cwatches \u00b6 zookeeper\u652f\u6301watch\u7684\u6982\u5ff5\u3002client\u53ef\u4ee5\u5728znode\u4e0a\u8bbe\u7f6e\u4e00\u4e2awatch\u3002\u5f53znode\u6539\u53d8\u7684\u65f6\u5019watch\u5c06\u4f1a\u88ab\u89e6\u53d1\uff08trigger\uff09\u548c\u5220\u9664\u3002\u5728watch\u88ab\u89e6\u53d1\u4e4b\u540e\uff0cclient\u4f1a\u6536\u5230\u4e00\u4e2a\u6570\u636e\u5305\u544a\u8bc9\u5b83znode\u5df2\u7ecf\u53d8\u4e86\u3002\u5982\u679cclient\u548czookeeper\u4e2d\u67d0\u4e00\u4e2aserver\u7684\u8fde\u63a5\u65ad\u5f00\u4e86\uff0cclient\u5c06\u4f1a\u6536\u5230\u4e00\u4e2a\u672c\u5730\u7684\u901a\u77e5\u3002\u8fd9\u5c06\u6709\u5f85\u8ba8\u8bba\u3002 \u4fdd\u8bc1 \u00b6 zookeeper\u662f\u975e\u5e38\u5feb\u901f\u548c\u7b80\u5355\u7684\u3002\u5c3d\u7ba1\u5b83\u7684\u76ee\u6807\u662f\u6210\u4e3a\u6784\u5efa\u66f4\u4e3a\u590d\u6742service\u7684\u57fa\u7840\uff0c\u4f8b\u5982\u540c\u6b65\uff0c\u5b83\u4e5f\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684\u4fdd\u8bc1\u3002\u5b83\u4eec\u662f\uff1a \u987a\u5e8f\u4e00\u81f4\u6027 \u539f\u5b50\u6027 \u5355\u7cfb\u7edf\u955c\u50cf - \u65e0\u8bbaclient\u8fde\u63a5\u5230\u54ea\u4e2aserver\u5b83\u4eec\u770b\u5230\u7684\u89c6\u56fe\u90fd\u662f\u76f8\u540c\u7684 \u9ad8\u53ef\u7528 - \u4e00\u65e6update\u88abapply\u4e86\uff0c\u5b83\u5c06\u4f1a\u4ece\u90a3\u4e2a\u65f6\u95f4\u70b9\u6301\u4e45\u5316\u76f4\u5230client\u91cd\u5199\u4e86update \u53ca\u65f6\u6027 - \u4fdd\u8bc1client\u770b\u5230\u7684\u7cfb\u7edf\u7684\u89c6\u56fe\u5728\u4e00\u5b9a\u65f6\u95f4\u5185\u88ab\u66f4\u65b0 \u66f4\u591a\u65b9\u9762\u6709\u5f85\u8ba8\u8bba \u7b80\u5355\u7684api \u00b6 ZooKeeper\u7684\u4e00\u4e2a\u8bbe\u8ba1\u76ee\u6807\u662f\u63d0\u4f9b\u7b80\u5316\u7684\u7f16\u7a0b\u63a5\u53e3\u3002\u5b83\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c create \u5728\u6811\u79cd\u7684\u4e00\u4e2a\u8282\u70b9\u521b\u5efanode delete \u5220\u9664\u4e00\u4e2anode exists \u68c0\u67e5\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u662f\u5426\u5b58\u5728\u4e00\u4e2anode get data \u4ecenode\u4e2d\u8bfb\u53d6\u6570\u636e set data \u5411node\u4e2d\u5199\u5165\u6570\u636e get children \u83b7\u53d6\u4e00\u4e2a\u8282\u70b9\u6240\u6709\u7684\u5b50\u8282\u70b9 sync \u7b49\u5f85\u6570\u636e\u590d\u5236\u5b8c\u6210 \u5bf9\u4e8e\u5728\u8fd9\u4e9b\u65b9\u9762\u7684\u6df1\u5ea6\u8ba8\u8bba\uff0c\u4ee5\u53ca\u5982\u4f55\u5b9e\u73b0high level\u7684\u64cd\u4f5c\uff0c\u4ecd\u65e7\u6709\u5f85\u8ba8\u8bba\u3002 \u5b9e\u73b0 \u00b6 zookeeper\u7ec4\u4ef6 \u663e\u793a\u4e86high level\u7684zookeeper\u670d\u52a1\u7684\u7ec4\u4ef6\u3002\u9664\u4e86\u8bf7\u6c42\u5904\u7406\u5668\uff08request processor\uff09\u4e4b\u5916\uff0c\u6bcf\u4e2a\u7ec4\u6210zookeeper service\u7684server\u90fd\u590d\u5236\u6bcf\u4e00\u4efd\u7ec4\u4ef6\u81ea\u5df1\u4f7f\u7528\u3002 replicated database\u662f\u4e00\u4e2a\u7ef4\u62a4\u6574\u4e2a\u6570\u636e\u6811\u7684\u5185\u5b58\u6570\u636e\u5e93\u3002\u4e3a\u4e86\u53ef\u6062\u590d\uff0cupdate\u88ab\u8bb0\u5f55\u5728\u78c1\u76d8\u4e0a\uff0cwrite\u5728\u88ab\u5e94\u7528\u5230\u5185\u5b58\u6570\u636e\u5e93\u4e4b\u524d\u88ab\u5e8f\u5217\u5316\u5230\u78c1\u76d8\u4e0a\u3002 \u6bcf\u4e2azookeeper server \u670d\u52a1\u591a\u4e2aclient\u3002client\u53ea\u8fde\u63a5\u5230\u4e00\u4e2a\u8981\u63d0\u4ea4request\u7684server\u4e0a\u3002read\u8bf7\u6c42\u4ece\u6bcf\u4e2aserver\u5185\u5b58\u6570\u636e\u5e93\u4e2d\u7684\u526f\u672c\u4e2d\u62ff\u6570\u636e\u3002\u6539\u53d8service\u72b6\u6001\u7684\u8bf7\u6c42\u4ee5\u53ca\u5199\u8bf7\u6c42\u7ecf\u8fc7\u534f\u5546\u534f\u8bae\u6765\u5904\u7406\u3002 \u4f5c\u4e3a\u534f\u5546\u534f\u8bae\u7684\u4e00\u90e8\u5206\uff0c\u6240\u6709\u6765\u81eaclient\u7684write\u8bf7\u6c42\u90fd\u88ab\u8f6c\u53d1\u5230\u4e00\u4e2a\u5355\u72ec\u7684\u53eb\u505aleader\u7684server\u4e0a\u3002zookeeper\u4e2d\u5269\u4f59\u7684server\u90fd\u53eb\u505afollower\uff0c\u4ed6\u4eec\u53ea\u80fd\u63a5\u53d7leader\u7684\u8c03\u914d\u3002\u6d88\u606f\u5c42\u8d1f\u8d23\u66ff\u4ee3\u5931\u8d25\u7684leader\u548c\u540c\u6b65follower\u4e0eleader\u4e00\u81f4\u3002 zookeeper\u4f7f\u7528\u7ecf\u5178\u7684\u539f\u5b50\u6027\u7684\u6d88\u606f\u534f\u8bae\u3002\u56e0\u4e3a\u6d88\u606f\u5c42\u662f\u539f\u5b50\u6027\u7684\uff0czookeeper\u80fd\u591f\u4fdd\u8bc1\u672c\u5730\u5907\u4efd\u4e0d\u4f1a\u4ea7\u751f\u8bef\u5dee\u3002\u5f53leader\u63a5\u6536\u5230write\u8bf7\u6c42\u4e4b\u540e\uff0c\u5b83\u8ba1\u7b97\u7cfb\u7edf\u7684\u72b6\u6001\u662f\u4ec0\u4e48\uff0c\u4ec0\u4e48\u65f6\u5019\u5e94\u7528\u8fd9\u4e2a\u5199\u8bf7\u6c42\u5c06\u5b83\u8f6c\u6362\u6210\u4e8b\u52a1\u6765\u6355\u6349\u8fd9\u4e2a\u65b0\u7684\u72b6\u6001\u3002 \u7528\u6cd5 \u00b6 ZooKeeper\u7684\u7f16\u7a0b\u63a5\u53e3\u6709\u610f\u8bbe\u8ba1\u5f97\u5f88\u7b80\u5355\u3002\u4f7f\u7528\u5b83\u4f60\u53ef\u4ee5\u5b9e\u73b0high level\u7684\u547d\u4ee4\u64cd\u4f5c\uff0c\u4f8b\u5982\u540c\u6b65\u7684\u8bed\u4e49\uff0c\u7ec4\u5173\u7cfb\uff0c\u6743\u9650\uff0c\u7b49\u7b49\u3002Some distributed applications have used it to: [tbd: add uses from white paper and video presentation.] For more information, see [tbd] \u6548\u7387 \u00b6 zookeeper\u88ab\u8bbe\u8ba1\u5f97\u5f88\u9ad8\u6548\u3002\u4f46\u786e\u5b9e\u5982\u6b64\u5417\uff1fYahoo!\u7814\u7a76\u4e2d\u5fc3\u7684zookeeper\u5f00\u53d1\u56e2\u961f\u8bf4\u662f\u7684\u3002\u5f53\u5e94\u7528\u7a0b\u5e8f\u8bfb\u7684\u6570\u91cf\u8fdc\u8d85\u8fc7\u5199\u64cd\u4f5c\u7684\u6570\u91cf\u65f6\uff0c\u5b83\u662f\u975e\u5e38\u9ad8\u6548\u7684\uff0c\u56e0\u4e3a\u5199\u64cd\u4f5c\u4f1a\u540c\u6b65\u6240\u6709server\u7684\u72b6\u6001\u3002\uff08\u5728coordination service\u4e2d\u8fd9\u79cdcase\u662f\u975e\u5e38\u5178\u578b\u7684\uff09 \u8fd9\u662fZooKeeper release 3.2\u7684\u4e00\u5f20\u541e\u5410\u7387\u7684\u56fe\uff0c\u5b83\u8fd0\u884c\u7684server\u662fdual 2Ghz Xeon \u548ctwo SATA 15K RPM drives\u3002\u4e00\u4e2a\u9a71\u52a8\u5668\u88ab\u7528\u4f5c\u4e13\u7528zookeeper\u8bb0\u5f55\u8bbe\u5907\u3002zookeeper\u7684\u5feb\u7167\u88ab\u5199\u5230\u7cfb\u7edf\u7684\u9a71\u52a8\u5668\u4e2d\u30021k read\u548cwrite\u8bf7\u6c42\u3002Servers\u8868\u660e\u4e86ensemble\u7684\u5927\u5c0f\uff0c\u4e5f\u5c31\u662fzookeeper\u4e2dserver\u7684\u6570\u91cf\u3002\u5927\u7ea6\u670930\u53f0\u5176\u5b83\u7684\u670d\u52a1\u5668\u6765\u6a21\u4effclient\u3002zookeeper ensemble\u88ab\u914d\u7f6e\u6210\u4e0d\u5141\u8bb8\u6765\u81eaclient\u7684\u8fde\u63a5\u3002 \u4e0e3.1\u76f8\u6bd43.2\u7248\u672c\u4e2d\u8bfb\u5199\u7684performance\u63d0\u9ad8\u4e86\u4e24\u500d \u57fa\u51c6\u70b9\u4e5f\u8868\u660e\u5b83\u662f\u53ef\u4fe1\u7684\u3002\u4e0b\u9762\u663e\u793a\u4e86\u600e\u6837\u9488\u5bf9\u4e0d\u540c\u7684\u5931\u8d25\u505a\u53d1\u5e03\u3002\u56fe\u4e2d\u6807\u8bb0\u7684\u4e8b\u4ef6\u662f\uff1a 1. follower\u7684\u5931\u8d25\u548c\u6062\u590d 2. \u4e0d\u540c\u7684follower\u7684\u5931\u8d25\u548c\u6062\u590d 3. leader\u7684\u6062\u590d 4. \u4e24\u4e2afollower\u7684\u5931\u8d25\u548c\u6062\u590d 5. \u53e6\u4e00\u4e2aleader\u7684\u5931\u8d25 \u53ef\u9760 \u00b6 \u4e3a\u4e86\u663e\u793a\u7cfb\u7edf\u7684\u884c\u4e3a\uff0c\u5728\u6211\u4eec\u8fd0\u884c7\u53f0\u673a\u5668\u7ec4\u6210\u7684zookeeper service\u7684\u65f6\u5019\u5931\u8d25\u88ab\u6ce8\u5165\u8fdb\u6765\u3002\u6211\u4eec\u4f7f\u7528\u4e0e\u4e4b\u524d\u76f8\u540c\u7684\u57fa\u51c6\u70b9\u8fd0\u884c\uff0c\u4f46\u662f\u8fd9\u6b21\u6211\u4eec\u4f7fwrite\u7684\u767e\u5206\u6bd4\u56fa\u5b9a\u572830%\uff0c\u8fd9\u4e2a\u6bd4\u7387\u662f\u6211\u4eec\u671f\u671b\u8d1f\u8f7d\u5546\u5b9a\u7684\u6bd4\u4f8b\u3002 \u8fd9\u5f20\u56fe\u4e2d\u6709\u4e00\u4e9b\u91cd\u8981\u7684\u6ce8\u610f\u70b9\u3002\u9996\u5148\uff0c\u5982\u679cfollower\u5931\u8d25\u5e76\u7acb\u5373\u6062\u590d\uff0czookeeper\u4ecd\u80fd\u591f\u7ef4\u62a4\u9ad8\u541e\u5410\u3002\u4f46\u53ef\u80fd\u66f4\u91cd\u8981\u7684\u662f\uff0cleader\u9009\u4e3e\u7b97\u6cd5\u80fd\u591f\u5141\u8bb8\u7cfb\u7edf\u8db3\u591f\u5feb\u5730\u6062\u590d\uff0c\u8fd9\u80fd\u591f\u963b\u6b62\u541e\u5410\u91cf\u7684\u964d\u4f4e\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0czookeeper\u4f7f\u7528\u5c11\u4e8e200ms\u7684\u65f6\u95f4\u9009\u4e3e\u4e00\u4e2a\u65b0\u7684leader\u3002\u7b2c\u4e09\u70b9\uff0c\u5f53follower\u6062\u590d\u7684\u65f6\u5019\uff0czookeeper\u80fd\u591f\u518d\u6b21\u63d0\u9ad8\u5904\u7406\u8bf7\u6c42\u7684\u541e\u5410\u91cf\u3002 zookeeper\u9879\u76ee \u00b6 zookeeper\u88ab\u6210\u529f\u7684\u7528\u5728\u8bb8\u591a\u7684\u5de5\u4e1a\u5b9e\u8df5\u4e2d\u3002Yahoo!\u4f7f\u7528\u5b83\u4f5c\u4e3aYahoo! Message Broker\u7684\u534f\u8c03\u548c\u5931\u8d25\u6062\u590d\u670d\u52a1\uff0cYahoo! Message Broker\u662f\u4e00\u4e2a\u5927\u89c4\u6a21\u7684\u53d1\u5e03-\u8ba2\u9605\u7cfb\u7edf\uff0c\u7ba1\u7406\u7740\u4e0a\u5343\u7684topic\u5907\u4efd\u548c\u6570\u636e\u4f20\u8f93\u3002Fetching Service for Yahoo! crawler\u4e5f\u4f7f\u7528\u5b83\uff0c\u4e5f\u662f\u62ff\u6765\u7ba1\u7406\u5931\u8d25\u6062\u590d\u3002Yahoo!\u7684\u4e00\u4e9b\u5e7f\u544a\u7cfb\u7edf\u4e5f\u4f7f\u7528zookeeper\u6765\u5b9e\u73b0\u9ad8\u53ef\u9760\u7684service\u3002 \u6b22\u8fce\u4efb\u4f55\u7528\u6237\u548c\u5f00\u53d1\u8005\u52a0\u5165\u5230\u793e\u533a\u8d21\u732e\u4f60\u4eec\u7684\u4e13\u4e1a\u77e5\u8bc6\u3002\u4ecehttp://zookeeper.apache.org/\u80fd\u591f\u83b7\u5f97\u66f4\u591a\u4fe1\u606f\u3002","title":"ZooKeeper"},{"location":"java%E5%90%8E%E7%AB%AF/ZooKeeper-overview/#zookeeper","text":"ZooKeeper\u662f\u4e00\u4e2a\u5206\u5e03\u5f0f\u7684\uff0c\u5f00\u6e90\u7684\uff0c\u534f\u8c03\u5206\u5e03\u5f0f\u5e94\u7528\u7684service. \u5b83\u66b4\u9732\u4e86\u4e00\u7ec4\u7b80\u5355\u7684\u539f\u8bed\uff0c\u5206\u5e03\u5f0f\u5e94\u7528\u53ef\u4ee5\u57fa\u4e8e\u8fd9\u4e9b\u539f\u8bed\u53ef\u4ee5\u6784\u5efa\u5e76\u5b9e\u73b0high level\u7684\u540c\u6b65\u670d\u52a1\uff0c\u914d\u7f6e\u7ba1\u7406\uff0c\u5206\u7ec4\u548c\u547d\u540d\u3002\u5b83\u6613\u7f16\u7a0b\uff0c\u4f7f\u7528\u7684\u6570\u636e\u6a21\u578b\u98ce\u683c\u4e0e\u6211\u4eec\u6240\u719f\u6089\u7684\u6587\u4ef6\u7cfb\u7edf\u6811\u7ed3\u6784\u975e\u5e38\u76f8\u4f3c\u3002\u5b83\u4f7f\u7528java\u6765\u8fd0\u884c\u5e76\u4e14\u5bf9java\u548cc\u90fd\u6709\u826f\u597d\u7684\u652f\u6301\u3002 \u4f17\u6240\u5468\u77e5\uff0c\u8981\u4f7f\u5f97Coordination services\uff08\u534f\u8c03\u670d\u52a1\uff09\u6b63\u786e\u662f\u975e\u5e38\u56f0\u96be\u7684\u3002Coordination services\u6709\u5f88\u591a\u975e\u5e38\u5bb9\u6613\u51fa\u9519\u7684\u5730\u65b9\uff0c\u4f8b\u5982\u8fb9\u754c\u6761\u4ef6\u548c\u6b7b\u9501\u3002ZooKeeper\u7684\u52a8\u673a\u5c31\u662f\u51cf\u5c11\u5206\u5e03\u5f0f\u5e94\u7528\u7684\u590d\u6742\u6027\uff0c\u4e0d\u5fc5\u81ea\u5df1\u4ece\u5934\u5b9e\u73b0coordination services\u7684\u804c\u8d23\u3002","title":"ZooKeeper: \u5206\u5e03\u5f0f\u5e94\u7528\u7684\u5206\u5e03\u5f0f\u534f\u8c03\u670d\u52a1"},{"location":"java%E5%90%8E%E7%AB%AF/ZooKeeper-overview/#_1","text":"","title":"\u8bbe\u8ba1\u76ee\u6807"},{"location":"java%E5%90%8E%E7%AB%AF/ZooKeeper-overview/#_2","text":"\u901a\u8fc7\u4e00\u4e2a\u5171\u4eab\u7684\u5206\u5c42\u6b21\u7684\u547d\u540d\u7a7a\u95f4\uff0cZookeeper\u5141\u8bb8\u5206\u5e03\u5f0f\u8fdb\u7a0b\u80fd\u591f\u4e92\u76f8\u534f\u8c03\u3002\u8fd9\u4e2a\u547d\u540d\u7a7a\u95f4\u7531\u767b\u8bb0\u7684\u6570\u636e\u8282\u70b9\u7ec4\u6210\uff0c\u7528zookeeper\u7684\u8bf4\u6cd5\uff0c\u5b83\u4eec\u975e\u5e38\u76f8\u4f3c\u4e8e\u6587\u4ef6\u548c\u6587\u4ef6\u5939\u7684\u5173\u7cfb\u3002\u4e0e\u5178\u578b\u7684\u6587\u4ef6\u7cfb\u7edf\u4e0d\u540c\uff0c\u6587\u4ef6\u7cfb\u7edf\u88ab\u7528\u6765\u5b58\u50a8\u6570\u636e\uff0czookeeper\u7684\u6570\u636e\u662f\u653e\u5728\u5185\u5b58\u4e2d\u7684\uff0c\u8fd9\u610f\u5473\u7740zookeeper\u80fd\u591f\u5b9e\u73b0\u9ad8\u541e\u5410\u548c\u4f4e\u5ef6\u8fdf\u3002 zookeeper\u7684\u5b9e\u73b0\u7740\u91cd\u8003\u8651\u5e76\u4fdd\u8bc1\u9ad8\u6548\u6027\uff0c\u9ad8\u53ef\u9760\u6027\uff0c\u4e25\u683c\u7684\u987a\u5e8f\u8bbf\u95ee\u3002ZooKeeper\u7684\u9ad8\u6548\u610f\u5473\u7740\u5b83\u53ef\u4ee5\u88ab\u7528\u5728\u5927\u89c4\u6a21\u7684\u5206\u5e03\u5f0f\u7cfb\u7edf\u4e2d\u3002\u53ef\u9760\u6027\u80fd\u4fdd\u8bc1\u5b83\u4e0d\u4f1a\u56e0\u4e3a\u4e00\u4e2a\u8282\u70b9\u7684\u5931\u8d25\u800c\u5931\u8d25\u3002\u4e25\u683c\u7684\u987a\u5e8f\u6027\u610f\u5473\u7740\u590d\u6742\u7684\u540c\u6b65\u539f\u8bed\u80fd\u591f\u5728\u5ba2\u6237\u7aef\u88ab\u975e\u5e38\u7b80\u5355\u7684\u5b9e\u73b0\u3002","title":"\u7b80\u5355"},{"location":"java%E5%90%8E%E7%AB%AF/ZooKeeper-overview/#_3","text":"\u4e0ezookeeper\u6240\u670d\u52a1\u7684\u4e0d\u540c\u7ebf\u7a0b\u4e00\u6837\uff0czookeeper\u610f\u56fe\u81ea\u8eab\u88ab\u590d\u5236\u5728\u4e00\u7cfb\u5217\u7684\u53eb\u505aensemble\u7684\u4e3b\u673a\u4e0a\u3002 \u56fe\u4e2d\u6240\u6709\u7684server\u7ec4\u6210\u4e86zookeeper\u670d\u52a1\uff0c\u5b83\u4eec\u5fc5\u987b\u4e92\u76f8\u77e5\u9053\u5f7c\u6b64\u3002\u5b83\u4eec\u5728\u5185\u5b58\u4e2d\u7ef4\u62a4\u4e86\u4e00\u4e2a\u955c\u50cf\u72b6\u6001\uff0c\u8fd9\u4e2a\u955c\u50cf\u4e0etransaction logs\u548csnapshots\u4e00\u8d77\u88ab\u6301\u4e45\u5316\u3002\u53ea\u8981\u5927\u591a\u6570\u7684server\u662f\u53ef\u7528\u7684\uff0czookeeper\u5c31\u4f1a\u662f\u53ef\u7528\u7684\u3002 Client \u8fde\u63a5\u5230\u4e00\u4e2a\u5355\u72ec\u7684zookeeper server\u4e0a\u3002\u8fd9\u4e2aclient\u7ef4\u62a4\u4e86tcp\u8fde\u63a5\uff0c\u8fd9\u4e2a\u8fde\u63a5\u53ef\u4ee5\u7528\u6765\u53d1\u9001request\uff0c\u83b7\u53d6response\uff0c\u83b7\u53d6watch events\uff0c\u4ee5\u53ca\u53d1\u9001heart beats. \u5982\u679c\u8fde\u5230server\u7684tcp\u8fde\u63a5\u65ad\u5f00\uff0cclient\u4f1a\u8fde\u5230\u5176\u5b83\u7684server.","title":"\u590d\u6742"},{"location":"java%E5%90%8E%E7%AB%AF/ZooKeeper-overview/#_4","text":"ZooKeeper\u4e3a\u6bcf\u6b21update\u64cd\u4f5c\u8bb0\u5f55\u4e00\u4e2a\u6570\u5b57\uff0c\u8fd9\u4e2a\u6570\u5b57\u4ee3\u8868\u4e86ZooKeeper\u4e8b\u7269\u7684\u987a\u5e8f\u3002\u540e\u7eed\u7684\u64cd\u4f5c\u53ef\u4ee5\u4f7f\u7528\u8fd9\u4e2a\u987a\u5e8f\u6765\u5b9e\u73b0high level\u7684\u62bd\u8c61\uff0c\u4f8b\u5982\u540c\u6b65\u7684\u8bed\u4e49\u3002","title":"\u6709\u5e8f"},{"location":"java%E5%90%8E%E7%AB%AF/ZooKeeper-overview/#_5","text":"\u5728\u8bfb\u7684\u5de5\u4f5c\u8d1f\u8f7d\u4e3a\u4e3b\u7684\u65f6\u5019\uff0czookeeper\u975e\u5e38\u5feb\u3002ZooKeeper\u5e94\u7528\u8fd0\u884c\u5728\u6570\u4ee5\u5343\u8ba1\u7684\u673a\u5668\u4e0a\uff0c\u5728\u8bfb\u5199\u6bd4\u4f8b\u4e3a10:1\u7684\u65f6\u5019\u5b83\u7684\u8868\u73b0\u662f\u6700\u597d\u7684\u3002","title":"\u5feb\u901f"},{"location":"java%E5%90%8E%E7%AB%AF/ZooKeeper-overview/#_6","text":"ZooKeeper\u63d0\u4f9b\u7684\u547d\u540d\u7a7a\u95f4\u6709\u70b9\u50cf\u6807\u51c6\u7684\u6587\u4ef6\u7cfb\u7edf\u3002name\u7531\u4e00\u7cfb\u5217\u88ab / \u5206\u5f00\u7684\u8def\u5f84\u5143\u7d20\u7ec4\u6210\u3002 zookeeper\u4e2d\u7684\u6bcf\u4e2anode\u7531\u4e00\u4e2apath\u6765\u6807\u8bc6\u3002","title":"\u6570\u636e\u6a21\u578b\u548c\u5c42\u6b21\u6027\u7684\u547d\u540d\u7a7a\u95f4"},{"location":"java%E5%90%8E%E7%AB%AF/ZooKeeper-overview/#ephemeral-nodes","text":"\u4e0e\u6807\u51c6\u7684\u6587\u4ef6\u7cfb\u7edf\u4e0d\u540c\u7684\u662f\uff0cZooKeeper\u547d\u540d\u7a7a\u95f4\u4e2d\u7684\u6bcf\u4e2a\u8282\u70b9\u65e2\u53ef\u4ee5\u6709\u6570\u636e\u4e5f\u53ef\u4ee5\u6709\u5b50\u8282\u70b9\u3002\u5b83\u5c31\u50cf\u4e00\u4e2a\u5141\u8bb8\u6587\u4ef6\u4e5f\u53ef\u4ee5\u540c\u65f6\u662f\u8def\u5f84\u7684\u6587\u4ef6\u7cfb\u7edf\u3002\uff08zookeeper\u88ab\u8bbe\u8ba1\u7528\u6765\u5b58\u50a8\u534f\u8c03\u7684\u6570\u636e\u6709\uff1a\u72b6\u6001\u4fe1\u606f\uff0c\u914d\u7f6e\uff0c\u5730\u5740\u7b49\u7b49\uff0c\u6240\u4ee5\u5b58\u50a8\u5728\u6bcf\u4e2anode\u4e2d\u7684\u6570\u636e\u662f\u975e\u5e38\u5c0f\u7684\uff0c\u5728KB\u8303\u56f4\u4e4b\u5185\u3002\uff09\u4e3a\u4e86\u4f7f\u8868\u8fbe\u6e05\u6670\uff0c\u5f53\u6211\u4eec\u8ba8\u8bbazookeeper\u6570\u636e\u8282\u70b9\u7684\u65f6\u5019\u6211\u4eec\u7528znode\u6765\u8868\u793a\u3002 znode\u7ef4\u62a4\u4e86\u4e00\u4e2a\u7edf\u8ba1\u7ed3\u6784\uff0c\u4e3a\u4e86\u4fdd\u8bc1cache\u7684\u6709\u6548\u548c\u534f\u8c03update\uff0c\u91cc\u9762\u5305\u542b\u4e86\u6570\u636e\u6539\u53d8\u7684\u7248\u672c\u53f7\uff0c\u8bbf\u95ee\u63a7\u5236\u5217\u8868\uff08ACL\uff09\u6539\u53d8\u7684\u7248\u672c\u53f7\uff0c\u65f6\u95f4\u6233\uff08timestamp\uff09\u7684\u7248\u672c\u53f7\u3002\u6bcf\u6b21znode\u4e2d\u7684\u6570\u636e\u6539\u53d8\u7684\u65f6\u5019\uff0c\u7248\u672c\u53f7\u5c06\u4f1a\u589e\u52a0\u3002\u4f8b\u5982\uff0cclient\u83b7\u53d6\u6570\u636e\u7684\u65f6\u5019\u5b83\u4e5f\u4f1a\u6536\u5230\u6570\u636e\u7684\u7248\u672c\u53f7\u3002 znode\u547d\u540d\u7a7a\u95f4\u4e2d\u5b58\u50a8\u7684\u6570\u636e\u7684\u8bfb\u5199\u662f\u81ea\u52a8\u5b8c\u6210\u7684\u3002\u8bfb\u64cd\u4f5c\u83b7\u53d6znode\u7684\u6570\u636e\uff0c\u5199\u5c06\u4f1a\u66ff\u4ee3znode\u4e2d\u6240\u6709\u7684\u6570\u636e\u3002\u6bcf\u4e2a\u8282\u70b9\u90fd\u6709\u4e00\u4e2a\u8bbf\u95ee\u63a7\u5236\u5217\u8868\uff08ACL\uff09\u7528\u6765\u9650\u5236\u8c01\u53ef\u4ee5\u505a\u4ec0\u4e48\u3002 ZooKeeper\u4e5f\u6709\u4e34\u65f6\u6027\u8282\u70b9(ephemeral nodes)\u7684\u6982\u5ff5\u3002\u53ea\u8981\u521b\u5efa\u8fd9\u4e9bznode\u7684session\u662factive\u7684\uff0c\u8fd9\u4e9bznode\u5c31\u5b58\u5728\u3002\u5f53session\u7ed3\u675f\u7684\u65f6\u5019znode\u4e5f\u88ab\u5220\u9664\u4e86\u3002\u5f53\u4f60\u60f3\u8981\u5b9e\u73b0[tbd]\u7684\u65f6\u5019Ephemeral nodes\u662f\u975e\u5e38\u6709\u7528\u7684\u3002(\u8fd9\u91cc\u7684[tbd]\u662fto be discussion\u7684\u7f29\u5199\uff0c\u6709\u5f85\u8ba8\u8bba\u7684\u610f\u601d)","title":"\u8282\u70b9\u548c\u4e34\u65f6\u6027\u8282\u70b9(ephemeral nodes)"},{"location":"java%E5%90%8E%E7%AB%AF/ZooKeeper-overview/#conditional-updateswatches","text":"zookeeper\u652f\u6301watch\u7684\u6982\u5ff5\u3002client\u53ef\u4ee5\u5728znode\u4e0a\u8bbe\u7f6e\u4e00\u4e2awatch\u3002\u5f53znode\u6539\u53d8\u7684\u65f6\u5019watch\u5c06\u4f1a\u88ab\u89e6\u53d1\uff08trigger\uff09\u548c\u5220\u9664\u3002\u5728watch\u88ab\u89e6\u53d1\u4e4b\u540e\uff0cclient\u4f1a\u6536\u5230\u4e00\u4e2a\u6570\u636e\u5305\u544a\u8bc9\u5b83znode\u5df2\u7ecf\u53d8\u4e86\u3002\u5982\u679cclient\u548czookeeper\u4e2d\u67d0\u4e00\u4e2aserver\u7684\u8fde\u63a5\u65ad\u5f00\u4e86\uff0cclient\u5c06\u4f1a\u6536\u5230\u4e00\u4e2a\u672c\u5730\u7684\u901a\u77e5\u3002\u8fd9\u5c06\u6709\u5f85\u8ba8\u8bba\u3002","title":"Conditional updates\u548cwatches"},{"location":"java%E5%90%8E%E7%AB%AF/ZooKeeper-overview/#_7","text":"zookeeper\u662f\u975e\u5e38\u5feb\u901f\u548c\u7b80\u5355\u7684\u3002\u5c3d\u7ba1\u5b83\u7684\u76ee\u6807\u662f\u6210\u4e3a\u6784\u5efa\u66f4\u4e3a\u590d\u6742service\u7684\u57fa\u7840\uff0c\u4f8b\u5982\u540c\u6b65\uff0c\u5b83\u4e5f\u63d0\u4f9b\u4e86\u4e00\u7cfb\u5217\u7684\u4fdd\u8bc1\u3002\u5b83\u4eec\u662f\uff1a \u987a\u5e8f\u4e00\u81f4\u6027 \u539f\u5b50\u6027 \u5355\u7cfb\u7edf\u955c\u50cf - \u65e0\u8bbaclient\u8fde\u63a5\u5230\u54ea\u4e2aserver\u5b83\u4eec\u770b\u5230\u7684\u89c6\u56fe\u90fd\u662f\u76f8\u540c\u7684 \u9ad8\u53ef\u7528 - \u4e00\u65e6update\u88abapply\u4e86\uff0c\u5b83\u5c06\u4f1a\u4ece\u90a3\u4e2a\u65f6\u95f4\u70b9\u6301\u4e45\u5316\u76f4\u5230client\u91cd\u5199\u4e86update \u53ca\u65f6\u6027 - \u4fdd\u8bc1client\u770b\u5230\u7684\u7cfb\u7edf\u7684\u89c6\u56fe\u5728\u4e00\u5b9a\u65f6\u95f4\u5185\u88ab\u66f4\u65b0 \u66f4\u591a\u65b9\u9762\u6709\u5f85\u8ba8\u8bba","title":"\u4fdd\u8bc1"},{"location":"java%E5%90%8E%E7%AB%AF/ZooKeeper-overview/#api","text":"ZooKeeper\u7684\u4e00\u4e2a\u8bbe\u8ba1\u76ee\u6807\u662f\u63d0\u4f9b\u7b80\u5316\u7684\u7f16\u7a0b\u63a5\u53e3\u3002\u5b83\u652f\u6301\u4ee5\u4e0b\u64cd\u4f5c create \u5728\u6811\u79cd\u7684\u4e00\u4e2a\u8282\u70b9\u521b\u5efanode delete \u5220\u9664\u4e00\u4e2anode exists \u68c0\u67e5\u67d0\u4e00\u4e2a\u4f4d\u7f6e\u662f\u5426\u5b58\u5728\u4e00\u4e2anode get data \u4ecenode\u4e2d\u8bfb\u53d6\u6570\u636e set data \u5411node\u4e2d\u5199\u5165\u6570\u636e get children \u83b7\u53d6\u4e00\u4e2a\u8282\u70b9\u6240\u6709\u7684\u5b50\u8282\u70b9 sync \u7b49\u5f85\u6570\u636e\u590d\u5236\u5b8c\u6210 \u5bf9\u4e8e\u5728\u8fd9\u4e9b\u65b9\u9762\u7684\u6df1\u5ea6\u8ba8\u8bba\uff0c\u4ee5\u53ca\u5982\u4f55\u5b9e\u73b0high level\u7684\u64cd\u4f5c\uff0c\u4ecd\u65e7\u6709\u5f85\u8ba8\u8bba\u3002","title":"\u7b80\u5355\u7684api"},{"location":"java%E5%90%8E%E7%AB%AF/ZooKeeper-overview/#_8","text":"zookeeper\u7ec4\u4ef6 \u663e\u793a\u4e86high level\u7684zookeeper\u670d\u52a1\u7684\u7ec4\u4ef6\u3002\u9664\u4e86\u8bf7\u6c42\u5904\u7406\u5668\uff08request processor\uff09\u4e4b\u5916\uff0c\u6bcf\u4e2a\u7ec4\u6210zookeeper service\u7684server\u90fd\u590d\u5236\u6bcf\u4e00\u4efd\u7ec4\u4ef6\u81ea\u5df1\u4f7f\u7528\u3002 replicated database\u662f\u4e00\u4e2a\u7ef4\u62a4\u6574\u4e2a\u6570\u636e\u6811\u7684\u5185\u5b58\u6570\u636e\u5e93\u3002\u4e3a\u4e86\u53ef\u6062\u590d\uff0cupdate\u88ab\u8bb0\u5f55\u5728\u78c1\u76d8\u4e0a\uff0cwrite\u5728\u88ab\u5e94\u7528\u5230\u5185\u5b58\u6570\u636e\u5e93\u4e4b\u524d\u88ab\u5e8f\u5217\u5316\u5230\u78c1\u76d8\u4e0a\u3002 \u6bcf\u4e2azookeeper server \u670d\u52a1\u591a\u4e2aclient\u3002client\u53ea\u8fde\u63a5\u5230\u4e00\u4e2a\u8981\u63d0\u4ea4request\u7684server\u4e0a\u3002read\u8bf7\u6c42\u4ece\u6bcf\u4e2aserver\u5185\u5b58\u6570\u636e\u5e93\u4e2d\u7684\u526f\u672c\u4e2d\u62ff\u6570\u636e\u3002\u6539\u53d8service\u72b6\u6001\u7684\u8bf7\u6c42\u4ee5\u53ca\u5199\u8bf7\u6c42\u7ecf\u8fc7\u534f\u5546\u534f\u8bae\u6765\u5904\u7406\u3002 \u4f5c\u4e3a\u534f\u5546\u534f\u8bae\u7684\u4e00\u90e8\u5206\uff0c\u6240\u6709\u6765\u81eaclient\u7684write\u8bf7\u6c42\u90fd\u88ab\u8f6c\u53d1\u5230\u4e00\u4e2a\u5355\u72ec\u7684\u53eb\u505aleader\u7684server\u4e0a\u3002zookeeper\u4e2d\u5269\u4f59\u7684server\u90fd\u53eb\u505afollower\uff0c\u4ed6\u4eec\u53ea\u80fd\u63a5\u53d7leader\u7684\u8c03\u914d\u3002\u6d88\u606f\u5c42\u8d1f\u8d23\u66ff\u4ee3\u5931\u8d25\u7684leader\u548c\u540c\u6b65follower\u4e0eleader\u4e00\u81f4\u3002 zookeeper\u4f7f\u7528\u7ecf\u5178\u7684\u539f\u5b50\u6027\u7684\u6d88\u606f\u534f\u8bae\u3002\u56e0\u4e3a\u6d88\u606f\u5c42\u662f\u539f\u5b50\u6027\u7684\uff0czookeeper\u80fd\u591f\u4fdd\u8bc1\u672c\u5730\u5907\u4efd\u4e0d\u4f1a\u4ea7\u751f\u8bef\u5dee\u3002\u5f53leader\u63a5\u6536\u5230write\u8bf7\u6c42\u4e4b\u540e\uff0c\u5b83\u8ba1\u7b97\u7cfb\u7edf\u7684\u72b6\u6001\u662f\u4ec0\u4e48\uff0c\u4ec0\u4e48\u65f6\u5019\u5e94\u7528\u8fd9\u4e2a\u5199\u8bf7\u6c42\u5c06\u5b83\u8f6c\u6362\u6210\u4e8b\u52a1\u6765\u6355\u6349\u8fd9\u4e2a\u65b0\u7684\u72b6\u6001\u3002","title":"\u5b9e\u73b0"},{"location":"java%E5%90%8E%E7%AB%AF/ZooKeeper-overview/#_9","text":"ZooKeeper\u7684\u7f16\u7a0b\u63a5\u53e3\u6709\u610f\u8bbe\u8ba1\u5f97\u5f88\u7b80\u5355\u3002\u4f7f\u7528\u5b83\u4f60\u53ef\u4ee5\u5b9e\u73b0high level\u7684\u547d\u4ee4\u64cd\u4f5c\uff0c\u4f8b\u5982\u540c\u6b65\u7684\u8bed\u4e49\uff0c\u7ec4\u5173\u7cfb\uff0c\u6743\u9650\uff0c\u7b49\u7b49\u3002Some distributed applications have used it to: [tbd: add uses from white paper and video presentation.] For more information, see [tbd]","title":"\u7528\u6cd5"},{"location":"java%E5%90%8E%E7%AB%AF/ZooKeeper-overview/#_10","text":"zookeeper\u88ab\u8bbe\u8ba1\u5f97\u5f88\u9ad8\u6548\u3002\u4f46\u786e\u5b9e\u5982\u6b64\u5417\uff1fYahoo!\u7814\u7a76\u4e2d\u5fc3\u7684zookeeper\u5f00\u53d1\u56e2\u961f\u8bf4\u662f\u7684\u3002\u5f53\u5e94\u7528\u7a0b\u5e8f\u8bfb\u7684\u6570\u91cf\u8fdc\u8d85\u8fc7\u5199\u64cd\u4f5c\u7684\u6570\u91cf\u65f6\uff0c\u5b83\u662f\u975e\u5e38\u9ad8\u6548\u7684\uff0c\u56e0\u4e3a\u5199\u64cd\u4f5c\u4f1a\u540c\u6b65\u6240\u6709server\u7684\u72b6\u6001\u3002\uff08\u5728coordination service\u4e2d\u8fd9\u79cdcase\u662f\u975e\u5e38\u5178\u578b\u7684\uff09 \u8fd9\u662fZooKeeper release 3.2\u7684\u4e00\u5f20\u541e\u5410\u7387\u7684\u56fe\uff0c\u5b83\u8fd0\u884c\u7684server\u662fdual 2Ghz Xeon \u548ctwo SATA 15K RPM drives\u3002\u4e00\u4e2a\u9a71\u52a8\u5668\u88ab\u7528\u4f5c\u4e13\u7528zookeeper\u8bb0\u5f55\u8bbe\u5907\u3002zookeeper\u7684\u5feb\u7167\u88ab\u5199\u5230\u7cfb\u7edf\u7684\u9a71\u52a8\u5668\u4e2d\u30021k read\u548cwrite\u8bf7\u6c42\u3002Servers\u8868\u660e\u4e86ensemble\u7684\u5927\u5c0f\uff0c\u4e5f\u5c31\u662fzookeeper\u4e2dserver\u7684\u6570\u91cf\u3002\u5927\u7ea6\u670930\u53f0\u5176\u5b83\u7684\u670d\u52a1\u5668\u6765\u6a21\u4effclient\u3002zookeeper ensemble\u88ab\u914d\u7f6e\u6210\u4e0d\u5141\u8bb8\u6765\u81eaclient\u7684\u8fde\u63a5\u3002 \u4e0e3.1\u76f8\u6bd43.2\u7248\u672c\u4e2d\u8bfb\u5199\u7684performance\u63d0\u9ad8\u4e86\u4e24\u500d \u57fa\u51c6\u70b9\u4e5f\u8868\u660e\u5b83\u662f\u53ef\u4fe1\u7684\u3002\u4e0b\u9762\u663e\u793a\u4e86\u600e\u6837\u9488\u5bf9\u4e0d\u540c\u7684\u5931\u8d25\u505a\u53d1\u5e03\u3002\u56fe\u4e2d\u6807\u8bb0\u7684\u4e8b\u4ef6\u662f\uff1a 1. follower\u7684\u5931\u8d25\u548c\u6062\u590d 2. \u4e0d\u540c\u7684follower\u7684\u5931\u8d25\u548c\u6062\u590d 3. leader\u7684\u6062\u590d 4. \u4e24\u4e2afollower\u7684\u5931\u8d25\u548c\u6062\u590d 5. \u53e6\u4e00\u4e2aleader\u7684\u5931\u8d25","title":"\u6548\u7387"},{"location":"java%E5%90%8E%E7%AB%AF/ZooKeeper-overview/#_11","text":"\u4e3a\u4e86\u663e\u793a\u7cfb\u7edf\u7684\u884c\u4e3a\uff0c\u5728\u6211\u4eec\u8fd0\u884c7\u53f0\u673a\u5668\u7ec4\u6210\u7684zookeeper service\u7684\u65f6\u5019\u5931\u8d25\u88ab\u6ce8\u5165\u8fdb\u6765\u3002\u6211\u4eec\u4f7f\u7528\u4e0e\u4e4b\u524d\u76f8\u540c\u7684\u57fa\u51c6\u70b9\u8fd0\u884c\uff0c\u4f46\u662f\u8fd9\u6b21\u6211\u4eec\u4f7fwrite\u7684\u767e\u5206\u6bd4\u56fa\u5b9a\u572830%\uff0c\u8fd9\u4e2a\u6bd4\u7387\u662f\u6211\u4eec\u671f\u671b\u8d1f\u8f7d\u5546\u5b9a\u7684\u6bd4\u4f8b\u3002 \u8fd9\u5f20\u56fe\u4e2d\u6709\u4e00\u4e9b\u91cd\u8981\u7684\u6ce8\u610f\u70b9\u3002\u9996\u5148\uff0c\u5982\u679cfollower\u5931\u8d25\u5e76\u7acb\u5373\u6062\u590d\uff0czookeeper\u4ecd\u80fd\u591f\u7ef4\u62a4\u9ad8\u541e\u5410\u3002\u4f46\u53ef\u80fd\u66f4\u91cd\u8981\u7684\u662f\uff0cleader\u9009\u4e3e\u7b97\u6cd5\u80fd\u591f\u5141\u8bb8\u7cfb\u7edf\u8db3\u591f\u5feb\u5730\u6062\u590d\uff0c\u8fd9\u80fd\u591f\u963b\u6b62\u541e\u5410\u91cf\u7684\u964d\u4f4e\u3002\u6211\u4eec\u53ef\u4ee5\u770b\u5230\uff0czookeeper\u4f7f\u7528\u5c11\u4e8e200ms\u7684\u65f6\u95f4\u9009\u4e3e\u4e00\u4e2a\u65b0\u7684leader\u3002\u7b2c\u4e09\u70b9\uff0c\u5f53follower\u6062\u590d\u7684\u65f6\u5019\uff0czookeeper\u80fd\u591f\u518d\u6b21\u63d0\u9ad8\u5904\u7406\u8bf7\u6c42\u7684\u541e\u5410\u91cf\u3002","title":"\u53ef\u9760"},{"location":"java%E5%90%8E%E7%AB%AF/ZooKeeper-overview/#zookeeper_1","text":"zookeeper\u88ab\u6210\u529f\u7684\u7528\u5728\u8bb8\u591a\u7684\u5de5\u4e1a\u5b9e\u8df5\u4e2d\u3002Yahoo!\u4f7f\u7528\u5b83\u4f5c\u4e3aYahoo! Message Broker\u7684\u534f\u8c03\u548c\u5931\u8d25\u6062\u590d\u670d\u52a1\uff0cYahoo! Message Broker\u662f\u4e00\u4e2a\u5927\u89c4\u6a21\u7684\u53d1\u5e03-\u8ba2\u9605\u7cfb\u7edf\uff0c\u7ba1\u7406\u7740\u4e0a\u5343\u7684topic\u5907\u4efd\u548c\u6570\u636e\u4f20\u8f93\u3002Fetching Service for Yahoo! crawler\u4e5f\u4f7f\u7528\u5b83\uff0c\u4e5f\u662f\u62ff\u6765\u7ba1\u7406\u5931\u8d25\u6062\u590d\u3002Yahoo!\u7684\u4e00\u4e9b\u5e7f\u544a\u7cfb\u7edf\u4e5f\u4f7f\u7528zookeeper\u6765\u5b9e\u73b0\u9ad8\u53ef\u9760\u7684service\u3002 \u6b22\u8fce\u4efb\u4f55\u7528\u6237\u548c\u5f00\u53d1\u8005\u52a0\u5165\u5230\u793e\u533a\u8d21\u732e\u4f60\u4eec\u7684\u4e13\u4e1a\u77e5\u8bc6\u3002\u4ecehttp://zookeeper.apache.org/\u80fd\u591f\u83b7\u5f97\u66f4\u591a\u4fe1\u606f\u3002","title":"zookeeper\u9879\u76ee"},{"location":"java%E5%90%8E%E7%AB%AF/java-SE8-in-practice/","text":"java SE8 in practice \u00b6 \u7ec3\u4e60\u4f7f\u7528java SE 8\u6700\u65b0\u7684feature \u5f85\u7ffb\u8bd1","title":"java-SE8-in-practice"},{"location":"java%E5%90%8E%E7%AB%AF/java-SE8-in-practice/#java-se8-in-practice","text":"\u7ec3\u4e60\u4f7f\u7528java SE 8\u6700\u65b0\u7684feature \u5f85\u7ffb\u8bd1","title":"java SE8 in practice"},{"location":"java%E5%90%8E%E7%AB%AF/java.util.concurrent.locks%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/","text":"java.util.concurrent.locks\u6e90\u7801\u5256\u6790 \u00b6 \u53c2\u8003 \u00b6 \u82f1\u6587\u6587\u6863 \u82f1\u6587 jenkov \u4e2d\u6587 defonds Lock\u63a5\u53e3 \u00b6 \u63a5\u53e3\u5b9a\u4e49\uff1a package java.util.concurrent.locks; import java.util.concurrent.TimeUnit; public interface Lock { void lock(); void lockInterruptibly() throws InterruptedException; boolean tryLock(); boolean tryLock(long time, TimeUnit unit) throws InterruptedException; void unlock(); // \u4f9d\u8d56\u4e8eCondition\u63a5\u53e3 Condition newCondition(); } Condition\u63a5\u53e3 \u00b6 public interface Condition { void await() throws InterruptedException; void awaitUninterruptibly(); long awaitNanos(long nanosTimeout) throws InterruptedException; boolean await(long time, TimeUnit unit) throws InterruptedException; boolean awaitUntil(Date deadline) throws InterruptedException; void signal(); void signalAll(); } ReentrantLock \u00b6 \u53c2\u8003\u8fd9\u7bc7 \u300aReentrantLock\u6e90\u7801\u5206\u6790\u300b \u6838\u5fc3\u6210\u5458 \u00b6 ReentrantLock\u53ea\u6709\u4e00\u4e2a\u6210\u5458sync // \u63d0\u4f9b\u6240\u6709\u5b9e\u73b0\u673a\u5236\u7684\u540c\u6b65\u5668 private final Sync sync; \u6838\u5fc3\u65b9\u6cd5 \u00b6 \u53ef\u4ee5\u770b\u51faReentrantLock\u53ea\u662fSync\u7684\u4e00\u4e2a\u4ee3\u7406 public class ReentrantLock implements Lock, java.io.Serializable { // \u9ed8\u8ba4\u662f\u975e\u516c\u5e73\u9501 public ReentrantLock() { sync = new NonfairSync(); } public void lock() { sync.lock(); } public void unlock() { sync.release(1); } public boolean tryLock() { return sync.nonfairTryAcquire(1); } // \u8981\u6c42\u72b6\u6001\u503c\u51cf\u91ca\u653e\u6570\uff0c\u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u4e0d\u662f\u72ec\u81ea\u6a21\u5f0f\u4e0b\u7684\u62e5\u6709\u8005\uff0c\u90a3\u4e48\u5b83\u65e0\u6743\u4fee\u6539\u72b6\u6001\u503c\uff0c\u629b\u5f02\u5e38\uff0c\u53ef\u89c1ReentrantLock\u662f\u72ec\u5360\u9501 protected final boolean tryRelease(int releases) { // \u8ba1\u7b97\u65b0\u7684\u72b6\u6001\u503c int c = getState() - releases; // \u5982\u679c\u7ebf\u7a0b\u4e0d\u662f\u72ec\u81ea\u6a21\u5f0f\u4e0b\u7684\u62e5\u6709\u8005\uff0c\u90a3\u4e48\u5b83\u5c31\u65e0\u6743\u8981\u6c42\u4fee\u6539\u72b6\u6001\u503c\uff0c\u5c31\u629b\u51fa\u5f02\u5e38 if (Thread.currentThread() != getExclusiveOwnerThread()) throw new IllegalMonitorStateException(); boolean free = false; if (c == 0) { free = true; setExclusiveOwnerThread(null); } setState(c); return free; } public Condition newCondition() { return sync.newCondition(); } } \u6570\u636e\u7ed3\u6784 \u00b6 \u6211\u4eec\u4e3b\u8981\u5173\u5fc3\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u7684\u6210\u5458\u4ee5\u53ca\u6838\u5fc3\u65b9\u6cd5 Sync \u00b6 \u4ece\u5b9a\u4e49\u53ef\u4ee5\u770b\u51faSync\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u7ee7\u627f\u4e86AbstractQueuedSynchronizer\uff0c\u5b83\u7684\u5b9e\u73b0\u7c7b\u6709FairSync\u548cNonfairSync. abstract static class Sync extends AbstractQueuedSynchronizer { // \u6ca1\u6709\u5b9a\u4e49\u6210\u5458 // \u5b50\u7c7b\u9700\u8981\u53bb\u5b9e\u73b0lock abstract void lock(); final ConditionObject newCondition() { // ConditionObject\u7ee7\u627f\u81eaAbstractQueuedSynchronizer return new ConditionObject(); } } NonfairSync \u00b6 \u9ed8\u8ba4\u7684\u540c\u6b65\u673a\u5236\uff0c\u53d1\u73b0\u8fd9\u4e2a\u7c7b\u975e\u5e38\u7b80\u5355\uff0c\u4e3b\u8981\u8c03\u7528AbstractQueuedSynchronizer\uff0c\u56e0\u6b64\uff0c\u8981\u4e86\u89e3ReentrantLock\uff0c\u6700\u91cd\u8981\u7684\u662f\u4e86\u89e3AbstractQueuedSynchronizer\uff0c\u540c\u65f6\u6ce8\u610f\u5bf9\u6bd4FairSync\u548cNonfairSync\u3002 \u975e\u516c\u5e73\u9501\uff08Nonfair\uff09\uff1a\u83b7\u53d6\u9501\u65f6\u4e0d\u8003\u8651\u6392\u961f\u7b49\u5f85\u95ee\u9898\uff0c\u76f4\u63a5\u5c1d\u8bd5\u83b7\u53d6\u9501\uff0c\u83b7\u53d6\u4e0d\u5230\u81ea\u52a8\u5230\u961f\u5c3e\u7b49\u5f85 static final class NonfairSync extends Sync { final void lock() { // \u5982\u679csync\u4e2d\u7684state\u6ca1\u6709\u88ab\u4efb\u4f55\u7ebf\u7a0b\u5360\u6709\uff0c\u5219\u8bbe\u5b9a\u5f53\u524d\u7ebf\u7a0b\u4e3a\u9501\u7684\u62e5\u6709\u8005 if (compareAndSetState(0, 1)) // AbstractOwnableSynchronizer\u4e2d\u7684\u65b9\u6cd5\uff0c\u8bbe\u7f6e\u5f53\u524d\u7ebf\u7a0b\u4e3a\u9501\u7684\u62e5\u6709\u8005 setExclusiveOwnerThread(Thread.currentThread()); // \u5426\u5219\u5f53\u524d\u7ebf\u7a0b\u9700\u8981\u548csync\u961f\u5217\u4e2d\u7684\u5176\u5b83\u7ebf\u7a0b\u7ade\u4e89state\u7684\u5360\u6709\u6743 else acquire(1); } protected final boolean tryAcquire(int acquires) { return nonfairTryAcquire(acquires); } //\u975e\u516c\u5e73\u9501\u7684\u83b7\u53d6\u65b9\u6cd5\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff1a\u8fd9\u4e2a\u65b9\u6cd5\u5b9e\u9645\u662f\u5728NonfairSync\u7684\u7236\u7c7bSync\u4e2d final boolean nonfairTryAcquire(int acquires) { final Thread current = Thread.currentThread(); // \u83b7\u53d6state\u7684\u503c int c = getState(); // \u5982\u679cstate\u6ca1\u88ab\u5360\u6709\uff0c\u5c31\u72ec\u5360\u5b83 if (c == 0) { if (compareAndSetState(0, acquires)) { setExclusiveOwnerThread(current); return true; } } // \u5982\u679cstate\u5df2\u7ecf\u88ab\u5360\u6709\uff0c\u5e76\u4e14\u662f\u88ab\u5f53\u524d\u7ebf\u7a0b\u5360\u6709\u7684 else if (current == getExclusiveOwnerThread()) { int nextc = c + acquires; // \u5982\u679c\u5f15\u7528\u6b21\u6570\u6ea2\u51fa\uff0c\u629b\u51fa\u5f02\u5e38\u800c\u4e0d\u662f\u8fd4\u56defalse if (nextc < 0) // overflow throw new Error(\"Maximum lock count exceeded\"); // \u66f4\u65b0\u5f15\u7528\u6b21\u6570 setState(nextc); return true; } // \u5982\u679c\u5df2\u88ab\u5176\u4ed6\u7ebf\u7a0b\u5360\u6709\uff0c\u90a3\u4e48\u4e0d\u80fd\u4fee\u6539state\u7684\u503c return false; } } FairSync \u00b6 \u516c\u5e73\u9501\uff08Fair\uff09\uff1a\u52a0\u9501\u524d\u68c0\u67e5\u662f\u5426\u6709\u6392\u961f\u7b49\u5f85\u7684\u7ebf\u7a0b\uff0c\u4f18\u5148\u6392\u961f\u7b49\u5f85\u7684\u7ebf\u7a0b\uff0c\u5148\u6765\u5148\u5f97 static final class FairSync extends Sync { private static final long serialVersionUID = -3000897897090466540L; final void lock() { acquire(1); } /** * Fair version of tryAcquire. Don't grant access unless * recursive call or no waiters or is first. */ protected final boolean tryAcquire(int acquires) { final Thread current = Thread.currentThread(); int c = getState(); // \u6ca1\u6709\u6ca1\u7ebf\u7a0b\u5360\u6709 if (c == 0) { // \u5fc5\u987b\u662f\u961f\u5217\u4e2d\u7684\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u624d\u80fd\u83b7\u53d6state\u7684\u4f7f\u7528\u6743\uff0c\u4fee\u6539state\u7684\u503c if (!hasQueuedPredecessors() && compareAndSetState(0, acquires)) { setExclusiveOwnerThread(current); return true; } } // \u5f53\u524d\u7ebf\u7a0b\u5df2\u7ecf\u83b7\u5f97state\u7684\u4f7f\u7528\u6743 else if (current == getExclusiveOwnerThread()) { int nextc = c + acquires; if (nextc < 0) throw new Error(\"Maximum lock count exceeded\"); setState(nextc); return true; } return false; } } AbstractQueuedSynchronizer \u00b6 \u7b80\u79f0AQS\uff0c\u662f\u4e00\u4e2a\u975e\u5e38\u6838\u5fc3\u7684\u7c7b\uff0c\u4e5f\u662f\u672c\u6587\u7684\u91cd\u70b9\u5173\u6ce8\u5bf9\u8c61\u3002\u5176\u5b9eAQS\u4e3b\u8981\u5c31\u662f\u7ef4\u62a4\u4e86\u4e00\u4e2a\u72b6\u6001\u503c\uff0crelease\u5bf9\u72b6\u6001\u503c\u505a\u51cf\u6cd5\uff0cacquire\u5bf9\u72b6\u6001\u503c\u505a\u52a0\u6cd5\u3002\u5e76\u4e14AQS\u63d0\u4f9b\u4e86\u72ec\u5360\u548c\u5171\u4eab\u4e24\u79cd\u6a21\u5f0f\u3002 \u5185\u90e8\u7c7b \u00b6 AQS\u4e2d\u6709\u4e24\u4e2a\u5185\u90e8\u7c7b\uff1aNode\u548cConditionObject\u3002 Node \u00b6 Node\u662f\u7b49\u5f85\u961f\u5217\u4e2d\u7684\u8282\u70b9\u7c7b\u3002 \u7b49\u5f85\u961f\u5217\u662f \"CLH\" (Craig, Landin, and Hagersten)\u9501\u961f\u5217 \u7684\u4e00\u79cd\u53d8\u4f53\u3002CLH\u9501\u4e00\u822c\u7528\u4f5c \u81ea\u65cb\u9501\uff08spinlocks\uff09 \u3002\u7136\u800c\u8fd9\u91cc\u4f7f\u7528\u4e86\u76f8\u540c\u7684\u7b56\u7565\uff0c\u628a\u5173\u4e8ethread\u7684\u63a7\u5236\u4fe1\u606f\u4fdd\u5b58\u5728\u524d\u4e00\u4e2a\u8282\u70b9\u4e2d\uff0c\u53ea\u4e0d\u8fc7\u4f1a\u963b\u585e\u3002\u6bcf\u4e2a\u8282\u70b9\u4e2d\u7684\u72b6\u6001\u5b57\u6bb5\u90fd\u8bb0\u5f55\u4e86\u7ebf\u7a0b\u662f\u5426\u5e94\u8be5\u963b\u585e\u3002\u8282\u70b9\u4f1a\u5728\u524d\u4e00\u4e2a\u8282\u70b9\u91ca\u653e\u7684\u65f6\u5019\u6536\u5230\u4fe1\u53f7\u88ab\u5524\u9192\u3002\u56e0\u6b64\u961f\u5217\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u5145\u5f53\u4e86\u4e00\u79cd\u7279\u5b9a\u901a\u77e5\u98ce\u683c\u7684\u76d1\u89c6\u5668\uff0c\u540c\u65f6\u6301\u6709\u4e00\u4e2a\u6b63\u5728\u7b49\u5f85\u7684\u7ebf\u7a0b\u3002\u72b6\u6001\u5b57\u6bb5\u4e0d\u63a7\u5236\u7ebf\u7a0b\u662f\u5426\u6388\u4e88\u9501\u7b49\u3002\u5982\u679c\u7ebf\u7a0b\u5728\u961f\u5217\u4e2d\u7684\u7b2c\u4e00\u4e2a\u7684\u8bdd\uff0c\u53ef\u80fd\u5c1d\u8bd5\u83b7\u53d6\u9501\u3002\u4f46\u662f\u62cd\u7167\u7b2c\u4e00\u4e2a\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u83b7\u53d6\u9501\u6210\u529f\uff1b\u53ea\u662f\u7ed9\u4e88\u8fd9\u4e2a\u7ebf\u7a0b\u53c2\u4e0e\u7ade\u4e89\u7684\u6761\u4ef6\u3002\u6240\u4ee5\u5f53\u524d\u88ab\u91ca\u653e\u7684\u7ade\u4e89\u8005\u53ef\u80fd\u8fd8\u8981\u7b49\u5f85\u3002 \u4e3a\u4e86\u8ba9\u4e00\u4e2aCLH\u9501\u5165\u961f\uff0c\u4f60\u53ef\u4ee5\u8ba9\u5b83\u81ea\u52a8\u62fc\u63a5\u5230\u65b0\u7684tail\u4e2d\u3002\u79bb\u961f\u53ea\u9700\u8981\u91cd\u65b0\u8bbe\u7f6ehead\u5b57\u6bb5\u3002 +------+ prev +-----+ +-----+ head | | <---- | | <---- | | tail +------+ +-----+ +-----+ \u5165\u961f\u4e0e\u79bb\u961f\u5206\u522b\u662f\u4f5c\u7528\u4e8etail\u548chead\u7684\u539f\u5b50\u64cd\u4f5c\u3002\u7136\u800c\uff0c\u7531\u4e8e\u8d85\u65f6\u548c\u4e2d\u65ad\u53ef\u80fd\u5bfc\u81f4\u7ebf\u7a0b\u88ab\u53d6\u6d88\uff0cnode\u8fd8\u9700\u8981\u786e\u5b9a\u5b83\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u662f\u8c01\u3002\u76f8\u6bd4\u539f\u6765CLH\u9501\u7684\u5b9e\u73b0\uff0c\u589e\u52a0\u4e86prev\u5b57\u6bb5\u4e3b\u8981\u7528\u6765\u5904\u7406\u7ebf\u7a0b\u88ab\u53d6\u6d88\u8fd9\u79cd\u60c5\u51b5\u3002\u5982\u679c\u4e00\u4e2anode\u4e2d\u7684\u7ebf\u7a0b\u88ab\u53d6\u6d88\u4e86\uff0c\u5b83\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u5c31\u9700\u8981\u91cd\u65b0\u627e\u4e00\u4e2a\u6ca1\u6709\u88ab\u53d6\u6d88\u7684\u8282\u70b9\u6765\u4f5c\u4e3a\u524d\u7ee7\u3002\u60f3\u4e86\u89e3\u81ea\u65cb\u9501\u7684\u76f8\u4f3c\u673a\u5236\uff0c\u53ef\u4ee5\u770bScott\u548cScherer\u7684 \u8bba\u6587 \u3002 static final class Node { /** Marker to indicate a node is waiting in shared mode */ static final Node SHARED = new Node(); /** Marker to indicate a node is waiting in exclusive mode */ static final Node EXCLUSIVE = null; /** waitStatus\u7684\u503c\uff0c\u8868\u793athread\u88ab\u53d6\u6d88\u4e86 */ static final int CANCELLED = 1; /** waitStatus\u7684\u503c\uff0c\u8868\u793a\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u7ebf\u7a0b\u9700\u8981\u963b\u585e */ static final int SIGNAL = -1; /** waitStatus\u7684\u503c\uff0c\u8868\u793athread\u6b63\u5728\u7b49\u5f85\u67d0\u4e2a\u6761\u4ef6 */ static final int CONDITION = -2; /** * waitStatus value to indicate the next acquireShared should * unconditionally propagate */ static final int PROPAGATE = -3; volatile int waitStatus; volatile Node prev; volatile Node next; volatile Thread thread; Node nextWaiter; } ConditionObject \u00b6 \u4ec5\u5217\u51fa\u91cd\u8981\u7684\u6210\u5458\u4ee5\u53ca\u65b9\u6cd5\u3002 /* * \u7ef4\u62a4\u4e86\u4e00\u4e2a\u6761\u4ef6\u961f\u5217\uff0c\u6ce8\u610f\u533a\u522b\u4e8eAQS\u4e2d\u7684\u540c\u6b65\u961f\u5217\u3002 * \u6761\u4ef6\u961f\u5217\u7528\u6765\u8bb0\u5f55\u672a\u6ee1\u8db3\u6761\u4ef6\u7684\u7ebf\u7a0b\uff0c\u6bcf\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u9700\u8981\u7b49\u5f85\u6761\u4ef6\u6ee1\u8db3\u7684\u65f6\u5019\uff0c\u5c31\u52a0\u5165\u6761\u4ef6\u961f\u5217\u8fdb\u884c\u7b49\u5f85\uff1b * \u5f53\u6761\u4ef6\u88ab\u6ee1\u8db3\u7684\u65f6\u5019\uff0c\u7ebf\u7a0b\u5c31\u4f1a\u628a\u7b49\u5f85\u961f\u5217\u4e2d\u6240\u6709\u7684\u7ebf\u7a0b\u6309\u7167\u987a\u5e8f\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\uff0c * \u5e76\u4e0e\u540c\u6b65\u961f\u5217\u7ade\u4e89state\u7684\u4f7f\u7528\u6743\u3002 */ public class ConditionObject implements Condition, java.io.Serializable { // \u6761\u4ef6\u961f\u5217\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9 private transient Node firstWaiter; // \u6761\u4ef6\u961f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9 private transient Node lastWaiter; public ConditionObject() { } public final void await() throws InterruptedException { if (Thread.interrupted()) throw new InterruptedException(); // \u6dfb\u52a0\u4e86\u4e00\u4e2a\u5f53\u524d\u7ebf\u7a0b\u8282\u70b9\u5230\u6761\u4ef6\u961f\u5217\u7684\u5c3e\u90e8 Node node = addConditionWaiter(); // \u5b8c\u5168\u91ca\u653e\u5f53\u524d\u7ebf\u7a0b\u5bf9state\u7684\u5360\u6709\u6743\uff0c\u5524\u9192\u540c\u6b65\u961f\u5217\u4e2d\u7b2c\u4e00\u4e2a\u7b49\u5f85\u7684\u7ebf\u7a0b\uff0c\u5e76\u8bb0\u5f55\u5f53\u524d\u7ebf\u7a0b\u5360\u6709\u7684state\u7684\u503c int savedState = fullyRelease(node); int interruptMode = 0; // \u7b49\u5f85\u53e6\u4e00\u4e2a\u5176\u5b83\u7ebf\u7a0b\u5c06\u5f53\u524d\u7ebf\u7a0b\u4ece\u6761\u4ef6\u961f\u5217\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\u4e2d\uff08\u8c03\u7528sigal\u51fd\u6570\uff09 while (!isOnSyncQueue(node)) { // \u5f53\u524d\u7ebf\u7a0b\u88ab\u6302\u8d77\uff0c\u7b49\u5f85\u88ab\u5524\u9192 LockSupport.park(this); // \u5982\u679c\u662f\u56e0\u4e3a\u88ab\u4e2d\u65ad\u800c\u9192\u8fc7\u6765\uff0c\u5c31\u628a\u5f53\u524d\u7ebf\u7a0b\u76f4\u63a5\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\u4e2d // \u81ea\u5df1\u5c06\u81ea\u5df1\u52a0\u5165\u540c\u6b65\u961f\u5217\uff0c\u9700\u8981\u629b\u5f02\u5e38\uff0c\u5982\u679c\u7b49\u5f85\u5176\u5b83\u7ebf\u7a0b\u5c06\u81ea\u5df1\u52a0\u5165\u540c\u6b65\u961f\u5217\uff0c\u4e0d\u9700\u8981\u629b\u5f02\u5e38 if ((interruptMode = checkInterruptWhileWaiting(node)) != 0) break; // \u4e5f\u6709\u53ef\u80fd\u662f\u7531\u4e8e\u672a\u77e5\u539f\u56e0\u800c\u9192\u8fc7\u6765\uff0c\u8fd9\u65f6\u5019interruptMode\u4e0d\u662f0\uff0c\u6240\u4ee5\u9700\u8981\u4e00\u4e2a\u5faa\u73af\u6765\u786e\u4fdd\u5f53\u524d\u7ebf\u7a0b\u88ab\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\u4e2d } // \u5f53\u524d\u7ebf\u7a0b\u4e0e\u540c\u6b65\u961f\u5217\u4e2d\u5176\u5b83\u7684\u7ebf\u7a0b\u8fdb\u884c\u7ade\u4e89\uff0c\u76f4\u5230\u5f53\u524d\u7ebf\u7a0b\u83b7\u53d6\u5230state\u7684\u4f7f\u7528\u6743 if (acquireQueued(node, savedState) && interruptMode != THROW_IE) interruptMode = REINTERRUPT; // \u904d\u5386\u6761\u4ef6\u961f\u5217\uff0c\u79fb\u9664\u6240\u6709\u88ab\u53d6\u6d88\u7684\u7ebf\u7a0b if (node.nextWaiter != null) // clean up if cancelled unlinkCancelledWaiters(); // \u5982\u679c\u88ab\u4e2d\u65ad\u4e86\uff0c\u5e76\u4e14\u662f\u901a\u8fc7\u5176\u4ed6\u7ebf\u7a0b\u5c06\u5f53\u524d\u7ebf\u7a0b\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\u4e2d\u7684 if (interruptMode != 0) reportInterruptAfterWait(interruptMode); } private Node addConditionWaiter() { Node t = lastWaiter; // If lastWaiter is cancelled, clean out. if (t != null && t.waitStatus != Node.CONDITION) { unlinkCancelledWaiters(); t = lastWaiter; } Node node = new Node(Thread.currentThread(), Node.CONDITION); if (t == null) firstWaiter = node; else t.nextWaiter = node; lastWaiter = node; return node; } // \u904d\u5386\u6761\u4ef6\u961f\u5217\uff0c\u79fb\u9664\u6240\u6709\u88ab\u53d6\u6d88\u7684\u7ebf\u7a0b private void unlinkCancelledWaiters() { Node t = firstWaiter; Node trail = null; // \u4ece\u524d\u5411\u540e\u904d\u5386\u6761\u4ef6\u961f\u5217 while (t != null) { Node next = t.nextWaiter; // \u5728\u6761\u4ef6\u961f\u5217\u4e2d\uff0c\u5982\u679cwaitStatus != CONDITION\uff0c\u8868\u793a\u7ebf\u7a0b\u88ab\u53d6\u6d88 if (t.waitStatus != Node.CONDITION) { t.nextWaiter = null; if (trail == null) firstWaiter = next; else trail.nextWaiter = next; if (next == null) lastWaiter = trail; } else trail = t; t = next; } } // \u7ebf\u7a0b\u9192\u8fc7\u6765\u4e4b\u540e\u68c0\u67e5\u662f\u5426\u88ab\u4e2d\u65ad\uff0c // \u5982\u679c\u6ca1\u6709\u88ab\u4e2d\u65ad\uff0c\u8fd4\u56de0\uff1b // \u5982\u679c\u88ab\u4e2d\u65ad\u4e86\uff0c\u4e14\u81ea\u5df1\u53ef\u4ee5\u5c06\u5f53\u524d\u7ebf\u7a0b\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\u4e2d\uff0c\u8fd4\u56deTHROW_IE\uff1b // \u5982\u679c\u88ab\u4e2d\u65ad\u4e86\uff0c\u901a\u8fc7\u7b49\u5f85\u5176\u5b83\u7ebf\u7a0b\u5c06\u5f53\u524d\u7ebf\u7a0b\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\u4e2d\uff0c\u8fd4\u56deREINTERRUPT\u3002 private int checkInterruptWhileWaiting(Node node) { return Thread.interrupted() ? (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : 0; } // \u5c06\u5f53\u524d\u7ebf\u7a0b\u6dfb\u52a0\u5230\u540c\u6b65\u961f\u5217\u4e2d\uff0c\u8fd4\u56de\u662f\u5426\u81ea\u5df1\u53ef\u4ee5\u5c06\u81ea\u5df1\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\u4e2d final boolean transferAfterCancelledWait(Node node) { if (compareAndSetWaitStatus(node, Node.CONDITION, 0)) { enq(node); return true; } /* * If we lost out to a signal(), then we can't proceed * until it finishes its enq(). Cancelling during an * incomplete transfer is both rare and transient, so just * spin. */ // \u7b49\u5f85\u5176\u4ed6\u7ebf\u7a0b\u901a\u8fc7signal\u628a\u5f53\u524d\u7ebf\u7a0b\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\u4e2d while (!isOnSyncQueue(node)) Thread.yield(); return false; } private void reportInterruptAfterWait(int interruptMode) throws InterruptedException { // \u4e2d\u65ad\u4e4b\u540e\u629b\u5f02\u5e38 if (interruptMode == THROW_IE) throw new InterruptedException(); // \u4e2d\u65ad\u4e4b\u540e\u5f53\u524d\u7ebf\u7a0b\u91cd\u65b0\u8fdb\u5165\u4e2d\u65ad\u72b6\u6001 else if (interruptMode == REINTERRUPT) selfInterrupt(); } // \u5c06\u6761\u4ef6\u961f\u5217\u4e2d\u7684\u6240\u6709\u7ebf\u7a0b\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\u4e2d public final void signal() { if (!isHeldExclusively()) throw new IllegalMonitorStateException(); Node first = firstWaiter; if (first != null) // \u5c06\u6761\u4ef6\u961f\u5217\u4e2d\u7684\u6240\u6709\u7ebf\u7a0b\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\u4e2d doSignal(first); } private void doSignal(Node first) { do { if ( (firstWaiter = first.nextWaiter) == null) lastWaiter = null; first.nextWaiter = null; } while (!transferForSignal(first) && (first = firstWaiter) != null); } final boolean transferForSignal(Node node) { /* * If cannot change waitStatus, the node has been cancelled. */ // \u5982\u679c\u7ebf\u7a0b\u5df2\u88ab\u53d6\u6d88\uff0c\u5c31\u4e0d\u653e\u5165\u540c\u6b65\u961f\u5217\u4e2d if (!compareAndSetWaitStatus(node, Node.CONDITION, 0)) return false; /* * Splice onto queue and try to set waitStatus of predecessor to * indicate that thread is (probably) waiting. If cancelled or * attempt to set waitStatus fails, wake up to resync (in which * case the waitStatus can be transiently and harmlessly wrong). */ Node p = enq(node); int ws = p.waitStatus; // \u5982\u679c\u540c\u6b65\u961f\u5217\u4e2d\u524d\u4e00\u4e2a\u7ebf\u7a0b\u5df2\u88ab\u53d6\u6d88\u6216\u8005\u5c06\u524d\u4e00\u4e2a\u7ebf\u7a0b\u72b6\u6001\u8bbe\u7f6e\u6210signal\u5931\u8d25\uff0c\u5c31\u5524\u9192\u8be5\u7ebf\u7a0b\u4e0e\u540c\u6b65\u961f\u5217\u5176\u5b83\u7ebf\u7a0b\u7ade\u4e89 if (ws > 0 || !compareAndSetWaitStatus(p, ws, Node.SIGNAL)) LockSupport.unpark(node.thread); return true; } } \u6838\u5fc3\u6210\u5458 \u00b6 /** * \u7b49\u5f85\u961f\u5217\u7684\u5934\u7ed3\u70b9\uff0c\u5b83\u662f\u4e00\u4e2a\u865a\u62df\u8282\u70b9\uff0c\u5ef6\u8fdf\u521d\u59cb\u5316\u3002 * \u5982\u679chead != null\uff0c\u53ef\u4ee5\u4fdd\u8bc1head.waitStatus\u4e0d\u662fCANCELLED */ private transient volatile Node head; // \u7b49\u5f85\u961f\u5217\u5c3e\u8282\u70b9\uff0c\u53ea\u80fd\u901a\u8fc7enq\u6765\u52a0\u5165\u65b0\u7b49\u5f85\u8282\u70b9 private transient volatile Node tail; // AQS\u5bf9\u8c61\u7684\u72b6\u6001\uff0c\u521d\u59cb\u503c\u662f0\uff0c\u8868\u793astate\u6ca1\u6709\u88ab\u4efb\u4f55\u7ebf\u7a0b\u5360\u6709 // AQS\u6700\u91cd\u8981\u7684\u6210\u5458\uff0c\u4e0d\u540c\u573a\u666f\u4e0b\u5177\u6709\u4e0d\u540c\u7684\u542b\u4e49\uff0c\u4e00\u822c\u6307\u9501\u88ab\u5f15\u7528\u7684\u6b21\u6570 // AQS\u63d0\u4f9b\u4e86\u7ade\u4e89\u8fd9\u4e2a\u72b6\u6001\u503c\u5360\u6709\u6743\u7684\u6846\u67b6 private volatile int state; \u6838\u5fc3\u65b9\u6cd5 \u00b6 public abstract class AbstractQueuedSynchronizer extends AbstractOwnableSynchronizer implements java.io.Serializable { // \u5728\u72ec\u5360\u6a21\u5f0f\u4e0b\u83b7\u53d6state\u7684\u5360\u6709\u6743\uff0c\u5e76\u4f7fstate\u52a0arg public final void acquire(int arg) { /** * tryAcquire\u5728FairSync\u548cNonfairSync\u7b49AQS\u7684\u5b50\u7c7b\u4e2d\u88ab\u5b9e\u73b0\u3002 * * \u9996\u5148\u8c03\u7528tryAcquire\u65b9\u6cd5\u6765\u5c1d\u8bd5\u72ec\u5360\u5e76\u4fee\u6539state\uff0c * tryAcquire\u5982\u679c\u8fd4\u56defalse\uff0c\u5c31\u8bf4\u660e\u5df2\u7ecf\u6709thread\u83b7\u5f97\u4e86state\u7684\u5360\u6709\u6743\uff0c\u5f53\u524d\u7ebf\u7a0b\u65e0\u6743\u4fee\u6539state\uff0c * \u8fd9\u65f6\u5019\uff08\u6267\u884cacquireQueued\u65b9\u6cd5\uff09\u628a\u5f53\u524d\u8282\u70b9\u5165\u961f\u5e76\u53c2\u4e0e\u7ade\u4e89state\u7684\u5360\u6709\u6743\uff0c\u5f53\u524d\u8282\u70b9\u53d8\u4e3a\u9996\u8282\u70b9\u7684\u65f6\u5019\u83b7\u5f97state\u7684\u5360\u6709\u6743\uff0cstate\u52a0arg\u3002 * \u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u5728\u7ade\u4e89\u8fc7\u7a0b\u4e2d\u88ab\u4e2d\u65ad\u8fc7\uff0c\u5219\u628a\u5f53\u524d\u7ebf\u7a0b\u6062\u590d\u5230\u4e2d\u65ad\u72b6\u6001\u3002 */ if (!tryAcquire(arg) && acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) selfInterrupt(); } // \u6dfb\u52a0\u5f53\u524d\u7ebf\u7a0b\u8282\u70b9\u5230\u7b49\u5f85\u961f\u5217\u4e2d private Node addWaiter(Node mode) { // \u6784\u9020\u7ebf\u7a0b\u8282\u70b9 Node node = new Node(Thread.currentThread(), mode); // Try the fast path of enq; backup to full enq on failure Node pred = tail; if (pred != null) { node.prev = pred; // CAS\u64cd\u4f5c\uff0c\u66f4\u65b0\u5c3e\u8282\u70b9 if (compareAndSetTail(pred, node)) { pred.next = node; return node; } } // pred\u662f\u7a7a\u6216\u8005CAS\u64cd\u4f5c\u5931\u8d25\uff08\u5c3e\u8282\u70b9\u5df2\u53d8\uff09\uff0c\u5c31\u5165\u961f enq(node); return node; } // \u5faa\u73af\u5d4c\u5957CAS\uff0c\u76f4\u5230CAS\u6210\u529f\u4e3a\u6b62 // \u5c06\u8282\u70b9node\u52a0\u5165\u5230\u7b49\u5f85\u961f\u5217\u5c3e\u90e8 private Node enq(final Node node) { for (;;) { Node t = tail; // \u961f\u5217\u4e3a\u7a7a if (t == null) { // Must initialize // \u6ce8\u610f\u8fd9\u65f6\u5019\u521b\u5efa\u5e76\u8bbe\u7f6e\u865a\u62df\u7684\u5934\u7ed3\u70b9\uff0c\u800c\u4e0d\u662f\u5728\u521b\u5efaAQS\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u5c5e\u4e8e\u5ef6\u8fdf\u52a0\u8f7d\uff0c\u521b\u5efa\u5b8c\u865a\u62df\u5934\u7ed3\u70b9\u4ecd\u7136\u7ee7\u7eed\u5faa\u73af if (compareAndSetHead(new Node())) tail = head; } else { node.prev = t; if (compareAndSetTail(t, node)) { t.next = node; return t; } } } } /* * \u5728\u72ec\u5360\u4e0d\u53ef\u4e2d\u65ad\u6a21\u5f0f\u4e0b\uff0c\u5f53\u524d\u7ebf\u7a0b\u4e0eSync\u961f\u5217\u4e2d\u7684\u5176\u5b83\u7ebf\u7a0b\u7ade\u4e89\u3002 * \u5f53\u524d\u7ebf\u7a0b\u6210\u4e3a\u961f\u5217\u4e2d\u9996\u8282\u70b9\u7684\u65f6\uff0c\u5b83\u83b7\u5f97state\u7684\u5360\u6709\u6743\uff0c\u5e76\u7d66state\u52a0arg\uff1b * \u5426\u5219\uff0cSync\u961f\u5217\u4e2d\u5b58\u5728\u6709\u6548\uff08\u6ca1\u6709\u88ab\u53d6\u6d88\uff09\u7684\u7ebf\u7a0b\uff0c\u7531\u4e8e\u961f\u5217\u4e2d\u524d\u9762\u7684\u7ebf\u7a0b\u62e5\u6709\u66f4\u9ad8\u7684\u6743\u5229\u4f7f\u7528state\uff0c * \u6240\u4ee5\u5f53\u524d\u7ebf\u7a0b\u5c31\u9700\u8981\u963b\u585e\uff0c\u5f53\u524d\u4e00\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u5b8cstate\u4e4b\u540e\u5524\u9192\u5f53\u524d\u7ebf\u7a0b\u3002 * \u7ebf\u7a0b\u5904\u4e8e\u963b\u585e\u72b6\u6001\u65f6\uff0c\u4e5f\u53ef\u4ee5\u88ab\u4e2d\u65ad\u800c\u9192\u6765\uff0c\u7531\u4e8e\u662f\u4e0d\u53ef\u4e2d\u65ad\u6a21\u5f0f\uff0c\u6240\u4ee5\u4f1a\u8bb0\u5f55\u5e76\u6e05\u9664\u4e2d\u65ad\u72b6\u6001\uff0c * \u5c06\u4e2d\u65ad\u72b6\u6001\u8fd4\u56de\u7ed9\u8c03\u7528\u65b9\u5904\u7406\uff0c\u4f8b\u5982acquire\u4e2d\u4f1a\u628a\u5f53\u524d\u7ebf\u7a0b\u6062\u590d\u5230\u4e2d\u65ad\u72b6\u6001\u3002 */ final boolean acquireQueued(final Node node, int arg) { boolean failed = true; try { boolean interrupted = false; for (;;) { // \u7b49\u5f85\u961f\u5217\u662f\u4e00\u4e2a\u53cc\u5411\u5217\u8868\uff0c\u8fd9\u91ccp\u662fnode\u7684\u524d\u8282\u70b9 final Node p = node.predecessor(); // \u5982\u679c\u662f\u961f\u5217\u4e2d\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5c31\u83b7\u5f97state\u7684\u5360\u6709\u6743\uff0c\u5e76\u4f7f\u7528state if (p == head && tryAcquire(arg)) { setHead(node); p.next = null; // help GC failed = false; return interrupted; } // \u5982\u679c\u4e0d\u662f\u961f\u5217\u4e2d\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u90a3\u4e48\u7ade\u4e89\u5931\u8d25\uff0c\u5b83\u65e0\u6743\u4f7f\u7528state\uff0c // \u68c0\u67e5\u961f\u5217\u4e2d\u524d\u9762\u7684\u7ebf\u7a0b\u662f\u5426\u6709\u6548\uff08\u6ca1\u6709\u88ab\u53d6\u6d88\uff09\uff0c\u5982\u679c\u5b58\u5728\u6709\u6548\u7684\u7ebf\u7a0b\uff0c // \u5f53\u524d\u7ebf\u7a0b\u5c31\u9700\u8981\u963b\u585e\uff0c\u5728\u7ebf\u7a0b\u9192\u8fc7\u6765\u4e4b\u540e\u68c0\u67e5\u662f\u5426\u88ab\u4e2d\u65ad\uff0c\u5982\u679c\u88ab\u4e2d\u65ad\u4e86\uff0c // \u5c31\u6e05\u9664\u4e2d\u65ad\u6807\u5fd7\u4f4d\u7ee7\u7eed\u7ade\u4e89state\u7684\u4f7f\u7528\u6743\uff0c\u4f46\u662f\u8981\u8bb0\u5f55\u5f53\u524d\u7ebf\u7a0b\u5728\u7ade\u4e89\u8fc7\u7a0b\u88ab\u4e2d\u65ad\u8fc7 if (shouldParkAfterFailedAcquire(p, node) && parkAndCheckInterrupt()) interrupted = true; } } finally { if (failed) cancelAcquire(node); } } // \u5934\u7ed3\u70b9\u51fa\u7b49\u5f85\u961f\u5217 private void setHead(Node node) { head = node; node.thread = null; node.prev = null; } // \u5982\u679c\u961f\u5217\u4e2d\u5b58\u5728\u6709\u6548\u7684\u7ebf\u7a0b\uff08\u6ca1\u6709\u88ab\u53d6\u6d88\u7684\uff09\u6392\u5728\u5f53\u524d\u7ebf\u7a0b\u524d\u9762\uff0c\u90a3\u4e48\u5f53\u524d\u7ebf\u7a0b\u5c31\u9700\u8981\u88ab\u963b\u585e\uff0c\u56e0\u4e3a\u524d\u9762\u7684\u7ebf\u7a0b\u7b49\u4e86\u66f4\u957f\u7684\u65f6\u95f4\uff0c\u62e5\u6709\u66f4\u9ad8\u7684\u4f7f\u7528\u6743 private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) { //waitStatus\u521d\u59cb\u503c\u4e3a0 int ws = pred.waitStatus; // \u524d\u4e00\u4e2a\u7ebf\u7a0b\u672a\u4f7f\u7528\u5b8cstate\uff0c\u5f53\u524d\u7ebf\u7a0b\u5c31\u8981\u88ab\u963b\u585e if (ws == Node.SIGNAL) // pred\u8282\u70b9\u6b63\u5728\u8bf7\u6c42\u4e00\u4e2asignal\u4fe1\u53f7\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u88ab\u5b89\u5168\u6302\u8d77 return true; // \u5728Sync\u961f\u5217\u4e2d\uff0c\u5982\u679c\u5927\u4e8e0\u8868\u793a\u7ebf\u7a0b\u5904\u4e8e\u88ab\u53d6\u6d88\u7684\u72b6\u6001\uff0c // \u88ab\u53d6\u6d88\u7684\u7ebf\u7a0b\u6ca1\u6709\u5fc5\u8981\u83b7\u53d6state\u7684\u4f7f\u7528\u6743\uff0c\u6240\u4ee5\u76f4\u63a5\u4ece\u961f\u5217\u4e2d\u5220\u9664\u53d6\u6d88\u7684\u7ebf\u7a0b\uff0c\u4e0d\u8ba9\u5b83\u4eec\u53c2\u4e0e\u7ade\u4e89\u3002\u6682\u65f6\u4e0d\u6302\u8d77\u5f53\u524d\u7ebf\u7a0b\u3002 if (ws > 0) { // \u5220\u9664\u6240\u6709\u88ab\u53d6\u6d88\u7684\u5148\u7ee7\u8282\u70b9 do { node.prev = pred = pred.prev; } while (pred.waitStatus > 0); pred.next = node; } else { /* * waitStatus must be 0 or PROPAGATE. Indicate that we * need a signal, but don't park yet. Caller will need to * retry to make sure it cannot acquire before parking. */ // \u524d\u4e00\u4e2a\u8282\u70b9\u6ca1\u6709\u88ab\u53d6\u6d88\uff0c\u6682\u65f6\u4e0d\u6302\u8d77\u5f53\u524d\u7ebf\u7a0b\uff0c\u5c06\u524d\u4e00\u4e2a\u7ebf\u7a0b\u72b6\u6001\u8bbe\u7f6e\u4e3a\u9700\u8981sigal\u4fe1\u53f7\uff08\u672a\u4f7f\u7528\u5b8cstate\uff09\uff0c // \u4e0b\u6b21\u7ade\u4e89\u5982\u679c\u53d1\u73b0\u524d\u4e00\u4e2a\u7ebf\u7a0b\u4ecd\u6ca1\u6709\u4f7f\u7528\u5b8cstate\u518d\u6302\u8d77 compareAndSetWaitStatus(pred, ws, Node.SIGNAL); } return false; } private final boolean parkAndCheckInterrupt() { // \u6302\u8d77\u5f53\u524d\u7ebf\u7a0b\uff0c\u5728\u88ab\u6302\u8d77\u7684\u60c5\u51b5\u4e0b\uff0c\u6709\u4e09\u79cd\u60c5\u51b5\u4f1a\u88ab\u5524\u9192\uff0c\u5177\u4f53\u89c1park\u65b9\u6cd5\u6ce8\u91ca LockSupport.park(this); // \u83b7\u53d6\u4e2d\u65ad\u6807\u8bb0\uff0c\u5982\u679c\u4e2d\u65ad\u6807\u8bb0\u662ftrue\uff0c\u4f1a\u6e05\u9664\u4e2d\u65ad\u6807\u8bb0 return Thread.interrupted(); } // \u91ca\u653estate\u7684\u4f7f\u7528\u6743 final int fullyRelease(Node node) { boolean failed = true; try { int savedState = getState(); if (release(savedState)) { failed = false; return savedState; } else { throw new IllegalMonitorStateException(); } } finally { if (failed) node.waitStatus = Node.CANCELLED; } } public final boolean release(int arg) { // \u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u91ca\u653estate\u4f7f\u7528\u6743\u6210\u529f\uff08\u72ec\u5360\u6a21\u5f0f\u5373\u6709\u6743\u5229\u5c06state\u51cfarg\u6210\u529f\uff09\uff0c // \u5c31\u5524\u9192\u961f\u5217\u4e2d\u7684\u7b49\u5f85\u7684\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u3002 if (tryRelease(arg)) { // head\u6307\u5411\u7684\u662f\u865a\u8282\u70b9\uff0c\u6ca1\u6709\u8bb0\u5f55\u7ebf\u7a0bid\uff0chead\u4e0b\u4e00\u4e2a\u8282\u70b9\u624d\u5b58\u4e86\u7b2c\u4e00\u4e2a\u7ebf\u7a0b Node h = head; if (h != null && h.waitStatus != 0) unparkSuccessor(h); return true; } return false; } // \u5524\u9192node\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 private void unparkSuccessor(Node node) { /* * If status is negative (i.e., possibly needing signal) try * to clear in anticipation of signalling. It is OK if this * fails or if status is changed by waiting thread. */ int ws = node.waitStatus; if (ws < 0) compareAndSetWaitStatus(node, ws, 0); // \u627e\u5230\u4e0b\u4e00\u4e2a\u6ca1\u6709\u88ab\u53d6\u6d88\u7684\u7ebf\u7a0b\u8282\u70b9\uff0c\u5728sync\u961f\u5217\u4e2d\uff0cwaitStatus > 0 \u8868\u793a\u5f53\u524d\u8282\u70b9\u4e2d\u7684\u7ebf\u7a0b\u88ab\u53d6\u6d88 Node s = node.next; if (s == null || s.waitStatus > 0) { s = null; //\u4ece\u540e\u5411\u524d\u904d\u5386\uff0c\u627e\u5230\u6700\u524d\u9762\u7684\u4e00\u4e2a\u6ca1\u6709\u88ab\u53d6\u6d88\u7684\u7ebf\u7a0b for (Node t = tail; t != null && t != node; t = t.prev) if (t.waitStatus <= 0) s = t; } if (s != null) LockSupport.unpark(s.thread); } } AbstractOwnableSynchronizer \u00b6 AQS\u7ee7\u627f\u4e86\u8fd9\u4e2a\u62bd\u8c61\u7c7b\uff0c\u8fd9\u4e2a\u7c7b\u975e\u5e38\u7b80\u5355\uff0c\u6240\u6709\u6210\u5458\u53ca\u65b9\u6cd5\u5b9a\u4e49\u5982\u4e0b\uff1a public abstract class AbstractOwnableSynchronizer implements java.io.Serializable { protected AbstractOwnableSynchronizer() { } // \u72ec\u5360\u72ec\u5360\u6a21\u5f0f\u4e0b\u5360\u6709Synchronizer\u7684\u7ebf\u7a0b\u5bf9\u8c61 private transient Thread exclusiveOwnerThread; // \u8d4b\u4e88thread\u5bf9\u9501\u7684\u6392\u4ed6\u8bbf\u95ee\u6743\u9650 protected final void setExclusiveOwnerThread(Thread thread) { exclusiveOwnerThread = thread; } // \u83b7\u53d6\u72ec\u5360\u9501\u7684\u7ebf\u7a0b\u5bf9\u8c61 protected final Thread getExclusiveOwnerThread() { return exclusiveOwnerThread; } }","title":"java.util.concurrent.locks\u6e90\u7801\u5256\u6790"},{"location":"java%E5%90%8E%E7%AB%AF/java.util.concurrent.locks%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#javautilconcurrentlocks","text":"","title":"java.util.concurrent.locks\u6e90\u7801\u5256\u6790"},{"location":"java%E5%90%8E%E7%AB%AF/java.util.concurrent.locks%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#_1","text":"\u82f1\u6587\u6587\u6863 \u82f1\u6587 jenkov \u4e2d\u6587 defonds","title":"\u53c2\u8003"},{"location":"java%E5%90%8E%E7%AB%AF/java.util.concurrent.locks%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#lock","text":"\u63a5\u53e3\u5b9a\u4e49\uff1a package java.util.concurrent.locks; import java.util.concurrent.TimeUnit; public interface Lock { void lock(); void lockInterruptibly() throws InterruptedException; boolean tryLock(); boolean tryLock(long time, TimeUnit unit) throws InterruptedException; void unlock(); // \u4f9d\u8d56\u4e8eCondition\u63a5\u53e3 Condition newCondition(); }","title":"Lock\u63a5\u53e3"},{"location":"java%E5%90%8E%E7%AB%AF/java.util.concurrent.locks%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#condition","text":"public interface Condition { void await() throws InterruptedException; void awaitUninterruptibly(); long awaitNanos(long nanosTimeout) throws InterruptedException; boolean await(long time, TimeUnit unit) throws InterruptedException; boolean awaitUntil(Date deadline) throws InterruptedException; void signal(); void signalAll(); }","title":"Condition\u63a5\u53e3"},{"location":"java%E5%90%8E%E7%AB%AF/java.util.concurrent.locks%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#reentrantlock","text":"\u53c2\u8003\u8fd9\u7bc7 \u300aReentrantLock\u6e90\u7801\u5206\u6790\u300b","title":"ReentrantLock"},{"location":"java%E5%90%8E%E7%AB%AF/java.util.concurrent.locks%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#_2","text":"ReentrantLock\u53ea\u6709\u4e00\u4e2a\u6210\u5458sync // \u63d0\u4f9b\u6240\u6709\u5b9e\u73b0\u673a\u5236\u7684\u540c\u6b65\u5668 private final Sync sync;","title":"\u6838\u5fc3\u6210\u5458"},{"location":"java%E5%90%8E%E7%AB%AF/java.util.concurrent.locks%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#_3","text":"\u53ef\u4ee5\u770b\u51faReentrantLock\u53ea\u662fSync\u7684\u4e00\u4e2a\u4ee3\u7406 public class ReentrantLock implements Lock, java.io.Serializable { // \u9ed8\u8ba4\u662f\u975e\u516c\u5e73\u9501 public ReentrantLock() { sync = new NonfairSync(); } public void lock() { sync.lock(); } public void unlock() { sync.release(1); } public boolean tryLock() { return sync.nonfairTryAcquire(1); } // \u8981\u6c42\u72b6\u6001\u503c\u51cf\u91ca\u653e\u6570\uff0c\u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u4e0d\u662f\u72ec\u81ea\u6a21\u5f0f\u4e0b\u7684\u62e5\u6709\u8005\uff0c\u90a3\u4e48\u5b83\u65e0\u6743\u4fee\u6539\u72b6\u6001\u503c\uff0c\u629b\u5f02\u5e38\uff0c\u53ef\u89c1ReentrantLock\u662f\u72ec\u5360\u9501 protected final boolean tryRelease(int releases) { // \u8ba1\u7b97\u65b0\u7684\u72b6\u6001\u503c int c = getState() - releases; // \u5982\u679c\u7ebf\u7a0b\u4e0d\u662f\u72ec\u81ea\u6a21\u5f0f\u4e0b\u7684\u62e5\u6709\u8005\uff0c\u90a3\u4e48\u5b83\u5c31\u65e0\u6743\u8981\u6c42\u4fee\u6539\u72b6\u6001\u503c\uff0c\u5c31\u629b\u51fa\u5f02\u5e38 if (Thread.currentThread() != getExclusiveOwnerThread()) throw new IllegalMonitorStateException(); boolean free = false; if (c == 0) { free = true; setExclusiveOwnerThread(null); } setState(c); return free; } public Condition newCondition() { return sync.newCondition(); } }","title":"\u6838\u5fc3\u65b9\u6cd5"},{"location":"java%E5%90%8E%E7%AB%AF/java.util.concurrent.locks%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#_4","text":"\u6211\u4eec\u4e3b\u8981\u5173\u5fc3\u8fd9\u4e9b\u6570\u636e\u7ed3\u6784\u7684\u6210\u5458\u4ee5\u53ca\u6838\u5fc3\u65b9\u6cd5","title":"\u6570\u636e\u7ed3\u6784"},{"location":"java%E5%90%8E%E7%AB%AF/java.util.concurrent.locks%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#sync","text":"\u4ece\u5b9a\u4e49\u53ef\u4ee5\u770b\u51faSync\u662f\u4e00\u4e2a\u62bd\u8c61\u7c7b\uff0c\u7ee7\u627f\u4e86AbstractQueuedSynchronizer\uff0c\u5b83\u7684\u5b9e\u73b0\u7c7b\u6709FairSync\u548cNonfairSync. abstract static class Sync extends AbstractQueuedSynchronizer { // \u6ca1\u6709\u5b9a\u4e49\u6210\u5458 // \u5b50\u7c7b\u9700\u8981\u53bb\u5b9e\u73b0lock abstract void lock(); final ConditionObject newCondition() { // ConditionObject\u7ee7\u627f\u81eaAbstractQueuedSynchronizer return new ConditionObject(); } }","title":"Sync"},{"location":"java%E5%90%8E%E7%AB%AF/java.util.concurrent.locks%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#nonfairsync","text":"\u9ed8\u8ba4\u7684\u540c\u6b65\u673a\u5236\uff0c\u53d1\u73b0\u8fd9\u4e2a\u7c7b\u975e\u5e38\u7b80\u5355\uff0c\u4e3b\u8981\u8c03\u7528AbstractQueuedSynchronizer\uff0c\u56e0\u6b64\uff0c\u8981\u4e86\u89e3ReentrantLock\uff0c\u6700\u91cd\u8981\u7684\u662f\u4e86\u89e3AbstractQueuedSynchronizer\uff0c\u540c\u65f6\u6ce8\u610f\u5bf9\u6bd4FairSync\u548cNonfairSync\u3002 \u975e\u516c\u5e73\u9501\uff08Nonfair\uff09\uff1a\u83b7\u53d6\u9501\u65f6\u4e0d\u8003\u8651\u6392\u961f\u7b49\u5f85\u95ee\u9898\uff0c\u76f4\u63a5\u5c1d\u8bd5\u83b7\u53d6\u9501\uff0c\u83b7\u53d6\u4e0d\u5230\u81ea\u52a8\u5230\u961f\u5c3e\u7b49\u5f85 static final class NonfairSync extends Sync { final void lock() { // \u5982\u679csync\u4e2d\u7684state\u6ca1\u6709\u88ab\u4efb\u4f55\u7ebf\u7a0b\u5360\u6709\uff0c\u5219\u8bbe\u5b9a\u5f53\u524d\u7ebf\u7a0b\u4e3a\u9501\u7684\u62e5\u6709\u8005 if (compareAndSetState(0, 1)) // AbstractOwnableSynchronizer\u4e2d\u7684\u65b9\u6cd5\uff0c\u8bbe\u7f6e\u5f53\u524d\u7ebf\u7a0b\u4e3a\u9501\u7684\u62e5\u6709\u8005 setExclusiveOwnerThread(Thread.currentThread()); // \u5426\u5219\u5f53\u524d\u7ebf\u7a0b\u9700\u8981\u548csync\u961f\u5217\u4e2d\u7684\u5176\u5b83\u7ebf\u7a0b\u7ade\u4e89state\u7684\u5360\u6709\u6743 else acquire(1); } protected final boolean tryAcquire(int acquires) { return nonfairTryAcquire(acquires); } //\u975e\u516c\u5e73\u9501\u7684\u83b7\u53d6\u65b9\u6cd5\uff0c\u503c\u5f97\u6ce8\u610f\u7684\u662f\uff1a\u8fd9\u4e2a\u65b9\u6cd5\u5b9e\u9645\u662f\u5728NonfairSync\u7684\u7236\u7c7bSync\u4e2d final boolean nonfairTryAcquire(int acquires) { final Thread current = Thread.currentThread(); // \u83b7\u53d6state\u7684\u503c int c = getState(); // \u5982\u679cstate\u6ca1\u88ab\u5360\u6709\uff0c\u5c31\u72ec\u5360\u5b83 if (c == 0) { if (compareAndSetState(0, acquires)) { setExclusiveOwnerThread(current); return true; } } // \u5982\u679cstate\u5df2\u7ecf\u88ab\u5360\u6709\uff0c\u5e76\u4e14\u662f\u88ab\u5f53\u524d\u7ebf\u7a0b\u5360\u6709\u7684 else if (current == getExclusiveOwnerThread()) { int nextc = c + acquires; // \u5982\u679c\u5f15\u7528\u6b21\u6570\u6ea2\u51fa\uff0c\u629b\u51fa\u5f02\u5e38\u800c\u4e0d\u662f\u8fd4\u56defalse if (nextc < 0) // overflow throw new Error(\"Maximum lock count exceeded\"); // \u66f4\u65b0\u5f15\u7528\u6b21\u6570 setState(nextc); return true; } // \u5982\u679c\u5df2\u88ab\u5176\u4ed6\u7ebf\u7a0b\u5360\u6709\uff0c\u90a3\u4e48\u4e0d\u80fd\u4fee\u6539state\u7684\u503c return false; } }","title":"NonfairSync"},{"location":"java%E5%90%8E%E7%AB%AF/java.util.concurrent.locks%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#fairsync","text":"\u516c\u5e73\u9501\uff08Fair\uff09\uff1a\u52a0\u9501\u524d\u68c0\u67e5\u662f\u5426\u6709\u6392\u961f\u7b49\u5f85\u7684\u7ebf\u7a0b\uff0c\u4f18\u5148\u6392\u961f\u7b49\u5f85\u7684\u7ebf\u7a0b\uff0c\u5148\u6765\u5148\u5f97 static final class FairSync extends Sync { private static final long serialVersionUID = -3000897897090466540L; final void lock() { acquire(1); } /** * Fair version of tryAcquire. Don't grant access unless * recursive call or no waiters or is first. */ protected final boolean tryAcquire(int acquires) { final Thread current = Thread.currentThread(); int c = getState(); // \u6ca1\u6709\u6ca1\u7ebf\u7a0b\u5360\u6709 if (c == 0) { // \u5fc5\u987b\u662f\u961f\u5217\u4e2d\u7684\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u624d\u80fd\u83b7\u53d6state\u7684\u4f7f\u7528\u6743\uff0c\u4fee\u6539state\u7684\u503c if (!hasQueuedPredecessors() && compareAndSetState(0, acquires)) { setExclusiveOwnerThread(current); return true; } } // \u5f53\u524d\u7ebf\u7a0b\u5df2\u7ecf\u83b7\u5f97state\u7684\u4f7f\u7528\u6743 else if (current == getExclusiveOwnerThread()) { int nextc = c + acquires; if (nextc < 0) throw new Error(\"Maximum lock count exceeded\"); setState(nextc); return true; } return false; } }","title":"FairSync"},{"location":"java%E5%90%8E%E7%AB%AF/java.util.concurrent.locks%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#abstractqueuedsynchronizer","text":"\u7b80\u79f0AQS\uff0c\u662f\u4e00\u4e2a\u975e\u5e38\u6838\u5fc3\u7684\u7c7b\uff0c\u4e5f\u662f\u672c\u6587\u7684\u91cd\u70b9\u5173\u6ce8\u5bf9\u8c61\u3002\u5176\u5b9eAQS\u4e3b\u8981\u5c31\u662f\u7ef4\u62a4\u4e86\u4e00\u4e2a\u72b6\u6001\u503c\uff0crelease\u5bf9\u72b6\u6001\u503c\u505a\u51cf\u6cd5\uff0cacquire\u5bf9\u72b6\u6001\u503c\u505a\u52a0\u6cd5\u3002\u5e76\u4e14AQS\u63d0\u4f9b\u4e86\u72ec\u5360\u548c\u5171\u4eab\u4e24\u79cd\u6a21\u5f0f\u3002","title":"AbstractQueuedSynchronizer"},{"location":"java%E5%90%8E%E7%AB%AF/java.util.concurrent.locks%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#_5","text":"AQS\u4e2d\u6709\u4e24\u4e2a\u5185\u90e8\u7c7b\uff1aNode\u548cConditionObject\u3002","title":"\u5185\u90e8\u7c7b"},{"location":"java%E5%90%8E%E7%AB%AF/java.util.concurrent.locks%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#node","text":"Node\u662f\u7b49\u5f85\u961f\u5217\u4e2d\u7684\u8282\u70b9\u7c7b\u3002 \u7b49\u5f85\u961f\u5217\u662f \"CLH\" (Craig, Landin, and Hagersten)\u9501\u961f\u5217 \u7684\u4e00\u79cd\u53d8\u4f53\u3002CLH\u9501\u4e00\u822c\u7528\u4f5c \u81ea\u65cb\u9501\uff08spinlocks\uff09 \u3002\u7136\u800c\u8fd9\u91cc\u4f7f\u7528\u4e86\u76f8\u540c\u7684\u7b56\u7565\uff0c\u628a\u5173\u4e8ethread\u7684\u63a7\u5236\u4fe1\u606f\u4fdd\u5b58\u5728\u524d\u4e00\u4e2a\u8282\u70b9\u4e2d\uff0c\u53ea\u4e0d\u8fc7\u4f1a\u963b\u585e\u3002\u6bcf\u4e2a\u8282\u70b9\u4e2d\u7684\u72b6\u6001\u5b57\u6bb5\u90fd\u8bb0\u5f55\u4e86\u7ebf\u7a0b\u662f\u5426\u5e94\u8be5\u963b\u585e\u3002\u8282\u70b9\u4f1a\u5728\u524d\u4e00\u4e2a\u8282\u70b9\u91ca\u653e\u7684\u65f6\u5019\u6536\u5230\u4fe1\u53f7\u88ab\u5524\u9192\u3002\u56e0\u6b64\u961f\u5217\u4e2d\u7684\u6bcf\u4e00\u4e2a\u8282\u70b9\u5145\u5f53\u4e86\u4e00\u79cd\u7279\u5b9a\u901a\u77e5\u98ce\u683c\u7684\u76d1\u89c6\u5668\uff0c\u540c\u65f6\u6301\u6709\u4e00\u4e2a\u6b63\u5728\u7b49\u5f85\u7684\u7ebf\u7a0b\u3002\u72b6\u6001\u5b57\u6bb5\u4e0d\u63a7\u5236\u7ebf\u7a0b\u662f\u5426\u6388\u4e88\u9501\u7b49\u3002\u5982\u679c\u7ebf\u7a0b\u5728\u961f\u5217\u4e2d\u7684\u7b2c\u4e00\u4e2a\u7684\u8bdd\uff0c\u53ef\u80fd\u5c1d\u8bd5\u83b7\u53d6\u9501\u3002\u4f46\u662f\u62cd\u7167\u7b2c\u4e00\u4e2a\u5e76\u4e0d\u80fd\u4fdd\u8bc1\u83b7\u53d6\u9501\u6210\u529f\uff1b\u53ea\u662f\u7ed9\u4e88\u8fd9\u4e2a\u7ebf\u7a0b\u53c2\u4e0e\u7ade\u4e89\u7684\u6761\u4ef6\u3002\u6240\u4ee5\u5f53\u524d\u88ab\u91ca\u653e\u7684\u7ade\u4e89\u8005\u53ef\u80fd\u8fd8\u8981\u7b49\u5f85\u3002 \u4e3a\u4e86\u8ba9\u4e00\u4e2aCLH\u9501\u5165\u961f\uff0c\u4f60\u53ef\u4ee5\u8ba9\u5b83\u81ea\u52a8\u62fc\u63a5\u5230\u65b0\u7684tail\u4e2d\u3002\u79bb\u961f\u53ea\u9700\u8981\u91cd\u65b0\u8bbe\u7f6ehead\u5b57\u6bb5\u3002 +------+ prev +-----+ +-----+ head | | <---- | | <---- | | tail +------+ +-----+ +-----+ \u5165\u961f\u4e0e\u79bb\u961f\u5206\u522b\u662f\u4f5c\u7528\u4e8etail\u548chead\u7684\u539f\u5b50\u64cd\u4f5c\u3002\u7136\u800c\uff0c\u7531\u4e8e\u8d85\u65f6\u548c\u4e2d\u65ad\u53ef\u80fd\u5bfc\u81f4\u7ebf\u7a0b\u88ab\u53d6\u6d88\uff0cnode\u8fd8\u9700\u8981\u786e\u5b9a\u5b83\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u662f\u8c01\u3002\u76f8\u6bd4\u539f\u6765CLH\u9501\u7684\u5b9e\u73b0\uff0c\u589e\u52a0\u4e86prev\u5b57\u6bb5\u4e3b\u8981\u7528\u6765\u5904\u7406\u7ebf\u7a0b\u88ab\u53d6\u6d88\u8fd9\u79cd\u60c5\u51b5\u3002\u5982\u679c\u4e00\u4e2anode\u4e2d\u7684\u7ebf\u7a0b\u88ab\u53d6\u6d88\u4e86\uff0c\u5b83\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9\u5c31\u9700\u8981\u91cd\u65b0\u627e\u4e00\u4e2a\u6ca1\u6709\u88ab\u53d6\u6d88\u7684\u8282\u70b9\u6765\u4f5c\u4e3a\u524d\u7ee7\u3002\u60f3\u4e86\u89e3\u81ea\u65cb\u9501\u7684\u76f8\u4f3c\u673a\u5236\uff0c\u53ef\u4ee5\u770bScott\u548cScherer\u7684 \u8bba\u6587 \u3002 static final class Node { /** Marker to indicate a node is waiting in shared mode */ static final Node SHARED = new Node(); /** Marker to indicate a node is waiting in exclusive mode */ static final Node EXCLUSIVE = null; /** waitStatus\u7684\u503c\uff0c\u8868\u793athread\u88ab\u53d6\u6d88\u4e86 */ static final int CANCELLED = 1; /** waitStatus\u7684\u503c\uff0c\u8868\u793a\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u7ebf\u7a0b\u9700\u8981\u963b\u585e */ static final int SIGNAL = -1; /** waitStatus\u7684\u503c\uff0c\u8868\u793athread\u6b63\u5728\u7b49\u5f85\u67d0\u4e2a\u6761\u4ef6 */ static final int CONDITION = -2; /** * waitStatus value to indicate the next acquireShared should * unconditionally propagate */ static final int PROPAGATE = -3; volatile int waitStatus; volatile Node prev; volatile Node next; volatile Thread thread; Node nextWaiter; }","title":"Node"},{"location":"java%E5%90%8E%E7%AB%AF/java.util.concurrent.locks%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#conditionobject","text":"\u4ec5\u5217\u51fa\u91cd\u8981\u7684\u6210\u5458\u4ee5\u53ca\u65b9\u6cd5\u3002 /* * \u7ef4\u62a4\u4e86\u4e00\u4e2a\u6761\u4ef6\u961f\u5217\uff0c\u6ce8\u610f\u533a\u522b\u4e8eAQS\u4e2d\u7684\u540c\u6b65\u961f\u5217\u3002 * \u6761\u4ef6\u961f\u5217\u7528\u6765\u8bb0\u5f55\u672a\u6ee1\u8db3\u6761\u4ef6\u7684\u7ebf\u7a0b\uff0c\u6bcf\u5f53\u4e00\u4e2a\u7ebf\u7a0b\u9700\u8981\u7b49\u5f85\u6761\u4ef6\u6ee1\u8db3\u7684\u65f6\u5019\uff0c\u5c31\u52a0\u5165\u6761\u4ef6\u961f\u5217\u8fdb\u884c\u7b49\u5f85\uff1b * \u5f53\u6761\u4ef6\u88ab\u6ee1\u8db3\u7684\u65f6\u5019\uff0c\u7ebf\u7a0b\u5c31\u4f1a\u628a\u7b49\u5f85\u961f\u5217\u4e2d\u6240\u6709\u7684\u7ebf\u7a0b\u6309\u7167\u987a\u5e8f\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\uff0c * \u5e76\u4e0e\u540c\u6b65\u961f\u5217\u7ade\u4e89state\u7684\u4f7f\u7528\u6743\u3002 */ public class ConditionObject implements Condition, java.io.Serializable { // \u6761\u4ef6\u961f\u5217\u7684\u7b2c\u4e00\u4e2a\u8282\u70b9 private transient Node firstWaiter; // \u6761\u4ef6\u961f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u8282\u70b9 private transient Node lastWaiter; public ConditionObject() { } public final void await() throws InterruptedException { if (Thread.interrupted()) throw new InterruptedException(); // \u6dfb\u52a0\u4e86\u4e00\u4e2a\u5f53\u524d\u7ebf\u7a0b\u8282\u70b9\u5230\u6761\u4ef6\u961f\u5217\u7684\u5c3e\u90e8 Node node = addConditionWaiter(); // \u5b8c\u5168\u91ca\u653e\u5f53\u524d\u7ebf\u7a0b\u5bf9state\u7684\u5360\u6709\u6743\uff0c\u5524\u9192\u540c\u6b65\u961f\u5217\u4e2d\u7b2c\u4e00\u4e2a\u7b49\u5f85\u7684\u7ebf\u7a0b\uff0c\u5e76\u8bb0\u5f55\u5f53\u524d\u7ebf\u7a0b\u5360\u6709\u7684state\u7684\u503c int savedState = fullyRelease(node); int interruptMode = 0; // \u7b49\u5f85\u53e6\u4e00\u4e2a\u5176\u5b83\u7ebf\u7a0b\u5c06\u5f53\u524d\u7ebf\u7a0b\u4ece\u6761\u4ef6\u961f\u5217\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\u4e2d\uff08\u8c03\u7528sigal\u51fd\u6570\uff09 while (!isOnSyncQueue(node)) { // \u5f53\u524d\u7ebf\u7a0b\u88ab\u6302\u8d77\uff0c\u7b49\u5f85\u88ab\u5524\u9192 LockSupport.park(this); // \u5982\u679c\u662f\u56e0\u4e3a\u88ab\u4e2d\u65ad\u800c\u9192\u8fc7\u6765\uff0c\u5c31\u628a\u5f53\u524d\u7ebf\u7a0b\u76f4\u63a5\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\u4e2d // \u81ea\u5df1\u5c06\u81ea\u5df1\u52a0\u5165\u540c\u6b65\u961f\u5217\uff0c\u9700\u8981\u629b\u5f02\u5e38\uff0c\u5982\u679c\u7b49\u5f85\u5176\u5b83\u7ebf\u7a0b\u5c06\u81ea\u5df1\u52a0\u5165\u540c\u6b65\u961f\u5217\uff0c\u4e0d\u9700\u8981\u629b\u5f02\u5e38 if ((interruptMode = checkInterruptWhileWaiting(node)) != 0) break; // \u4e5f\u6709\u53ef\u80fd\u662f\u7531\u4e8e\u672a\u77e5\u539f\u56e0\u800c\u9192\u8fc7\u6765\uff0c\u8fd9\u65f6\u5019interruptMode\u4e0d\u662f0\uff0c\u6240\u4ee5\u9700\u8981\u4e00\u4e2a\u5faa\u73af\u6765\u786e\u4fdd\u5f53\u524d\u7ebf\u7a0b\u88ab\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\u4e2d } // \u5f53\u524d\u7ebf\u7a0b\u4e0e\u540c\u6b65\u961f\u5217\u4e2d\u5176\u5b83\u7684\u7ebf\u7a0b\u8fdb\u884c\u7ade\u4e89\uff0c\u76f4\u5230\u5f53\u524d\u7ebf\u7a0b\u83b7\u53d6\u5230state\u7684\u4f7f\u7528\u6743 if (acquireQueued(node, savedState) && interruptMode != THROW_IE) interruptMode = REINTERRUPT; // \u904d\u5386\u6761\u4ef6\u961f\u5217\uff0c\u79fb\u9664\u6240\u6709\u88ab\u53d6\u6d88\u7684\u7ebf\u7a0b if (node.nextWaiter != null) // clean up if cancelled unlinkCancelledWaiters(); // \u5982\u679c\u88ab\u4e2d\u65ad\u4e86\uff0c\u5e76\u4e14\u662f\u901a\u8fc7\u5176\u4ed6\u7ebf\u7a0b\u5c06\u5f53\u524d\u7ebf\u7a0b\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\u4e2d\u7684 if (interruptMode != 0) reportInterruptAfterWait(interruptMode); } private Node addConditionWaiter() { Node t = lastWaiter; // If lastWaiter is cancelled, clean out. if (t != null && t.waitStatus != Node.CONDITION) { unlinkCancelledWaiters(); t = lastWaiter; } Node node = new Node(Thread.currentThread(), Node.CONDITION); if (t == null) firstWaiter = node; else t.nextWaiter = node; lastWaiter = node; return node; } // \u904d\u5386\u6761\u4ef6\u961f\u5217\uff0c\u79fb\u9664\u6240\u6709\u88ab\u53d6\u6d88\u7684\u7ebf\u7a0b private void unlinkCancelledWaiters() { Node t = firstWaiter; Node trail = null; // \u4ece\u524d\u5411\u540e\u904d\u5386\u6761\u4ef6\u961f\u5217 while (t != null) { Node next = t.nextWaiter; // \u5728\u6761\u4ef6\u961f\u5217\u4e2d\uff0c\u5982\u679cwaitStatus != CONDITION\uff0c\u8868\u793a\u7ebf\u7a0b\u88ab\u53d6\u6d88 if (t.waitStatus != Node.CONDITION) { t.nextWaiter = null; if (trail == null) firstWaiter = next; else trail.nextWaiter = next; if (next == null) lastWaiter = trail; } else trail = t; t = next; } } // \u7ebf\u7a0b\u9192\u8fc7\u6765\u4e4b\u540e\u68c0\u67e5\u662f\u5426\u88ab\u4e2d\u65ad\uff0c // \u5982\u679c\u6ca1\u6709\u88ab\u4e2d\u65ad\uff0c\u8fd4\u56de0\uff1b // \u5982\u679c\u88ab\u4e2d\u65ad\u4e86\uff0c\u4e14\u81ea\u5df1\u53ef\u4ee5\u5c06\u5f53\u524d\u7ebf\u7a0b\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\u4e2d\uff0c\u8fd4\u56deTHROW_IE\uff1b // \u5982\u679c\u88ab\u4e2d\u65ad\u4e86\uff0c\u901a\u8fc7\u7b49\u5f85\u5176\u5b83\u7ebf\u7a0b\u5c06\u5f53\u524d\u7ebf\u7a0b\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\u4e2d\uff0c\u8fd4\u56deREINTERRUPT\u3002 private int checkInterruptWhileWaiting(Node node) { return Thread.interrupted() ? (transferAfterCancelledWait(node) ? THROW_IE : REINTERRUPT) : 0; } // \u5c06\u5f53\u524d\u7ebf\u7a0b\u6dfb\u52a0\u5230\u540c\u6b65\u961f\u5217\u4e2d\uff0c\u8fd4\u56de\u662f\u5426\u81ea\u5df1\u53ef\u4ee5\u5c06\u81ea\u5df1\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\u4e2d final boolean transferAfterCancelledWait(Node node) { if (compareAndSetWaitStatus(node, Node.CONDITION, 0)) { enq(node); return true; } /* * If we lost out to a signal(), then we can't proceed * until it finishes its enq(). Cancelling during an * incomplete transfer is both rare and transient, so just * spin. */ // \u7b49\u5f85\u5176\u4ed6\u7ebf\u7a0b\u901a\u8fc7signal\u628a\u5f53\u524d\u7ebf\u7a0b\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\u4e2d while (!isOnSyncQueue(node)) Thread.yield(); return false; } private void reportInterruptAfterWait(int interruptMode) throws InterruptedException { // \u4e2d\u65ad\u4e4b\u540e\u629b\u5f02\u5e38 if (interruptMode == THROW_IE) throw new InterruptedException(); // \u4e2d\u65ad\u4e4b\u540e\u5f53\u524d\u7ebf\u7a0b\u91cd\u65b0\u8fdb\u5165\u4e2d\u65ad\u72b6\u6001 else if (interruptMode == REINTERRUPT) selfInterrupt(); } // \u5c06\u6761\u4ef6\u961f\u5217\u4e2d\u7684\u6240\u6709\u7ebf\u7a0b\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\u4e2d public final void signal() { if (!isHeldExclusively()) throw new IllegalMonitorStateException(); Node first = firstWaiter; if (first != null) // \u5c06\u6761\u4ef6\u961f\u5217\u4e2d\u7684\u6240\u6709\u7ebf\u7a0b\u52a0\u5165\u5230\u540c\u6b65\u961f\u5217\u4e2d doSignal(first); } private void doSignal(Node first) { do { if ( (firstWaiter = first.nextWaiter) == null) lastWaiter = null; first.nextWaiter = null; } while (!transferForSignal(first) && (first = firstWaiter) != null); } final boolean transferForSignal(Node node) { /* * If cannot change waitStatus, the node has been cancelled. */ // \u5982\u679c\u7ebf\u7a0b\u5df2\u88ab\u53d6\u6d88\uff0c\u5c31\u4e0d\u653e\u5165\u540c\u6b65\u961f\u5217\u4e2d if (!compareAndSetWaitStatus(node, Node.CONDITION, 0)) return false; /* * Splice onto queue and try to set waitStatus of predecessor to * indicate that thread is (probably) waiting. If cancelled or * attempt to set waitStatus fails, wake up to resync (in which * case the waitStatus can be transiently and harmlessly wrong). */ Node p = enq(node); int ws = p.waitStatus; // \u5982\u679c\u540c\u6b65\u961f\u5217\u4e2d\u524d\u4e00\u4e2a\u7ebf\u7a0b\u5df2\u88ab\u53d6\u6d88\u6216\u8005\u5c06\u524d\u4e00\u4e2a\u7ebf\u7a0b\u72b6\u6001\u8bbe\u7f6e\u6210signal\u5931\u8d25\uff0c\u5c31\u5524\u9192\u8be5\u7ebf\u7a0b\u4e0e\u540c\u6b65\u961f\u5217\u5176\u5b83\u7ebf\u7a0b\u7ade\u4e89 if (ws > 0 || !compareAndSetWaitStatus(p, ws, Node.SIGNAL)) LockSupport.unpark(node.thread); return true; } }","title":"ConditionObject"},{"location":"java%E5%90%8E%E7%AB%AF/java.util.concurrent.locks%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#_6","text":"/** * \u7b49\u5f85\u961f\u5217\u7684\u5934\u7ed3\u70b9\uff0c\u5b83\u662f\u4e00\u4e2a\u865a\u62df\u8282\u70b9\uff0c\u5ef6\u8fdf\u521d\u59cb\u5316\u3002 * \u5982\u679chead != null\uff0c\u53ef\u4ee5\u4fdd\u8bc1head.waitStatus\u4e0d\u662fCANCELLED */ private transient volatile Node head; // \u7b49\u5f85\u961f\u5217\u5c3e\u8282\u70b9\uff0c\u53ea\u80fd\u901a\u8fc7enq\u6765\u52a0\u5165\u65b0\u7b49\u5f85\u8282\u70b9 private transient volatile Node tail; // AQS\u5bf9\u8c61\u7684\u72b6\u6001\uff0c\u521d\u59cb\u503c\u662f0\uff0c\u8868\u793astate\u6ca1\u6709\u88ab\u4efb\u4f55\u7ebf\u7a0b\u5360\u6709 // AQS\u6700\u91cd\u8981\u7684\u6210\u5458\uff0c\u4e0d\u540c\u573a\u666f\u4e0b\u5177\u6709\u4e0d\u540c\u7684\u542b\u4e49\uff0c\u4e00\u822c\u6307\u9501\u88ab\u5f15\u7528\u7684\u6b21\u6570 // AQS\u63d0\u4f9b\u4e86\u7ade\u4e89\u8fd9\u4e2a\u72b6\u6001\u503c\u5360\u6709\u6743\u7684\u6846\u67b6 private volatile int state;","title":"\u6838\u5fc3\u6210\u5458"},{"location":"java%E5%90%8E%E7%AB%AF/java.util.concurrent.locks%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#_7","text":"public abstract class AbstractQueuedSynchronizer extends AbstractOwnableSynchronizer implements java.io.Serializable { // \u5728\u72ec\u5360\u6a21\u5f0f\u4e0b\u83b7\u53d6state\u7684\u5360\u6709\u6743\uff0c\u5e76\u4f7fstate\u52a0arg public final void acquire(int arg) { /** * tryAcquire\u5728FairSync\u548cNonfairSync\u7b49AQS\u7684\u5b50\u7c7b\u4e2d\u88ab\u5b9e\u73b0\u3002 * * \u9996\u5148\u8c03\u7528tryAcquire\u65b9\u6cd5\u6765\u5c1d\u8bd5\u72ec\u5360\u5e76\u4fee\u6539state\uff0c * tryAcquire\u5982\u679c\u8fd4\u56defalse\uff0c\u5c31\u8bf4\u660e\u5df2\u7ecf\u6709thread\u83b7\u5f97\u4e86state\u7684\u5360\u6709\u6743\uff0c\u5f53\u524d\u7ebf\u7a0b\u65e0\u6743\u4fee\u6539state\uff0c * \u8fd9\u65f6\u5019\uff08\u6267\u884cacquireQueued\u65b9\u6cd5\uff09\u628a\u5f53\u524d\u8282\u70b9\u5165\u961f\u5e76\u53c2\u4e0e\u7ade\u4e89state\u7684\u5360\u6709\u6743\uff0c\u5f53\u524d\u8282\u70b9\u53d8\u4e3a\u9996\u8282\u70b9\u7684\u65f6\u5019\u83b7\u5f97state\u7684\u5360\u6709\u6743\uff0cstate\u52a0arg\u3002 * \u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u5728\u7ade\u4e89\u8fc7\u7a0b\u4e2d\u88ab\u4e2d\u65ad\u8fc7\uff0c\u5219\u628a\u5f53\u524d\u7ebf\u7a0b\u6062\u590d\u5230\u4e2d\u65ad\u72b6\u6001\u3002 */ if (!tryAcquire(arg) && acquireQueued(addWaiter(Node.EXCLUSIVE), arg)) selfInterrupt(); } // \u6dfb\u52a0\u5f53\u524d\u7ebf\u7a0b\u8282\u70b9\u5230\u7b49\u5f85\u961f\u5217\u4e2d private Node addWaiter(Node mode) { // \u6784\u9020\u7ebf\u7a0b\u8282\u70b9 Node node = new Node(Thread.currentThread(), mode); // Try the fast path of enq; backup to full enq on failure Node pred = tail; if (pred != null) { node.prev = pred; // CAS\u64cd\u4f5c\uff0c\u66f4\u65b0\u5c3e\u8282\u70b9 if (compareAndSetTail(pred, node)) { pred.next = node; return node; } } // pred\u662f\u7a7a\u6216\u8005CAS\u64cd\u4f5c\u5931\u8d25\uff08\u5c3e\u8282\u70b9\u5df2\u53d8\uff09\uff0c\u5c31\u5165\u961f enq(node); return node; } // \u5faa\u73af\u5d4c\u5957CAS\uff0c\u76f4\u5230CAS\u6210\u529f\u4e3a\u6b62 // \u5c06\u8282\u70b9node\u52a0\u5165\u5230\u7b49\u5f85\u961f\u5217\u5c3e\u90e8 private Node enq(final Node node) { for (;;) { Node t = tail; // \u961f\u5217\u4e3a\u7a7a if (t == null) { // Must initialize // \u6ce8\u610f\u8fd9\u65f6\u5019\u521b\u5efa\u5e76\u8bbe\u7f6e\u865a\u62df\u7684\u5934\u7ed3\u70b9\uff0c\u800c\u4e0d\u662f\u5728\u521b\u5efaAQS\u5bf9\u8c61\u7684\u65f6\u5019\uff0c\u5c5e\u4e8e\u5ef6\u8fdf\u52a0\u8f7d\uff0c\u521b\u5efa\u5b8c\u865a\u62df\u5934\u7ed3\u70b9\u4ecd\u7136\u7ee7\u7eed\u5faa\u73af if (compareAndSetHead(new Node())) tail = head; } else { node.prev = t; if (compareAndSetTail(t, node)) { t.next = node; return t; } } } } /* * \u5728\u72ec\u5360\u4e0d\u53ef\u4e2d\u65ad\u6a21\u5f0f\u4e0b\uff0c\u5f53\u524d\u7ebf\u7a0b\u4e0eSync\u961f\u5217\u4e2d\u7684\u5176\u5b83\u7ebf\u7a0b\u7ade\u4e89\u3002 * \u5f53\u524d\u7ebf\u7a0b\u6210\u4e3a\u961f\u5217\u4e2d\u9996\u8282\u70b9\u7684\u65f6\uff0c\u5b83\u83b7\u5f97state\u7684\u5360\u6709\u6743\uff0c\u5e76\u7d66state\u52a0arg\uff1b * \u5426\u5219\uff0cSync\u961f\u5217\u4e2d\u5b58\u5728\u6709\u6548\uff08\u6ca1\u6709\u88ab\u53d6\u6d88\uff09\u7684\u7ebf\u7a0b\uff0c\u7531\u4e8e\u961f\u5217\u4e2d\u524d\u9762\u7684\u7ebf\u7a0b\u62e5\u6709\u66f4\u9ad8\u7684\u6743\u5229\u4f7f\u7528state\uff0c * \u6240\u4ee5\u5f53\u524d\u7ebf\u7a0b\u5c31\u9700\u8981\u963b\u585e\uff0c\u5f53\u524d\u4e00\u4e2a\u7ebf\u7a0b\u4f7f\u7528\u5b8cstate\u4e4b\u540e\u5524\u9192\u5f53\u524d\u7ebf\u7a0b\u3002 * \u7ebf\u7a0b\u5904\u4e8e\u963b\u585e\u72b6\u6001\u65f6\uff0c\u4e5f\u53ef\u4ee5\u88ab\u4e2d\u65ad\u800c\u9192\u6765\uff0c\u7531\u4e8e\u662f\u4e0d\u53ef\u4e2d\u65ad\u6a21\u5f0f\uff0c\u6240\u4ee5\u4f1a\u8bb0\u5f55\u5e76\u6e05\u9664\u4e2d\u65ad\u72b6\u6001\uff0c * \u5c06\u4e2d\u65ad\u72b6\u6001\u8fd4\u56de\u7ed9\u8c03\u7528\u65b9\u5904\u7406\uff0c\u4f8b\u5982acquire\u4e2d\u4f1a\u628a\u5f53\u524d\u7ebf\u7a0b\u6062\u590d\u5230\u4e2d\u65ad\u72b6\u6001\u3002 */ final boolean acquireQueued(final Node node, int arg) { boolean failed = true; try { boolean interrupted = false; for (;;) { // \u7b49\u5f85\u961f\u5217\u662f\u4e00\u4e2a\u53cc\u5411\u5217\u8868\uff0c\u8fd9\u91ccp\u662fnode\u7684\u524d\u8282\u70b9 final Node p = node.predecessor(); // \u5982\u679c\u662f\u961f\u5217\u4e2d\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u5c31\u83b7\u5f97state\u7684\u5360\u6709\u6743\uff0c\u5e76\u4f7f\u7528state if (p == head && tryAcquire(arg)) { setHead(node); p.next = null; // help GC failed = false; return interrupted; } // \u5982\u679c\u4e0d\u662f\u961f\u5217\u4e2d\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\uff0c\u90a3\u4e48\u7ade\u4e89\u5931\u8d25\uff0c\u5b83\u65e0\u6743\u4f7f\u7528state\uff0c // \u68c0\u67e5\u961f\u5217\u4e2d\u524d\u9762\u7684\u7ebf\u7a0b\u662f\u5426\u6709\u6548\uff08\u6ca1\u6709\u88ab\u53d6\u6d88\uff09\uff0c\u5982\u679c\u5b58\u5728\u6709\u6548\u7684\u7ebf\u7a0b\uff0c // \u5f53\u524d\u7ebf\u7a0b\u5c31\u9700\u8981\u963b\u585e\uff0c\u5728\u7ebf\u7a0b\u9192\u8fc7\u6765\u4e4b\u540e\u68c0\u67e5\u662f\u5426\u88ab\u4e2d\u65ad\uff0c\u5982\u679c\u88ab\u4e2d\u65ad\u4e86\uff0c // \u5c31\u6e05\u9664\u4e2d\u65ad\u6807\u5fd7\u4f4d\u7ee7\u7eed\u7ade\u4e89state\u7684\u4f7f\u7528\u6743\uff0c\u4f46\u662f\u8981\u8bb0\u5f55\u5f53\u524d\u7ebf\u7a0b\u5728\u7ade\u4e89\u8fc7\u7a0b\u88ab\u4e2d\u65ad\u8fc7 if (shouldParkAfterFailedAcquire(p, node) && parkAndCheckInterrupt()) interrupted = true; } } finally { if (failed) cancelAcquire(node); } } // \u5934\u7ed3\u70b9\u51fa\u7b49\u5f85\u961f\u5217 private void setHead(Node node) { head = node; node.thread = null; node.prev = null; } // \u5982\u679c\u961f\u5217\u4e2d\u5b58\u5728\u6709\u6548\u7684\u7ebf\u7a0b\uff08\u6ca1\u6709\u88ab\u53d6\u6d88\u7684\uff09\u6392\u5728\u5f53\u524d\u7ebf\u7a0b\u524d\u9762\uff0c\u90a3\u4e48\u5f53\u524d\u7ebf\u7a0b\u5c31\u9700\u8981\u88ab\u963b\u585e\uff0c\u56e0\u4e3a\u524d\u9762\u7684\u7ebf\u7a0b\u7b49\u4e86\u66f4\u957f\u7684\u65f6\u95f4\uff0c\u62e5\u6709\u66f4\u9ad8\u7684\u4f7f\u7528\u6743 private static boolean shouldParkAfterFailedAcquire(Node pred, Node node) { //waitStatus\u521d\u59cb\u503c\u4e3a0 int ws = pred.waitStatus; // \u524d\u4e00\u4e2a\u7ebf\u7a0b\u672a\u4f7f\u7528\u5b8cstate\uff0c\u5f53\u524d\u7ebf\u7a0b\u5c31\u8981\u88ab\u963b\u585e if (ws == Node.SIGNAL) // pred\u8282\u70b9\u6b63\u5728\u8bf7\u6c42\u4e00\u4e2asignal\u4fe1\u53f7\uff0c\u6240\u4ee5\u5b83\u53ef\u4ee5\u88ab\u5b89\u5168\u6302\u8d77 return true; // \u5728Sync\u961f\u5217\u4e2d\uff0c\u5982\u679c\u5927\u4e8e0\u8868\u793a\u7ebf\u7a0b\u5904\u4e8e\u88ab\u53d6\u6d88\u7684\u72b6\u6001\uff0c // \u88ab\u53d6\u6d88\u7684\u7ebf\u7a0b\u6ca1\u6709\u5fc5\u8981\u83b7\u53d6state\u7684\u4f7f\u7528\u6743\uff0c\u6240\u4ee5\u76f4\u63a5\u4ece\u961f\u5217\u4e2d\u5220\u9664\u53d6\u6d88\u7684\u7ebf\u7a0b\uff0c\u4e0d\u8ba9\u5b83\u4eec\u53c2\u4e0e\u7ade\u4e89\u3002\u6682\u65f6\u4e0d\u6302\u8d77\u5f53\u524d\u7ebf\u7a0b\u3002 if (ws > 0) { // \u5220\u9664\u6240\u6709\u88ab\u53d6\u6d88\u7684\u5148\u7ee7\u8282\u70b9 do { node.prev = pred = pred.prev; } while (pred.waitStatus > 0); pred.next = node; } else { /* * waitStatus must be 0 or PROPAGATE. Indicate that we * need a signal, but don't park yet. Caller will need to * retry to make sure it cannot acquire before parking. */ // \u524d\u4e00\u4e2a\u8282\u70b9\u6ca1\u6709\u88ab\u53d6\u6d88\uff0c\u6682\u65f6\u4e0d\u6302\u8d77\u5f53\u524d\u7ebf\u7a0b\uff0c\u5c06\u524d\u4e00\u4e2a\u7ebf\u7a0b\u72b6\u6001\u8bbe\u7f6e\u4e3a\u9700\u8981sigal\u4fe1\u53f7\uff08\u672a\u4f7f\u7528\u5b8cstate\uff09\uff0c // \u4e0b\u6b21\u7ade\u4e89\u5982\u679c\u53d1\u73b0\u524d\u4e00\u4e2a\u7ebf\u7a0b\u4ecd\u6ca1\u6709\u4f7f\u7528\u5b8cstate\u518d\u6302\u8d77 compareAndSetWaitStatus(pred, ws, Node.SIGNAL); } return false; } private final boolean parkAndCheckInterrupt() { // \u6302\u8d77\u5f53\u524d\u7ebf\u7a0b\uff0c\u5728\u88ab\u6302\u8d77\u7684\u60c5\u51b5\u4e0b\uff0c\u6709\u4e09\u79cd\u60c5\u51b5\u4f1a\u88ab\u5524\u9192\uff0c\u5177\u4f53\u89c1park\u65b9\u6cd5\u6ce8\u91ca LockSupport.park(this); // \u83b7\u53d6\u4e2d\u65ad\u6807\u8bb0\uff0c\u5982\u679c\u4e2d\u65ad\u6807\u8bb0\u662ftrue\uff0c\u4f1a\u6e05\u9664\u4e2d\u65ad\u6807\u8bb0 return Thread.interrupted(); } // \u91ca\u653estate\u7684\u4f7f\u7528\u6743 final int fullyRelease(Node node) { boolean failed = true; try { int savedState = getState(); if (release(savedState)) { failed = false; return savedState; } else { throw new IllegalMonitorStateException(); } } finally { if (failed) node.waitStatus = Node.CANCELLED; } } public final boolean release(int arg) { // \u5982\u679c\u5f53\u524d\u7ebf\u7a0b\u91ca\u653estate\u4f7f\u7528\u6743\u6210\u529f\uff08\u72ec\u5360\u6a21\u5f0f\u5373\u6709\u6743\u5229\u5c06state\u51cfarg\u6210\u529f\uff09\uff0c // \u5c31\u5524\u9192\u961f\u5217\u4e2d\u7684\u7b49\u5f85\u7684\u7b2c\u4e00\u4e2a\u7ebf\u7a0b\u3002 if (tryRelease(arg)) { // head\u6307\u5411\u7684\u662f\u865a\u8282\u70b9\uff0c\u6ca1\u6709\u8bb0\u5f55\u7ebf\u7a0bid\uff0chead\u4e0b\u4e00\u4e2a\u8282\u70b9\u624d\u5b58\u4e86\u7b2c\u4e00\u4e2a\u7ebf\u7a0b Node h = head; if (h != null && h.waitStatus != 0) unparkSuccessor(h); return true; } return false; } // \u5524\u9192node\u7684\u4e0b\u4e00\u4e2a\u8282\u70b9 private void unparkSuccessor(Node node) { /* * If status is negative (i.e., possibly needing signal) try * to clear in anticipation of signalling. It is OK if this * fails or if status is changed by waiting thread. */ int ws = node.waitStatus; if (ws < 0) compareAndSetWaitStatus(node, ws, 0); // \u627e\u5230\u4e0b\u4e00\u4e2a\u6ca1\u6709\u88ab\u53d6\u6d88\u7684\u7ebf\u7a0b\u8282\u70b9\uff0c\u5728sync\u961f\u5217\u4e2d\uff0cwaitStatus > 0 \u8868\u793a\u5f53\u524d\u8282\u70b9\u4e2d\u7684\u7ebf\u7a0b\u88ab\u53d6\u6d88 Node s = node.next; if (s == null || s.waitStatus > 0) { s = null; //\u4ece\u540e\u5411\u524d\u904d\u5386\uff0c\u627e\u5230\u6700\u524d\u9762\u7684\u4e00\u4e2a\u6ca1\u6709\u88ab\u53d6\u6d88\u7684\u7ebf\u7a0b for (Node t = tail; t != null && t != node; t = t.prev) if (t.waitStatus <= 0) s = t; } if (s != null) LockSupport.unpark(s.thread); } }","title":"\u6838\u5fc3\u65b9\u6cd5"},{"location":"java%E5%90%8E%E7%AB%AF/java.util.concurrent.locks%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90/#abstractownablesynchronizer","text":"AQS\u7ee7\u627f\u4e86\u8fd9\u4e2a\u62bd\u8c61\u7c7b\uff0c\u8fd9\u4e2a\u7c7b\u975e\u5e38\u7b80\u5355\uff0c\u6240\u6709\u6210\u5458\u53ca\u65b9\u6cd5\u5b9a\u4e49\u5982\u4e0b\uff1a public abstract class AbstractOwnableSynchronizer implements java.io.Serializable { protected AbstractOwnableSynchronizer() { } // \u72ec\u5360\u72ec\u5360\u6a21\u5f0f\u4e0b\u5360\u6709Synchronizer\u7684\u7ebf\u7a0b\u5bf9\u8c61 private transient Thread exclusiveOwnerThread; // \u8d4b\u4e88thread\u5bf9\u9501\u7684\u6392\u4ed6\u8bbf\u95ee\u6743\u9650 protected final void setExclusiveOwnerThread(Thread thread) { exclusiveOwnerThread = thread; } // \u83b7\u53d6\u72ec\u5360\u9501\u7684\u7ebf\u7a0b\u5bf9\u8c61 protected final Thread getExclusiveOwnerThread() { return exclusiveOwnerThread; } }","title":"AbstractOwnableSynchronizer"},{"location":"java%E5%90%8E%E7%AB%AF/spring-callstack/","text":"spring callstack \u00b6 \u8fd9\u4e2acallstack\u8bb0\u5f55\u4e86spring\u5728\u6536\u5230\u4e00\u4e2arequest\u4e4b\u540e\u662f\u600e\u6837\u5206\u53d1\u7ed9\u5bf9\u5e94\u7684controller\u7684\u3002Spring\u7248\u672c\u662forg.springframework:spring-core:4.2.7\u3002 Source code breakpoint \u53ef\u53c2\u8003\uff1a https://docs.spring.io/spring/docs/current/javadoc-api/ f0 hello.GreetingController#greeting \u00b6 \u6700\u7ec8\u5c06\u8bf7\u6c42127.0.0.1:8080/greeting\u5206\u53d1\u7ed9\u8fd9\u4e2acontroller\u7684greeting\u65b9\u6cd5\uff0c\u9664\u6b64\u4e4b\u5916\u6ca1\u5565\u597d\u8bf4\u7684\u3002 f1 sun.reflect.NativeMethodAccessorImpl#invoke0 \u00b6 private static native Object invoke0(Method var0, Object var1, Object[] var2); native\u65b9\u6cd5\uff0c\u6ce8\u610f\u53c2\u6570\u5217\u8868\u5373\u53ef\u3002\u5176\u5b83\u6682\u4e0d\u8ba8\u8bba\u3002 f2 sun.reflect.NativeMethodAccessorImpl#invoke \u00b6 public Object invoke(Object var1, Object[] var2) throws IllegalArgumentException, InvocationTargetException { // step 0. \u589e\u52a0\u8c03\u7528\u6b64\u65b9\u6cd5\u7684\u8ba1\u6570\uff0c\u6b64\u5904\u5e94\u8be5\u662f\u5b89\u5168\u68c0\u67e5\uff0c\u4e0espring\u65e0\u5173\uff0c\u4e0d\u5c55\u5f00\u8ba8\u8bba,\u6ce8\u610f\u53ef\u80fd\u4f1a\u629b\u51fa\u5f02\u5e38\u5373\u53ef if(++this.numInvocations > ReflectionFactory.inflationThreshold() && !ReflectUtil.isVMAnonymousClass(this.method.getDeclaringClass())) { MethodAccessorImpl var3 = (MethodAccessorImpl)(new MethodAccessorGenerator()).generateMethod(this.method.getDeclaringClass(), this.method.getName(), this.method.getParameterTypes(), this.method.getReturnType(), this.method.getExceptionTypes(), this.method.getModifiers()); this.parent.setDelegate(var3); } // step 1. \u901a\u8fc7\u8fd9\u884c\u8c03\u7528f1 return invoke0(this.method, var1, var2); } f3 sun.reflect.DelegatingMethodAccessorImpl#invoke \u00b6 // \u4e0d\u662fspring package\u7684\u7c7b\uff0c\u4e0d\u5c55\u5f00\u8ba8\u8bba\uff0c\u6ce8\u610f\u4e00\u4e0b\u51fd\u6570\u7b7e\u540d\u5373\u53ef public Object invoke(Object var1, Object[] var2) throws IllegalArgumentException, InvocationTargetException { return this.delegate.invoke(var1, var2); } f4 java.lang.reflect.Method#invoke \u00b6 \u5e73\u5e38\u4f7f\u7528\u7684 Method \u7c7b\uff0c\u4e0eSpring\u65e0\u5173\u3002 // obj\u7684\u5185\u5bb9\u662fGreetingController, args\u91cc\u9762\u53ea\u6709\u4e00\u4e2a\u201cWorld\u201d\u5b57\u7b26\u4e32 public Object invoke(Object obj, Object... args) { ... } \u53ef\u4ee5\u770b\u51fahello.GreetingController#greeting\u5bf9\u5e94\u4e86spring\u4e2d\u7684\u4e00\u4e2aMethod\u5bf9\u8c61\uff0c\u901a\u8fc7\u53cd\u5c04\u6765\u89e6\u53d1\u8c03\u7528greeting\u51fd\u6570\u3002 f5 org.springframework.web.method.support.InvocableHandlerMethod#doInvoke \u00b6 \u8be5\u7c7b\u4f4d\u4e8espring-web\u6a21\u5757\u3002 protected Method getBridgedMethod() { return this.bridgedMethod; } // args\u91cc\u9762\u53ea\u6709\u4e00\u4e2a\u201cWorld\u201d\u5b57\u7b26\u4e32 protected Object doInvoke(Object... args) throws Exception { // spring\u652f\u6301\u5c06greeting\u65b9\u6cd5\u58f0\u660e\u4e3aprivate ReflectionUtils.makeAccessible(getBridgedMethod()); try { // \u6b64\u5904\u8c03\u7528f4 return getBridgedMethod().invoke(getBean(), args); } catch (IllegalArgumentException ex) { ... } catch (InvocationTargetException ex) { ... } \u5f02\u5e38\u60c5\u51b5\u4e0d\u5c55\u5f00\u8ba8\u8bba\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u6ce8spring\u6838\u5fc3\u903b\u8f91\u3002\u56e0\u6b64org.springframework.web.method.support.InvocableHandlerMethod#doInvoke\u53ea\u662fjava.lang.reflect.Method#invoke\u7684\u4e00\u4e2a\u7b80\u5355\u7684wrapper\uff0c\u5904\u7406\u4e00\u4e9b\u53cd\u5c04\u65f6\u51fa\u73b0\u7684\u5f02\u5e38\u60c5\u51b5\uff0c\u65e0\u4ed6\u3002 f6 org.springframework.web.method.support.InvocableHandlerMethod#invokeForRequest \u00b6 \u8be5\u7c7b\u4f4d\u4e8espring-web\u6a21\u5757\u3002 // \u5165\u53c2\u7684\u5185\u5bb9 // ServletWebRequest: uri=/greeting;client=127.0.0.1 // ModelAndViewContainer: View is [null]; default model {} // \u53ef\u4ee5\u53d1\u73b0 public Object invokeForRequest(NativeWebRequest request, ModelAndViewContainer mavContainer, Object... providedArgs) throws Exception { // step 0. \u4eceNativeWebRequest\u548cModelAndViewContainer \u4e2d\u63d0\u53d6\u53c2\u6570\uff0c\u5173\u6ce8\u4e3b\u8981\u903b\u8f91\uff0c\u6682\u4e0d\u770b\u7ec6\u8282\u5b9e\u73b0 Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs); // step 1. \u6253\u5f00trace log\u4f1a\u6709\u65e5\u5fd7\uff0cprotected final Log logger = LogFactory.getLog(getClass()); if (logger.isTraceEnabled()) { StringBuilder sb = new StringBuilder(\"Invoking [\"); sb.append(getBeanType().getSimpleName()).append(\".\"); sb.append(getMethod().getName()).append(\"] method with arguments \"); sb.append(Arrays.asList(args)); logger.trace(sb.toString()); } // step 2. \u6b64\u5904\u8c03\u7528f5 Object returnValue = doInvoke(args); if (logger.isTraceEnabled()) { logger.trace(\"Method [\" + getMethod().getName() + \"] returned [\" + returnValue + \"]\"); } return returnValue; } invokeForRequest\u53ea\u662f\u6839\u636erequest\u7b49\u5165\u53c2\u6765\u83b7\u53d6greeting\u65b9\u6cd5\u53c2\u6570\u5217\u8868\u4e2d\u7684\u53c2\u6570\uff0c\u7136\u540e\u901a\u8fc7\u53cd\u5c04\u6765\u8c03\u7528greeting\u65b9\u6cd5\u3002 f7 org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod#invokeAndHandle \u00b6 \u8be5\u7c7b\u4f4d\u4e8espring-webmvc\u6a21\u5757\u3002 public void invokeAndHandle(ServletWebRequest webRequest, ModelAndViewContainer mavContainer, Object... providedArgs) throws Exception { // step 0. \u6b64\u5904\u8c03\u7528f6\u6765\u83b7\u53d6\u6b64\u6b21request\u7684\u8fd4\u56de\u503c Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs); // step 1. \u8bbe\u7f6ewebRequest\u5bf9\u8c61\u7684\u54cd\u5e94\u72b6\u6001\uff0c\u5728\u8fd9\u6b21\u8bf7\u6c42\u4e2d\uff0c\u7531\u4e8e\u54cd\u5e94\u72b6\u6001\u662fnull\uff0c\u5b9e\u9645\u4e0awebRequest\u6ca1\u6709\u8bbe\u7f6e\u54cd\u5e94\u72b6\u6001\u3002 // todo: \u770b\u4e00\u4e0bgreeting\u629b\u51faexception\u65f6\u662f\u600e\u6837\u5904\u7406\u7684\u3002 setResponseStatus(webRequest); // step 2. \u5904\u7406mavContainer\u5bf9\u8c61\u7684\u72b6\u6001 ... mavContainer.setRequestHandled(true); // step 3. \u5904\u7406\u8fd4\u56de\u503c\uff0c\u503c\u5f97\u4e00\u770b\uff0c\u6682\u65f6\u7565\u8fc7\uff0c\u56e0\u4e3af8\u4e2d\u4f1a\u4ed4\u7ec6\u5206\u6790 this.returnValueHandlers.handleReturnValue( returnValue, getReturnValueType(returnValue), mavContainer, webRequest); ... } \u8fd9\u91ccstep 3\u7684returnValueHandlers\u4f7f\u7528\u4e86\u7ec4\u5408\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u53ef\u7b80\u5355\u53c2\u8003org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite\uff0c\u5173\u6ce8\u4e3b\u8981\u903b\u8f91\uff0c\u6682\u65f6\u65e0\u9700\u5173\u6ce8\u592a\u591a\u3002 f8 org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#invokeHandlerMethod \u00b6 \u8fd9\u90e8\u5206\u7565\u62bd\u8c61\uff0c\u6211\u4eec\u4ec5\u9700\u77e5\u9053\uff0c\u6211\u4eec\u7684greeting\u4f7f\u7528\u4e86@RequestMapping\u6ce8\u89e3\uff0c\u6240\u4ee5\u4f1a\u9009\u62e9RequestMappingHandlerAdapter\u6765\u8c03\u5ea6\u6267\u884c\u76f8\u5e94\u7684\u65b9\u6cd5\u3002 protected ModelAndView invokeHandlerMethod(HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod) throws Exception { // \u53ef\u53c2\u8003http://lgbolgger.iteye.com/blog/2111003 ... // \u6b64\u5904\u8c03\u7528f7 invocableMethod.invokeAndHandle(webRequest, mavContainer); ... } f9 org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#handleInternal \u00b6 \u4f7f\u7528handlerMethod\u6765\u5185\u90e8\u5904\u7406request\uff0c\u6682\u65f6\u65e0\u9700\u5173\u6ce8\u8fc7\u591a\u3002 protected ModelAndView handleInternal(HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod) throws Exception { ... } f10 org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter#handle \u00b6 \u4f7f\u7528handlerMethod\u6765\u5904\u7406request\uff0c\u6682\u65f6\u65e0\u9700\u5173\u6ce8\u8fc7\u591a\u3002 public final ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { return handleInternal(request, response, (HandlerMethod) handler); } f11 org.springframework.web.servlet.DispatcherServlet#doDispatch \u00b6 \u5c06\u8bf7\u6c42\u5206\u53d1\u7ed9\u5bf9\u5e94\u7684handler\u3002 protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception { ... mv = ha.handle(processedRequest, response, mappedHandler.getHandler()); ... } \u601d\u8003(to do)\uff1a \u8fd9\u6bb5\u4ee3\u7801\u662f\u600e\u6837\u5206\u53d1\u5230\u5bf9\u5e94\u7684handlerMethod\u7684\uff1f f12 org.springframework.web.servlet.DispatcherServlet#doService \u00b6 protected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception { ... } f13 org.springframework.web.servlet.FrameworkServlet#processRequest \u00b6 protected final void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { ... } f14 org.springframework.web.servlet.FrameworkServlet#doGet \u00b6 \u66b4\u9732\u7ed9\u5bb9\u5668\u7684Servlet\uff0c\u53ef\u4ee5\u770b\u51fa\u8fd9\u4e2a\u662fspringframework\u7684\u5165\u53e3servlet protected final void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { processRequest(request, response); } f15 javax.servlet.http.HttpServlet#service(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse) \u00b6 \u6ce8\u610f\u8fd9\u4e2a\u7c7b\u662fHttpServlet\u5373\u53ef protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { ... } \u53ef\u4ee5\u770b\u51fa\uff0c\u4ecef1\u5230f15\u662f\u5206\u53d1\u8bf7\u6c42\u5e76\u5904\u7406\u7684\u5b8c\u6574\u8fc7\u7a0b\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u5165\u53e3\u662fHttpServlet\u7684service\u65b9\u6cd5\u3002 f15\u4e4b\u540e \u00b6 \u5728f15\u4e4b\u540e\u7684\u6808\u5e27\uff0c\u9664\u4e86filter\u8fd9\u4e2a\u8fc7\u7a0b\u542b\u6709spring\u7684\u5b9e\u73b0\u7c7b\uff0c\u5176\u5b83\u90fd\u662f\u53d1\u751f\u5728org.apache.catalina\u8fd9\u4e2a\u5305\u4e2d\u7684\uff0c\u8fd9\u91cc\u53ea\u5173\u6ce8spring\u76f8\u5173\u7684\u5185\u5bb9\uff0cspring\u5bf9\u4e8efilter\u7684\u5b9e\u73b0\uff0c\u4e3b\u8981\u53c2\u8003org.springframework.web.filter.RequestContextFilter#doFilterInternal\u548corg.springframework.web.filter.OncePerRequestFilter#doFilter\u5373\u53ef\uff0c\u4ed6\u4eec\u90fd\u662fjavax.servlet.Filter\u7684\u5b50\u7c7b\u3002","title":"spring"},{"location":"java%E5%90%8E%E7%AB%AF/spring-callstack/#spring-callstack","text":"\u8fd9\u4e2acallstack\u8bb0\u5f55\u4e86spring\u5728\u6536\u5230\u4e00\u4e2arequest\u4e4b\u540e\u662f\u600e\u6837\u5206\u53d1\u7ed9\u5bf9\u5e94\u7684controller\u7684\u3002Spring\u7248\u672c\u662forg.springframework:spring-core:4.2.7\u3002 Source code breakpoint \u53ef\u53c2\u8003\uff1a https://docs.spring.io/spring/docs/current/javadoc-api/","title":"spring callstack"},{"location":"java%E5%90%8E%E7%AB%AF/spring-callstack/#f0-hellogreetingcontrollergreeting","text":"\u6700\u7ec8\u5c06\u8bf7\u6c42127.0.0.1:8080/greeting\u5206\u53d1\u7ed9\u8fd9\u4e2acontroller\u7684greeting\u65b9\u6cd5\uff0c\u9664\u6b64\u4e4b\u5916\u6ca1\u5565\u597d\u8bf4\u7684\u3002","title":"f0 hello.GreetingController#greeting"},{"location":"java%E5%90%8E%E7%AB%AF/spring-callstack/#f1-sunreflectnativemethodaccessorimplinvoke0","text":"private static native Object invoke0(Method var0, Object var1, Object[] var2); native\u65b9\u6cd5\uff0c\u6ce8\u610f\u53c2\u6570\u5217\u8868\u5373\u53ef\u3002\u5176\u5b83\u6682\u4e0d\u8ba8\u8bba\u3002","title":"f1 sun.reflect.NativeMethodAccessorImpl#invoke0"},{"location":"java%E5%90%8E%E7%AB%AF/spring-callstack/#f2-sunreflectnativemethodaccessorimplinvoke","text":"public Object invoke(Object var1, Object[] var2) throws IllegalArgumentException, InvocationTargetException { // step 0. \u589e\u52a0\u8c03\u7528\u6b64\u65b9\u6cd5\u7684\u8ba1\u6570\uff0c\u6b64\u5904\u5e94\u8be5\u662f\u5b89\u5168\u68c0\u67e5\uff0c\u4e0espring\u65e0\u5173\uff0c\u4e0d\u5c55\u5f00\u8ba8\u8bba,\u6ce8\u610f\u53ef\u80fd\u4f1a\u629b\u51fa\u5f02\u5e38\u5373\u53ef if(++this.numInvocations > ReflectionFactory.inflationThreshold() && !ReflectUtil.isVMAnonymousClass(this.method.getDeclaringClass())) { MethodAccessorImpl var3 = (MethodAccessorImpl)(new MethodAccessorGenerator()).generateMethod(this.method.getDeclaringClass(), this.method.getName(), this.method.getParameterTypes(), this.method.getReturnType(), this.method.getExceptionTypes(), this.method.getModifiers()); this.parent.setDelegate(var3); } // step 1. \u901a\u8fc7\u8fd9\u884c\u8c03\u7528f1 return invoke0(this.method, var1, var2); }","title":"f2 sun.reflect.NativeMethodAccessorImpl#invoke"},{"location":"java%E5%90%8E%E7%AB%AF/spring-callstack/#f3-sunreflectdelegatingmethodaccessorimplinvoke","text":"// \u4e0d\u662fspring package\u7684\u7c7b\uff0c\u4e0d\u5c55\u5f00\u8ba8\u8bba\uff0c\u6ce8\u610f\u4e00\u4e0b\u51fd\u6570\u7b7e\u540d\u5373\u53ef public Object invoke(Object var1, Object[] var2) throws IllegalArgumentException, InvocationTargetException { return this.delegate.invoke(var1, var2); }","title":"f3 sun.reflect.DelegatingMethodAccessorImpl#invoke"},{"location":"java%E5%90%8E%E7%AB%AF/spring-callstack/#f4-javalangreflectmethodinvoke","text":"\u5e73\u5e38\u4f7f\u7528\u7684 Method \u7c7b\uff0c\u4e0eSpring\u65e0\u5173\u3002 // obj\u7684\u5185\u5bb9\u662fGreetingController, args\u91cc\u9762\u53ea\u6709\u4e00\u4e2a\u201cWorld\u201d\u5b57\u7b26\u4e32 public Object invoke(Object obj, Object... args) { ... } \u53ef\u4ee5\u770b\u51fahello.GreetingController#greeting\u5bf9\u5e94\u4e86spring\u4e2d\u7684\u4e00\u4e2aMethod\u5bf9\u8c61\uff0c\u901a\u8fc7\u53cd\u5c04\u6765\u89e6\u53d1\u8c03\u7528greeting\u51fd\u6570\u3002","title":"f4 java.lang.reflect.Method#invoke"},{"location":"java%E5%90%8E%E7%AB%AF/spring-callstack/#f5-orgspringframeworkwebmethodsupportinvocablehandlermethoddoinvoke","text":"\u8be5\u7c7b\u4f4d\u4e8espring-web\u6a21\u5757\u3002 protected Method getBridgedMethod() { return this.bridgedMethod; } // args\u91cc\u9762\u53ea\u6709\u4e00\u4e2a\u201cWorld\u201d\u5b57\u7b26\u4e32 protected Object doInvoke(Object... args) throws Exception { // spring\u652f\u6301\u5c06greeting\u65b9\u6cd5\u58f0\u660e\u4e3aprivate ReflectionUtils.makeAccessible(getBridgedMethod()); try { // \u6b64\u5904\u8c03\u7528f4 return getBridgedMethod().invoke(getBean(), args); } catch (IllegalArgumentException ex) { ... } catch (InvocationTargetException ex) { ... } \u5f02\u5e38\u60c5\u51b5\u4e0d\u5c55\u5f00\u8ba8\u8bba\uff0c\u56e0\u4e3a\u6211\u4eec\u53ea\u5173\u6ce8spring\u6838\u5fc3\u903b\u8f91\u3002\u56e0\u6b64org.springframework.web.method.support.InvocableHandlerMethod#doInvoke\u53ea\u662fjava.lang.reflect.Method#invoke\u7684\u4e00\u4e2a\u7b80\u5355\u7684wrapper\uff0c\u5904\u7406\u4e00\u4e9b\u53cd\u5c04\u65f6\u51fa\u73b0\u7684\u5f02\u5e38\u60c5\u51b5\uff0c\u65e0\u4ed6\u3002","title":"f5 org.springframework.web.method.support.InvocableHandlerMethod#doInvoke"},{"location":"java%E5%90%8E%E7%AB%AF/spring-callstack/#f6-orgspringframeworkwebmethodsupportinvocablehandlermethodinvokeforrequest","text":"\u8be5\u7c7b\u4f4d\u4e8espring-web\u6a21\u5757\u3002 // \u5165\u53c2\u7684\u5185\u5bb9 // ServletWebRequest: uri=/greeting;client=127.0.0.1 // ModelAndViewContainer: View is [null]; default model {} // \u53ef\u4ee5\u53d1\u73b0 public Object invokeForRequest(NativeWebRequest request, ModelAndViewContainer mavContainer, Object... providedArgs) throws Exception { // step 0. \u4eceNativeWebRequest\u548cModelAndViewContainer \u4e2d\u63d0\u53d6\u53c2\u6570\uff0c\u5173\u6ce8\u4e3b\u8981\u903b\u8f91\uff0c\u6682\u4e0d\u770b\u7ec6\u8282\u5b9e\u73b0 Object[] args = getMethodArgumentValues(request, mavContainer, providedArgs); // step 1. \u6253\u5f00trace log\u4f1a\u6709\u65e5\u5fd7\uff0cprotected final Log logger = LogFactory.getLog(getClass()); if (logger.isTraceEnabled()) { StringBuilder sb = new StringBuilder(\"Invoking [\"); sb.append(getBeanType().getSimpleName()).append(\".\"); sb.append(getMethod().getName()).append(\"] method with arguments \"); sb.append(Arrays.asList(args)); logger.trace(sb.toString()); } // step 2. \u6b64\u5904\u8c03\u7528f5 Object returnValue = doInvoke(args); if (logger.isTraceEnabled()) { logger.trace(\"Method [\" + getMethod().getName() + \"] returned [\" + returnValue + \"]\"); } return returnValue; } invokeForRequest\u53ea\u662f\u6839\u636erequest\u7b49\u5165\u53c2\u6765\u83b7\u53d6greeting\u65b9\u6cd5\u53c2\u6570\u5217\u8868\u4e2d\u7684\u53c2\u6570\uff0c\u7136\u540e\u901a\u8fc7\u53cd\u5c04\u6765\u8c03\u7528greeting\u65b9\u6cd5\u3002","title":"f6 org.springframework.web.method.support.InvocableHandlerMethod#invokeForRequest"},{"location":"java%E5%90%8E%E7%AB%AF/spring-callstack/#f7-orgspringframeworkwebservletmvcmethodannotationservletinvocablehandlermethodinvokeandhandle","text":"\u8be5\u7c7b\u4f4d\u4e8espring-webmvc\u6a21\u5757\u3002 public void invokeAndHandle(ServletWebRequest webRequest, ModelAndViewContainer mavContainer, Object... providedArgs) throws Exception { // step 0. \u6b64\u5904\u8c03\u7528f6\u6765\u83b7\u53d6\u6b64\u6b21request\u7684\u8fd4\u56de\u503c Object returnValue = invokeForRequest(webRequest, mavContainer, providedArgs); // step 1. \u8bbe\u7f6ewebRequest\u5bf9\u8c61\u7684\u54cd\u5e94\u72b6\u6001\uff0c\u5728\u8fd9\u6b21\u8bf7\u6c42\u4e2d\uff0c\u7531\u4e8e\u54cd\u5e94\u72b6\u6001\u662fnull\uff0c\u5b9e\u9645\u4e0awebRequest\u6ca1\u6709\u8bbe\u7f6e\u54cd\u5e94\u72b6\u6001\u3002 // todo: \u770b\u4e00\u4e0bgreeting\u629b\u51faexception\u65f6\u662f\u600e\u6837\u5904\u7406\u7684\u3002 setResponseStatus(webRequest); // step 2. \u5904\u7406mavContainer\u5bf9\u8c61\u7684\u72b6\u6001 ... mavContainer.setRequestHandled(true); // step 3. \u5904\u7406\u8fd4\u56de\u503c\uff0c\u503c\u5f97\u4e00\u770b\uff0c\u6682\u65f6\u7565\u8fc7\uff0c\u56e0\u4e3af8\u4e2d\u4f1a\u4ed4\u7ec6\u5206\u6790 this.returnValueHandlers.handleReturnValue( returnValue, getReturnValueType(returnValue), mavContainer, webRequest); ... } \u8fd9\u91ccstep 3\u7684returnValueHandlers\u4f7f\u7528\u4e86\u7ec4\u5408\u8bbe\u8ba1\u6a21\u5f0f\uff0c\u53ef\u7b80\u5355\u53c2\u8003org.springframework.web.method.support.HandlerMethodReturnValueHandlerComposite\uff0c\u5173\u6ce8\u4e3b\u8981\u903b\u8f91\uff0c\u6682\u65f6\u65e0\u9700\u5173\u6ce8\u592a\u591a\u3002","title":"f7 org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod#invokeAndHandle"},{"location":"java%E5%90%8E%E7%AB%AF/spring-callstack/#f8-orgspringframeworkwebservletmvcmethodannotationrequestmappinghandleradapterinvokehandlermethod","text":"\u8fd9\u90e8\u5206\u7565\u62bd\u8c61\uff0c\u6211\u4eec\u4ec5\u9700\u77e5\u9053\uff0c\u6211\u4eec\u7684greeting\u4f7f\u7528\u4e86@RequestMapping\u6ce8\u89e3\uff0c\u6240\u4ee5\u4f1a\u9009\u62e9RequestMappingHandlerAdapter\u6765\u8c03\u5ea6\u6267\u884c\u76f8\u5e94\u7684\u65b9\u6cd5\u3002 protected ModelAndView invokeHandlerMethod(HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod) throws Exception { // \u53ef\u53c2\u8003http://lgbolgger.iteye.com/blog/2111003 ... // \u6b64\u5904\u8c03\u7528f7 invocableMethod.invokeAndHandle(webRequest, mavContainer); ... }","title":"f8 org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#invokeHandlerMethod"},{"location":"java%E5%90%8E%E7%AB%AF/spring-callstack/#f9-orgspringframeworkwebservletmvcmethodannotationrequestmappinghandleradapterhandleinternal","text":"\u4f7f\u7528handlerMethod\u6765\u5185\u90e8\u5904\u7406request\uff0c\u6682\u65f6\u65e0\u9700\u5173\u6ce8\u8fc7\u591a\u3002 protected ModelAndView handleInternal(HttpServletRequest request, HttpServletResponse response, HandlerMethod handlerMethod) throws Exception { ... }","title":"f9 org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter#handleInternal"},{"location":"java%E5%90%8E%E7%AB%AF/spring-callstack/#f10-orgspringframeworkwebservletmvcmethodabstracthandlermethodadapterhandle","text":"\u4f7f\u7528handlerMethod\u6765\u5904\u7406request\uff0c\u6682\u65f6\u65e0\u9700\u5173\u6ce8\u8fc7\u591a\u3002 public final ModelAndView handle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception { return handleInternal(request, response, (HandlerMethod) handler); }","title":"f10 org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter#handle"},{"location":"java%E5%90%8E%E7%AB%AF/spring-callstack/#f11-orgspringframeworkwebservletdispatcherservletdodispatch","text":"\u5c06\u8bf7\u6c42\u5206\u53d1\u7ed9\u5bf9\u5e94\u7684handler\u3002 protected void doDispatch(HttpServletRequest request, HttpServletResponse response) throws Exception { ... mv = ha.handle(processedRequest, response, mappedHandler.getHandler()); ... } \u601d\u8003(to do)\uff1a \u8fd9\u6bb5\u4ee3\u7801\u662f\u600e\u6837\u5206\u53d1\u5230\u5bf9\u5e94\u7684handlerMethod\u7684\uff1f","title":"f11 org.springframework.web.servlet.DispatcherServlet#doDispatch"},{"location":"java%E5%90%8E%E7%AB%AF/spring-callstack/#f12-orgspringframeworkwebservletdispatcherservletdoservice","text":"protected void doService(HttpServletRequest request, HttpServletResponse response) throws Exception { ... }","title":"f12 org.springframework.web.servlet.DispatcherServlet#doService"},{"location":"java%E5%90%8E%E7%AB%AF/spring-callstack/#f13-orgspringframeworkwebservletframeworkservletprocessrequest","text":"protected final void processRequest(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { ... }","title":"f13 org.springframework.web.servlet.FrameworkServlet#processRequest"},{"location":"java%E5%90%8E%E7%AB%AF/spring-callstack/#f14-orgspringframeworkwebservletframeworkservletdoget","text":"\u66b4\u9732\u7ed9\u5bb9\u5668\u7684Servlet\uff0c\u53ef\u4ee5\u770b\u51fa\u8fd9\u4e2a\u662fspringframework\u7684\u5165\u53e3servlet protected final void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException { processRequest(request, response); }","title":"f14 org.springframework.web.servlet.FrameworkServlet#doGet"},{"location":"java%E5%90%8E%E7%AB%AF/spring-callstack/#f15-javaxservlethttphttpservletservicejavaxservlethttphttpservletrequest-javaxservlethttphttpservletresponse","text":"\u6ce8\u610f\u8fd9\u4e2a\u7c7b\u662fHttpServlet\u5373\u53ef protected void service(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException { ... } \u53ef\u4ee5\u770b\u51fa\uff0c\u4ecef1\u5230f15\u662f\u5206\u53d1\u8bf7\u6c42\u5e76\u5904\u7406\u7684\u5b8c\u6574\u8fc7\u7a0b\uff0c\u8fd9\u4e2a\u8fc7\u7a0b\u7684\u5165\u53e3\u662fHttpServlet\u7684service\u65b9\u6cd5\u3002","title":"f15 javax.servlet.http.HttpServlet#service(javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)"},{"location":"java%E5%90%8E%E7%AB%AF/spring-callstack/#f15","text":"\u5728f15\u4e4b\u540e\u7684\u6808\u5e27\uff0c\u9664\u4e86filter\u8fd9\u4e2a\u8fc7\u7a0b\u542b\u6709spring\u7684\u5b9e\u73b0\u7c7b\uff0c\u5176\u5b83\u90fd\u662f\u53d1\u751f\u5728org.apache.catalina\u8fd9\u4e2a\u5305\u4e2d\u7684\uff0c\u8fd9\u91cc\u53ea\u5173\u6ce8spring\u76f8\u5173\u7684\u5185\u5bb9\uff0cspring\u5bf9\u4e8efilter\u7684\u5b9e\u73b0\uff0c\u4e3b\u8981\u53c2\u8003org.springframework.web.filter.RequestContextFilter#doFilterInternal\u548corg.springframework.web.filter.OncePerRequestFilter#doFilter\u5373\u53ef\uff0c\u4ed6\u4eec\u90fd\u662fjavax.servlet.Filter\u7684\u5b50\u7c7b\u3002","title":"f15\u4e4b\u540e"},{"location":"java%E5%90%8E%E7%AB%AF/understanding-REST/","text":"\u7406\u89e3REST \u00b6 \u7ffb\u8bd1\u81ea\uff1a https://spring.io/understanding/REST \u7ef4\u57fa\u767e\u79d1\uff1a https://zh.wikipedia.org/wiki/REST REST (Representational State Transfer)\u662f\u7531 Roy Fielding 2000\u5e74\u53d1\u8868\u7684 \u535a\u58eb\u8bba\u6587 \u63d0\u51fa\u7684\u3002REST\u5e76\u975e\u6807\u51c6\uff0c\u800c\u662f\u7531\u4e00\u7cfb\u5217\u7ea6\u675f\u7ec4\u6210\uff0c\u4f8b\u5982\u65e0\u72b6\u6001\uff0cC/S\u6a21\u5f0f\u4ee5\u53ca\u98ce\u683c\u4e00\u81f4\u7684\u63a5\u53e3\u3002REST\u4e0eHTTP\u6ca1\u6709\u5fc5\u7136\u7684\u8054\u7cfb\u3002 REST\u7684\u539f\u5219 \u00b6 **Resources**\u66b4\u9732\u5bb9\u6613\u7406\u89e3\u7684URI\u8def\u5f84\u7ed3\u6784 **Representations**\u628aJSON\u6216XML\u8f6c\u6362\u6210\u5bf9\u8c61\u6216\u8005\u5c5e\u6027 **Messages**\u663e\u793a\u4f7f\u7528HTTP\u7684\u65b9\u6cd5\uff08\u4f8b\u5982GET, POST, PUT, DELETE\uff09 **Stateless**\u4ea4\u4e92\u4e0d\u5728\u670d\u52a1\u5668\u4e0a\u5b58\u50a8\u8bf7\u6c42\u7684\u5ba2\u6237\u7aef\u4e0a\u4e0b\u6587\u3002\u72b6\u6001\u7684\u4f9d\u8d56\u4f1a\u9650\u5236\u53ef\u6269\u5c55\u6027\uff0c\u5ba2\u6237\u7aef\u4fdd\u5b58\u4f1a\u8bdd\u72b6\u6001\u3002 HTTP methods \u00b6 \u4f7f\u7528HTTP methods\u6765\u5c06CRUD (create, retrieve, update, delete) \u64cd\u4f5c\u6620\u5c04\u5230HTTP\u8bf7\u6c42 GET \u00b6 \u83b7\u53d6\u4fe1\u606f\u3002GET\u5fc5\u987b\u662f\u5b89\u5168\u548c\u5e42\u7b49\u7684\uff0c\u5c31\u662f\u8bf4\u65e0\u8bba\u4f7f\u7528\u76f8\u540c\u7684\u53c2\u6570GET\u591a\u5c11\u6b21\uff0c\u7ed3\u679c\u90fd\u662f\u76f8\u540c\u7684\u3002GET\u53ef\u80fd\u4f1a\u6709\u8d1f\u9762\u5f71\u54cd\uff0c\u4f46\u4e0d\u5e94\u8be5\u662f\u7528\u6237\u6240\u671f\u671b\u7684\uff0c\u6240\u4ee5\u5bf9\u4e8e\u7cfb\u7edf\u7684\u64cd\u4f5c\u6765\u8bf4\u5e76\u4e0d\u4e25\u683c\u3002\u8bf7\u6c42\u4e5f\u53ef\u4ee5\u662f\u5c40\u90e8\u7684\u6216\u6709\u6761\u4ef6\u7684\u3002 \u83b7\u53d6\u4e00\u4e2aID\u662f1\u7684\u5730\u5740\uff1a GET /addresses/1 POST \u00b6 \u8bf7\u6c42\u4f4d\u4e8eURI\u7684\u8d44\u6e90\u5e76\u4f7f\u7528\u63d0\u4f9b\u7684entity\u505a\u4e00\u4e9b\u4e8b\u60c5\u3002\u901a\u5e38\u7528\u6765\u521b\u5efaentity\uff0c\u4e5f\u53ef\u4ee5\u7528\u6765\u66f4\u65b0entity\u3002 \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5730\u5740 POST /addresses PUT \u00b6 \u5728URI\u5904\u5b58\u50a8entity\u3002PUT\u53ef\u4ee5\u521b\u5efa\u6216\u8005\u66f4\u65b0entity\u3002PUT\u8bf7\u6c42\u662f\u5e42\u7b49\u7684\u3002\u5e42\u7b49\u662fPUT\u548cPOST\u4e4b\u95f4\u7684\u4e3b\u8981\u533a\u522b\u3002 \u66f4\u6539ID\u662f1\u7684\u5730\u5740 PUT /addresses/1 PUT\u66ff\u4ee3\u5b58\u5728\u7684entity\u3002\u5982\u679c\u53ea\u63d0\u4f9b\u6570\u636e\u5143\u7d20\u7684\u5b50\u96c6\uff0c\u672a\u63d0\u4f9b\u7684\u6570\u636e\u5143\u7d20\u5c06\u7528empty\u6216\u8005null\u6765\u66ff\u4ee3\u3002 PATCH \u00b6 \u53ea\u66f4\u65b0\u5904\u4e8eURI\u4f4d\u7f6e\u7684entity\u7684\u7279\u5b9a\u7684\u57df\u3002PATCH\u8bf7\u6c42\u662f\u5e42\u7b49\u7684\uff0c\u5e42\u7b49\u662fPATCH\u4e0ePOST\u7684\u4e3b\u8981\u533a\u522b\u3002 PATCH /addresses/1 DELETE \u00b6 \u8bf7\u6c42\u79fb\u9664\u8d44\u6e90\uff1b\u7136\u800c\u8d44\u6e90\u4e0d\u5fc5\u7acb\u5373\u88ab\u79fb\u9664\uff0c\u5b83\u53ef\u662f\u662f\u4e00\u4e2a\u5f02\u6b65\u7684\u6216\u8fd0\u884c\u65f6\u95f4\u5f88\u957f\u7684\u8bf7\u6c42\u3002 \u5220\u9664ID\u662f1\u7684\u5730\u5740 DELETE /addresses/1 HTTP \u72b6\u6001\u7801 \u00b6 \u72b6\u6001\u7801\u4ee3\u8868\u4e86HTTP\u8bf7\u6c42\u7684\u7ed3\u679c 1XX - informational 2XX - success 3XX - redirection 4XX - client error 5XX - server error Media\u7c7b\u578b \u00b6 Accept \u548c Content-Type HTTP headers \u53ef\u4ee5\u7528\u6765\u63cf\u8ff0HTTP\u8bf7\u6c42\u4e2d\u53d1\u9001\u6216\u8005\u8bf7\u6c42\u7684\u5185\u5bb9\u3002\u5982\u679c\u4ed6\u8bf7\u6c42\u7684\u662fJSON\u5f62\u5f0f\u7684response\uff0c\u5ba2\u6237\u7aef\u53ef\u80fd\u4f1a\u5c06 Accept \u8bbe\u7f6e\u6210**application/json** . \u76f8\u53cd, \u5728\u53d1\u9001\u6570\u636e\u7684\u65f6\u5019, \u5c06 **Content-Type**\u8bbe\u7f6e\u6210**application/xml**\u5c06\u8868\u793a\u5ba2\u6237\u7aef\u8bf7\u6c42\u6b63\u5728\u53d1\u9001\u7684\u6570\u636e\u662fXML\u5f62\u5f0f\u3002","title":"\u7406\u89e3REST"},{"location":"java%E5%90%8E%E7%AB%AF/understanding-REST/#rest","text":"\u7ffb\u8bd1\u81ea\uff1a https://spring.io/understanding/REST \u7ef4\u57fa\u767e\u79d1\uff1a https://zh.wikipedia.org/wiki/REST REST (Representational State Transfer)\u662f\u7531 Roy Fielding 2000\u5e74\u53d1\u8868\u7684 \u535a\u58eb\u8bba\u6587 \u63d0\u51fa\u7684\u3002REST\u5e76\u975e\u6807\u51c6\uff0c\u800c\u662f\u7531\u4e00\u7cfb\u5217\u7ea6\u675f\u7ec4\u6210\uff0c\u4f8b\u5982\u65e0\u72b6\u6001\uff0cC/S\u6a21\u5f0f\u4ee5\u53ca\u98ce\u683c\u4e00\u81f4\u7684\u63a5\u53e3\u3002REST\u4e0eHTTP\u6ca1\u6709\u5fc5\u7136\u7684\u8054\u7cfb\u3002","title":"\u7406\u89e3REST"},{"location":"java%E5%90%8E%E7%AB%AF/understanding-REST/#rest_1","text":"**Resources**\u66b4\u9732\u5bb9\u6613\u7406\u89e3\u7684URI\u8def\u5f84\u7ed3\u6784 **Representations**\u628aJSON\u6216XML\u8f6c\u6362\u6210\u5bf9\u8c61\u6216\u8005\u5c5e\u6027 **Messages**\u663e\u793a\u4f7f\u7528HTTP\u7684\u65b9\u6cd5\uff08\u4f8b\u5982GET, POST, PUT, DELETE\uff09 **Stateless**\u4ea4\u4e92\u4e0d\u5728\u670d\u52a1\u5668\u4e0a\u5b58\u50a8\u8bf7\u6c42\u7684\u5ba2\u6237\u7aef\u4e0a\u4e0b\u6587\u3002\u72b6\u6001\u7684\u4f9d\u8d56\u4f1a\u9650\u5236\u53ef\u6269\u5c55\u6027\uff0c\u5ba2\u6237\u7aef\u4fdd\u5b58\u4f1a\u8bdd\u72b6\u6001\u3002","title":"REST\u7684\u539f\u5219"},{"location":"java%E5%90%8E%E7%AB%AF/understanding-REST/#http-methods","text":"\u4f7f\u7528HTTP methods\u6765\u5c06CRUD (create, retrieve, update, delete) \u64cd\u4f5c\u6620\u5c04\u5230HTTP\u8bf7\u6c42","title":"HTTP methods"},{"location":"java%E5%90%8E%E7%AB%AF/understanding-REST/#get","text":"\u83b7\u53d6\u4fe1\u606f\u3002GET\u5fc5\u987b\u662f\u5b89\u5168\u548c\u5e42\u7b49\u7684\uff0c\u5c31\u662f\u8bf4\u65e0\u8bba\u4f7f\u7528\u76f8\u540c\u7684\u53c2\u6570GET\u591a\u5c11\u6b21\uff0c\u7ed3\u679c\u90fd\u662f\u76f8\u540c\u7684\u3002GET\u53ef\u80fd\u4f1a\u6709\u8d1f\u9762\u5f71\u54cd\uff0c\u4f46\u4e0d\u5e94\u8be5\u662f\u7528\u6237\u6240\u671f\u671b\u7684\uff0c\u6240\u4ee5\u5bf9\u4e8e\u7cfb\u7edf\u7684\u64cd\u4f5c\u6765\u8bf4\u5e76\u4e0d\u4e25\u683c\u3002\u8bf7\u6c42\u4e5f\u53ef\u4ee5\u662f\u5c40\u90e8\u7684\u6216\u6709\u6761\u4ef6\u7684\u3002 \u83b7\u53d6\u4e00\u4e2aID\u662f1\u7684\u5730\u5740\uff1a GET /addresses/1","title":"GET"},{"location":"java%E5%90%8E%E7%AB%AF/understanding-REST/#post","text":"\u8bf7\u6c42\u4f4d\u4e8eURI\u7684\u8d44\u6e90\u5e76\u4f7f\u7528\u63d0\u4f9b\u7684entity\u505a\u4e00\u4e9b\u4e8b\u60c5\u3002\u901a\u5e38\u7528\u6765\u521b\u5efaentity\uff0c\u4e5f\u53ef\u4ee5\u7528\u6765\u66f4\u65b0entity\u3002 \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u5730\u5740 POST /addresses","title":"POST"},{"location":"java%E5%90%8E%E7%AB%AF/understanding-REST/#put","text":"\u5728URI\u5904\u5b58\u50a8entity\u3002PUT\u53ef\u4ee5\u521b\u5efa\u6216\u8005\u66f4\u65b0entity\u3002PUT\u8bf7\u6c42\u662f\u5e42\u7b49\u7684\u3002\u5e42\u7b49\u662fPUT\u548cPOST\u4e4b\u95f4\u7684\u4e3b\u8981\u533a\u522b\u3002 \u66f4\u6539ID\u662f1\u7684\u5730\u5740 PUT /addresses/1 PUT\u66ff\u4ee3\u5b58\u5728\u7684entity\u3002\u5982\u679c\u53ea\u63d0\u4f9b\u6570\u636e\u5143\u7d20\u7684\u5b50\u96c6\uff0c\u672a\u63d0\u4f9b\u7684\u6570\u636e\u5143\u7d20\u5c06\u7528empty\u6216\u8005null\u6765\u66ff\u4ee3\u3002","title":"PUT"},{"location":"java%E5%90%8E%E7%AB%AF/understanding-REST/#patch","text":"\u53ea\u66f4\u65b0\u5904\u4e8eURI\u4f4d\u7f6e\u7684entity\u7684\u7279\u5b9a\u7684\u57df\u3002PATCH\u8bf7\u6c42\u662f\u5e42\u7b49\u7684\uff0c\u5e42\u7b49\u662fPATCH\u4e0ePOST\u7684\u4e3b\u8981\u533a\u522b\u3002 PATCH /addresses/1","title":"PATCH"},{"location":"java%E5%90%8E%E7%AB%AF/understanding-REST/#delete","text":"\u8bf7\u6c42\u79fb\u9664\u8d44\u6e90\uff1b\u7136\u800c\u8d44\u6e90\u4e0d\u5fc5\u7acb\u5373\u88ab\u79fb\u9664\uff0c\u5b83\u53ef\u662f\u662f\u4e00\u4e2a\u5f02\u6b65\u7684\u6216\u8fd0\u884c\u65f6\u95f4\u5f88\u957f\u7684\u8bf7\u6c42\u3002 \u5220\u9664ID\u662f1\u7684\u5730\u5740 DELETE /addresses/1","title":"DELETE"},{"location":"java%E5%90%8E%E7%AB%AF/understanding-REST/#http","text":"\u72b6\u6001\u7801\u4ee3\u8868\u4e86HTTP\u8bf7\u6c42\u7684\u7ed3\u679c 1XX - informational 2XX - success 3XX - redirection 4XX - client error 5XX - server error","title":"HTTP \u72b6\u6001\u7801"},{"location":"java%E5%90%8E%E7%AB%AF/understanding-REST/#media","text":"Accept \u548c Content-Type HTTP headers \u53ef\u4ee5\u7528\u6765\u63cf\u8ff0HTTP\u8bf7\u6c42\u4e2d\u53d1\u9001\u6216\u8005\u8bf7\u6c42\u7684\u5185\u5bb9\u3002\u5982\u679c\u4ed6\u8bf7\u6c42\u7684\u662fJSON\u5f62\u5f0f\u7684response\uff0c\u5ba2\u6237\u7aef\u53ef\u80fd\u4f1a\u5c06 Accept \u8bbe\u7f6e\u6210**application/json** . \u76f8\u53cd, \u5728\u53d1\u9001\u6570\u636e\u7684\u65f6\u5019, \u5c06 **Content-Type**\u8bbe\u7f6e\u6210**application/xml**\u5c06\u8868\u793a\u5ba2\u6237\u7aef\u8bf7\u6c42\u6b63\u5728\u53d1\u9001\u7684\u6570\u636e\u662fXML\u5f62\u5f0f\u3002","title":"Media\u7c7b\u578b"},{"location":"java%E5%90%8E%E7%AB%AF/vim-learning-notes/","text":"This is a learning notes of \u300avimbook-OPL.pdf\u300b Basic Command: \u00b6 command description :help get help. You can also use \\<F1>. h,j,k,l move cursor to left,down,up,right 2h an example to move cursor to left 2 character. use \\<n>h/j/k/l to move faster o open new line below cursor O open new line above cursor a append 3a5\\<Esc> an example to append '555'. similarly, command 3x will delete 3 characters. i insert ZZ save and close ctrl+] jump to tag ctrl+T pop a tag off the tag stack. (go back to location before jump tag.) dd cut line into vim clipboard. dw cut a word d3w cut three words Edit A Little Faster \u00b6 command description w move cursor forward one word b move cursor back one word 2w move cursor forward two word $, \\<End> move cursor to end of line ^ move cursor to first nonblank character of the line \\<Home> move cursor to first character of the line 2$ move cursor to end of next line \\<kHome> move cursor to first character of current line f\\<x> forward search character \\<x>. 5f\\<x> forward move cursor to fifth character \\<x> of current line F\\<x> back search character \\<x>. t\\<x> forward search character \\<x> but move cursor before the character \\<x> T\\<x> back search character \\<x> but move cursor after the character \\<x> 3G move cursor to the 3 rd line :set nu show line number :set nonu don't show line number ctrl+G displays a status line that indicates where you are in the file ctrl+U scrolls up half a screen of text ctrl+D scrolls down half a screen of text d$, D delete to end of line cw change a word cc change the whole line . repeats the last delete or change command J joins the current line with the next one r\\<x> replaces the character under the cursor with \\<x> q\\<x> Start recording a macro in register x q Stop recording the macro :digraphs show available digraph symbols Searching \u00b6 Special characters: *[]\u02c6%/\\?~$ has special meaning. command description /\\<string> search \\<string> /\\<Enter>, n find next result N find last result /\\<Up> last search history /\\<Down> next search history :set hlsearch highlight any strings found matching the search pattern :set nohlsearch turn off search highlighting :nohlsearch clear the current highlighting :set incsearch turn on incremental searches :set noincsearch turn off incremental searches ? searches backward. ? and n commands work together Text Blocks and Multiple Files \u00b6 command description p paste the text before the cursor m\\<a> marks the place under the cursor as mark \\<a> `\\<a> go to mark \\<a> :marks list all marks yy, Y yanks the current line into the buffer (copy operation) y`\\<a> copy text between current cursor and mark \\<a> \\<n>Y yank n lines into the registers !\\<motion> \\<command> It runs the system command represented by command, giving it the block of text represented by motion as input. The output of this command then replaces the selected block. !10Gsort The result is that the sort program is run on the first 10 lines. The output of the programreplaces these lines. !!ls This puts the output of the ls command into current line. !!date This puts the output of the date command into current line. For !!ls and !!date Using !! like this is technically not filtering because commands like ls and date don\u2019t read standard input. :vi file edit another file The :e command can be used in place of :vi :write save current file :vi! file.txt force Vim to discard your changes and edit the new file using the force (!) option :view file the new file is opened in read-only mode vim \\<file1> \\<file2> \\<...> edit multiple files. By default, Vim displays just the first file.To edit the next file, you need to change files using the :next command :next edit the next file :wnext save file and edit the next file :next! edit the next file :set autowrite turn on auto write. :set noautowrite turn off auto write :2 next excute :next twice :args displays the list of the files currently being edited :previous :Next edit the previous file :wprevious save file and edit the previous file :wNext save file and edit the previous file :rewind :first edit the first file :last edit the last file ctrl+^ switch editing from the current file to the alternate file \\<n>ctrl+^ switch to \\<n>th file Window && Buffer \u00b6 command description :split open a new window. You can view two different parts of a file simultaneously. ctrl+ww switch window ctrl+wj go down a window ctrl+wk go up a window ctrl+wc \\<br/> ZZ \\<br/>:q close current window :split \\<file> open a new window and edit given \\<file> :split +/printf three.c :3 split \\<file> :3split \\<file> Controlling Window Size. opens a new window three lines high. :count split +command file count:The size of the new window in lines. (Default is to split the current window into two equal sizes.) +command: An initial command. file: The name of the file to edit. (Default is the current file.) This is a summary for split :new open a new window and edit new file. The :new command works just like the :split command. :sview The :sview command acts like a combination of :split and :view ctrl w+ increases the window size by count (default = 1). ctrl w- decreases the window\u2019s size by count (default = 1). \\<n> ctrl w makes the current window n lines high :hide hide a window. ( But Vim still knows that you are editing this buffer) :buffers find a list of buffers explanation for buffer: The first column is the buffer number. The second is a series of flags indicating the state of the buffer. The third is the name of the file associated with the buffer. The state flags are as follows: - Inactive buffer. h Buffer is hidden. % Current buffer. # Alternate buffer. + File has been modified. :buffer number Selecting a Buffer by number :buffer file Selecting a Buffer by file name :sbuffer number splits the window and starts editing the buffer :bnext Go to the next buffer. :count bnext Go to the next buffer count times. :count sbnext Shorthand for :split followed by :count bnext. :count bprevious :count bNext Go to previous buffer. If a count is specified, go to the count previous buffer. :count sbprevious :count sbNext Shorthand for :split and :count bprevious :blast Go to the last buffer in the list. :sblast Shorthand for :split and :blast. :brewind Go to the first buffer in the list. :sbrewind Shorthand for :split and :rewind. :bmodified count Go to count modified buffer on the list. :sbmodified count Shorthand for :split and :bmodified. :set hidden If the option hidden is set, files that leave the screen do not become inactive; instead they automatically become hidden. Basic Visual Mode \u00b6 command description v starts a character-bycharacter visual mode. V starts linewise visual mode. ctrl V block visual mode :help v_d help on the commands that operate in visual mode \\<Esc> ctrl c Leaving Visual Mode > indents the selected lines by one \u201cshift width\" < reverse to > ctrl V then Istring\\<Esc> inserts the text on each line starting at the left side of the visual block ctrl V then c \\<Esc> change each line in the visual block ctrl V then r\\<character> \\<Esc> replace the selected characters with a single character ctrl V then > \\<Esc> The command > shifts the text to the right one shift width The < command removes one shift width of whitespace at the left side of the block :help v_b_r Help r command in Visual Block Mode Commands for Programmers \u00b6 command description :syntax on turns on syntax coloring :set filetype=c tells Vim which type of syntax highlighting to use >> shifts the current line one shift width to the right << shifts the current line one shift width to the left :set shiftwidth=4 set shiftwidth 5<< shifts 5 lines <motion shifts each line from the current cursor location to where motion carries you. =motion indents the selected text using Vim\u2019s internal formatting program. [CTRL-I ]CTRL-I Search for a word under the cursor in the current file and any brought in by #include directives. The [CTRL-I command jumps to the word under the cursor. The search starts at the beginning of the file and also searches files brought in by #include directives. The ]CTRL-I does the same thing, starting at the cursor location. gd gD Search for the definition of a variable. gd for local variable and gD for global variable. ]CTRL-D [CTRL-D Jump to a macro definition. The [CTRL-D command searches for the first definition of the macro The ]CTRL-D command searches for the next definition of the macro ]d [d ]D [D Display macro definitions. The [d command displays the first definition of the macro whose name is under the cursor. The ]d command does the same thing only it starts looking from the current cursor position and finds the next definition. The ]D and [D commands list all the definitions of a macro. % The % command is designed to match pairs of (), {}, or [], /*, #ifndef, #if >% Shifting a Block of Text Enclosed in {} 1. Position the cursor on the first {. 2. Execute the command >i{. This shift right command (>) shifts the selected text to the right one shift width. In this case, the selection command that follows is i{, which is the \u201cinner {} block\u201d command. 1. Position the cursor on the left or right curly brace. 2. Start visual mode with the v command. 3. Select the inner {} block with the command i}. 4. Indent the text with >. indent a block using visual mode K The K command runs a UNIX man command using the word under the cursor as a subject. :tag function go to a function definition :tags The :tags command shows the list of the tags that you have traversed through CTRL-T The CTRL-T command goes the preceding tag. : tag jump forward that many tags on the list :stag tag You can split the window using the :split command followed by the :tag command. :tag /\\<regular expression> Finding a Procedure When You Only Know Part of the Name pocessing: 82","title":"vim"},{"location":"java%E5%90%8E%E7%AB%AF/vim-learning-notes/#basic-command","text":"command description :help get help. You can also use \\<F1>. h,j,k,l move cursor to left,down,up,right 2h an example to move cursor to left 2 character. use \\<n>h/j/k/l to move faster o open new line below cursor O open new line above cursor a append 3a5\\<Esc> an example to append '555'. similarly, command 3x will delete 3 characters. i insert ZZ save and close ctrl+] jump to tag ctrl+T pop a tag off the tag stack. (go back to location before jump tag.) dd cut line into vim clipboard. dw cut a word d3w cut three words","title":"Basic Command:"},{"location":"java%E5%90%8E%E7%AB%AF/vim-learning-notes/#edit-a-little-faster","text":"command description w move cursor forward one word b move cursor back one word 2w move cursor forward two word $, \\<End> move cursor to end of line ^ move cursor to first nonblank character of the line \\<Home> move cursor to first character of the line 2$ move cursor to end of next line \\<kHome> move cursor to first character of current line f\\<x> forward search character \\<x>. 5f\\<x> forward move cursor to fifth character \\<x> of current line F\\<x> back search character \\<x>. t\\<x> forward search character \\<x> but move cursor before the character \\<x> T\\<x> back search character \\<x> but move cursor after the character \\<x> 3G move cursor to the 3 rd line :set nu show line number :set nonu don't show line number ctrl+G displays a status line that indicates where you are in the file ctrl+U scrolls up half a screen of text ctrl+D scrolls down half a screen of text d$, D delete to end of line cw change a word cc change the whole line . repeats the last delete or change command J joins the current line with the next one r\\<x> replaces the character under the cursor with \\<x> q\\<x> Start recording a macro in register x q Stop recording the macro :digraphs show available digraph symbols","title":"Edit A Little Faster"},{"location":"java%E5%90%8E%E7%AB%AF/vim-learning-notes/#searching","text":"Special characters: *[]\u02c6%/\\?~$ has special meaning. command description /\\<string> search \\<string> /\\<Enter>, n find next result N find last result /\\<Up> last search history /\\<Down> next search history :set hlsearch highlight any strings found matching the search pattern :set nohlsearch turn off search highlighting :nohlsearch clear the current highlighting :set incsearch turn on incremental searches :set noincsearch turn off incremental searches ? searches backward. ? and n commands work together","title":"Searching"},{"location":"java%E5%90%8E%E7%AB%AF/vim-learning-notes/#text-blocks-and-multiple-files","text":"command description p paste the text before the cursor m\\<a> marks the place under the cursor as mark \\<a> `\\<a> go to mark \\<a> :marks list all marks yy, Y yanks the current line into the buffer (copy operation) y`\\<a> copy text between current cursor and mark \\<a> \\<n>Y yank n lines into the registers !\\<motion> \\<command> It runs the system command represented by command, giving it the block of text represented by motion as input. The output of this command then replaces the selected block. !10Gsort The result is that the sort program is run on the first 10 lines. The output of the programreplaces these lines. !!ls This puts the output of the ls command into current line. !!date This puts the output of the date command into current line. For !!ls and !!date Using !! like this is technically not filtering because commands like ls and date don\u2019t read standard input. :vi file edit another file The :e command can be used in place of :vi :write save current file :vi! file.txt force Vim to discard your changes and edit the new file using the force (!) option :view file the new file is opened in read-only mode vim \\<file1> \\<file2> \\<...> edit multiple files. By default, Vim displays just the first file.To edit the next file, you need to change files using the :next command :next edit the next file :wnext save file and edit the next file :next! edit the next file :set autowrite turn on auto write. :set noautowrite turn off auto write :2 next excute :next twice :args displays the list of the files currently being edited :previous :Next edit the previous file :wprevious save file and edit the previous file :wNext save file and edit the previous file :rewind :first edit the first file :last edit the last file ctrl+^ switch editing from the current file to the alternate file \\<n>ctrl+^ switch to \\<n>th file","title":"Text Blocks and Multiple Files"},{"location":"java%E5%90%8E%E7%AB%AF/vim-learning-notes/#window-buffer","text":"command description :split open a new window. You can view two different parts of a file simultaneously. ctrl+ww switch window ctrl+wj go down a window ctrl+wk go up a window ctrl+wc \\<br/> ZZ \\<br/>:q close current window :split \\<file> open a new window and edit given \\<file> :split +/printf three.c :3 split \\<file> :3split \\<file> Controlling Window Size. opens a new window three lines high. :count split +command file count:The size of the new window in lines. (Default is to split the current window into two equal sizes.) +command: An initial command. file: The name of the file to edit. (Default is the current file.) This is a summary for split :new open a new window and edit new file. The :new command works just like the :split command. :sview The :sview command acts like a combination of :split and :view ctrl w+ increases the window size by count (default = 1). ctrl w- decreases the window\u2019s size by count (default = 1). \\<n> ctrl w makes the current window n lines high :hide hide a window. ( But Vim still knows that you are editing this buffer) :buffers find a list of buffers explanation for buffer: The first column is the buffer number. The second is a series of flags indicating the state of the buffer. The third is the name of the file associated with the buffer. The state flags are as follows: - Inactive buffer. h Buffer is hidden. % Current buffer. # Alternate buffer. + File has been modified. :buffer number Selecting a Buffer by number :buffer file Selecting a Buffer by file name :sbuffer number splits the window and starts editing the buffer :bnext Go to the next buffer. :count bnext Go to the next buffer count times. :count sbnext Shorthand for :split followed by :count bnext. :count bprevious :count bNext Go to previous buffer. If a count is specified, go to the count previous buffer. :count sbprevious :count sbNext Shorthand for :split and :count bprevious :blast Go to the last buffer in the list. :sblast Shorthand for :split and :blast. :brewind Go to the first buffer in the list. :sbrewind Shorthand for :split and :rewind. :bmodified count Go to count modified buffer on the list. :sbmodified count Shorthand for :split and :bmodified. :set hidden If the option hidden is set, files that leave the screen do not become inactive; instead they automatically become hidden.","title":"Window &amp;&amp; Buffer"},{"location":"java%E5%90%8E%E7%AB%AF/vim-learning-notes/#basic-visual-mode","text":"command description v starts a character-bycharacter visual mode. V starts linewise visual mode. ctrl V block visual mode :help v_d help on the commands that operate in visual mode \\<Esc> ctrl c Leaving Visual Mode > indents the selected lines by one \u201cshift width\" < reverse to > ctrl V then Istring\\<Esc> inserts the text on each line starting at the left side of the visual block ctrl V then c \\<Esc> change each line in the visual block ctrl V then r\\<character> \\<Esc> replace the selected characters with a single character ctrl V then > \\<Esc> The command > shifts the text to the right one shift width The < command removes one shift width of whitespace at the left side of the block :help v_b_r Help r command in Visual Block Mode","title":"Basic Visual Mode"},{"location":"java%E5%90%8E%E7%AB%AF/vim-learning-notes/#commands-for-programmers","text":"command description :syntax on turns on syntax coloring :set filetype=c tells Vim which type of syntax highlighting to use >> shifts the current line one shift width to the right << shifts the current line one shift width to the left :set shiftwidth=4 set shiftwidth 5<< shifts 5 lines <motion shifts each line from the current cursor location to where motion carries you. =motion indents the selected text using Vim\u2019s internal formatting program. [CTRL-I ]CTRL-I Search for a word under the cursor in the current file and any brought in by #include directives. The [CTRL-I command jumps to the word under the cursor. The search starts at the beginning of the file and also searches files brought in by #include directives. The ]CTRL-I does the same thing, starting at the cursor location. gd gD Search for the definition of a variable. gd for local variable and gD for global variable. ]CTRL-D [CTRL-D Jump to a macro definition. The [CTRL-D command searches for the first definition of the macro The ]CTRL-D command searches for the next definition of the macro ]d [d ]D [D Display macro definitions. The [d command displays the first definition of the macro whose name is under the cursor. The ]d command does the same thing only it starts looking from the current cursor position and finds the next definition. The ]D and [D commands list all the definitions of a macro. % The % command is designed to match pairs of (), {}, or [], /*, #ifndef, #if >% Shifting a Block of Text Enclosed in {} 1. Position the cursor on the first {. 2. Execute the command >i{. This shift right command (>) shifts the selected text to the right one shift width. In this case, the selection command that follows is i{, which is the \u201cinner {} block\u201d command. 1. Position the cursor on the left or right curly brace. 2. Start visual mode with the v command. 3. Select the inner {} block with the command i}. 4. Indent the text with >. indent a block using visual mode K The K command runs a UNIX man command using the word under the cursor as a subject. :tag function go to a function definition :tags The :tags command shows the list of the tags that you have traversed through CTRL-T The CTRL-T command goes the preceding tag. : tag jump forward that many tags on the list :stag tag You can split the window using the :split command followed by the :tag command. :tag /\\<regular expression> Finding a Procedure When You Only Know Part of the Name pocessing: 82","title":"Commands for Programmers"},{"location":"java%E5%90%8E%E7%AB%AF/%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7%E7%B1%BB/","text":"\u540c\u6b65\u5de5\u5177\u7c7b \u00b6 CountDownLatch \u00b6 CountDownLatch\u662f\u4e00\u79cd\u7075\u6d3b\u7684\u95ed\u9501\u5b9e\u73b0\uff0c\u5b83\u53ef\u4ee5\u4f7f\u4e00\u4e2a\u6216\u591a\u4e2a\u7ebf\u7a0b\u7b49\u5f85\u4e00\u7ec4\u4e8b\u4ef6\u7684\u53d1\u751f\u3002 1. \u521b\u5efa\u5bf9\u8c61 CountDownLatch startGate = new CountDownLatch(3); 2. \u5728\u67d0\u5904await startGate.await(); 3. \u8c03\u7528countdown()\u65b9\u6cd53\u6b21\u540e\u5c06\u4f7fawait\u7684\u7ebf\u7a0b\u4e0d\u518d\u963b\u585e startGate.countdown(); FutureTask \u00b6 \u8868\u793a\u4e00\u79cd\u62bd\u8c61\u7684\u53ef\u751f\u6210\u7ed3\u679c\u7684\u8ba1\u7b97\u3002\u5c06\u8ba1\u7b97\u7ed3\u679c\u4ece\u6267\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u4f20\u9012\u5230\u83b7\u53d6\u8fd9\u4e2a\u7ed3\u679c\u7684\u7ebf\u7a0b\u3002 Future.get\u5c06\u963b\u585e\u76f4\u5230\u4efb\u52a1\u8fdb\u5165\u5b8c\u6210\u72b6\u6001\uff0c\u7136\u540e\u8fd4\u56de\u7ed3\u679c\u6216\u629b\u51fa\u5f02\u5e38\u3002 1. \u521b\u5efa\u5bf9\u8c61 FutureTask<XxClass> future = new FutureTask<XxClass>(new Callable<XxClass>(){ public XxClass call() { return XxClass(); } }); 2. future.start(); 3. \u4f7f\u7528get\u5f02\u6b65\u963b\u585e\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c try{ future.get(); ... } catch(ExecutionException e) { ... } Semaphore \u00b6 \u7528\u4e8e\u63a7\u5236\u540c\u65f6\u6267\u884c\u64cd\u4f5c\u7684\u6570\u91cf\uff0c\u5b9e\u73b0\u67d0\u79cd\u8d44\u6e90\u6c60\uff0c\u5bf9\u5bb9\u5668\u65bd\u52a0\u8fb9\u754c\u3002 Semaphore sem = new Semaphore(1); sem.acquire(); ... sem.release(); \u6805\u680f\uff08Barrier\uff09 \u00b6 CyclicBarrier \u00b6 CyclicBarrier\u53ef\u4ee5\u4f7f\u4e00\u5b9a\u6570\u91cf\u7684\u53c2\u4e0e\u65b9\u53cd\u590d\u5730\u5728\u6805\u680f\u4f4d\u7f6e\u6c47\u96c6\uff0c\u5b83\u5728\u5e76\u884c\u8fed\u4ee3\u7b97\u6cd5\u4e2d\u975e\u5e38\u6709\u7528\uff1a\u8fd9\u79cd\u7b97\u6cd5\u901a\u5e38\u5c06\u4e00\u4e2a\u95ee\u9898\u62c6\u5206\u6210\u4e00\u7cfb\u5217\u76f8\u4e92\u72ec\u7acb\u7684\u5b50\u95ee\u9898\u3002\uff08\u5373\u6805\u680f\u662f\u53ef\u91cd\u590d\u5229\u7528\u7684\uff09 1. \u521b\u5efaCyclicBarrier\u5bf9\u8c61\uff0c\u5f533\u4e2a\u7ebf\u7a0b\u5230\u8fbe\u6805\u680f\u4f4d\u7f6e\u65f6\u6267\u884crun()\u65b9\u6cd5 CyclicBarrier barrier = new CyclicBarrier(3, new Runnable(){ public void run(){ ... } }); 2. \u5728\u67d0\u4e2a\u7ebf\u7a0b\u7684run\u65b9\u6cd5\u4e2d\u8c03\u7528await\uff08\uff09\u7b49\u5f85\u5176\u4ed6\u7ebf\u7a0b\u5230\u8fbe\u6805\u680f\u4f4d\u7f6e public void run() { while(xx) { ... try { barrier.await(); } catch(InterruptedException ex) { ... // \u5982\u679c\u5bf9await\u7684\u8c03\u7528\u8d85\u65f6\uff0c\u6216\u8005await\u963b\u585e\u7684\u7ebf\u7a0b\u88ab\u4e2d\u65ad\uff0c\u90a3\u4e48\u6805\u680f\u5c31\u8ba4\u4e3a\u88ab\u6253\u7834\u4e86 } catch(BrokenBarrierException ex) { ... } } } Exchanger \u00b6 \u53e6\u4e00\u79cd\u5f62\u5f0f\u7684\u6805\u680f\u662f Exchanger \uff0c \u5b83\u662f\u4e00\u79cd\u4e24\u65b9\u6805\u680f\uff0c\u5404\u65b9\u5728\u6805\u680f\u4f4d\u7f6e\u4e0a\u4ea4\u6362\u6570\u636e\u3002\u5f53\u4e24\u65b9\u6267\u884c\u4e0d\u5bf9\u79f0\u7684\u64cd\u4f5c\u65f6\u4f1a\u975e\u5e38\u6709\u7528\u3002\u4f8b\u5982\u7528\u6765\u4ea4\u6362\u7f13\u51b2\u533a\u3002 \u6570\u636e\u7684\u4ea4\u6362\u65f6\u673a\u53d6\u51b3\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u54cd\u5e94\u9700\u6c42\u3002\u6700\u7b80\u5355\u7684\u7b56\u7565\u662f\u5f53\u7f13\u51b2\u533a\u88ab\u586b\u6ee1\u6216\u8005\u7a7a\u65f6\u8fdb\u884c\u4ea4\u6362\u3002\u8fd9\u79cd\u7b56\u7565\u4f1a\u4f7f\u4ea4\u6362\u7684\u6b21\u6570\u964d\u81f3\u6700\u4f4e\uff0c\u4f46\u5982\u679c\u65b0\u6570\u636e\u7684\u5230\u8fbe\u7387\u4e0d\u53ef\u9884\u6d4b\uff0c\u90a3\u4e48\u4e00\u4e9b\u6570\u636e\u7684\u5904\u7406\u8fc7\u7a0b\u5c31\u5c06\u5ef6\u8fdf\u3002\u53e6\u4e00\u79cd\u7b56\u7565\u662f\u5f53\u7f13\u51b2\u88ab\u586b\u5145\u5230\u4e00\u5b9a\u7a0b\u5ea6\u5e76\u4fdd\u6301\u4e00\u6bb5\u65f6\u95f4\u540e\u4e5f\u8fdb\u884c\u4ea4\u6362\u3002 class FillAndEmpty { Exchanger<DataBuffer> exchanger = new Exchanger<DataBuffer>(); DataBuffer initialEmptyBuffer = ... a made-up type DataBuffer initialFullBuffer = ... class FillingLoop implements Runnable { public void run() { DataBuffer currentBuffer = initialEmptyBuffer; try { while (currentBuffer != null) { addToBuffer(currentBuffer); if (currentBuffer.isFull()) currentBuffer = exchanger.exchange(currentBuffer); } } catch (InterruptedException ex) { ... handle ... } } } class EmptyingLoop implements Runnable { public void run() { DataBuffer currentBuffer = initialFullBuffer; try { while (currentBuffer != null) { takeFromBuffer(currentBuffer); if (currentBuffer.isEmpty()) currentBuffer = exchanger.exchange(currentBuffer); } } catch (InterruptedException ex) { ... handle ...} } } void start() { new Thread(new FillingLoop()).start(); new Thread(new EmptyingLoop()).start(); } }","title":"\u540c\u6b65\u5de5\u5177\u7c7b"},{"location":"java%E5%90%8E%E7%AB%AF/%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7%E7%B1%BB/#_1","text":"","title":"\u540c\u6b65\u5de5\u5177\u7c7b"},{"location":"java%E5%90%8E%E7%AB%AF/%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7%E7%B1%BB/#countdownlatch","text":"CountDownLatch\u662f\u4e00\u79cd\u7075\u6d3b\u7684\u95ed\u9501\u5b9e\u73b0\uff0c\u5b83\u53ef\u4ee5\u4f7f\u4e00\u4e2a\u6216\u591a\u4e2a\u7ebf\u7a0b\u7b49\u5f85\u4e00\u7ec4\u4e8b\u4ef6\u7684\u53d1\u751f\u3002 1. \u521b\u5efa\u5bf9\u8c61 CountDownLatch startGate = new CountDownLatch(3); 2. \u5728\u67d0\u5904await startGate.await(); 3. \u8c03\u7528countdown()\u65b9\u6cd53\u6b21\u540e\u5c06\u4f7fawait\u7684\u7ebf\u7a0b\u4e0d\u518d\u963b\u585e startGate.countdown();","title":"CountDownLatch"},{"location":"java%E5%90%8E%E7%AB%AF/%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7%E7%B1%BB/#futuretask","text":"\u8868\u793a\u4e00\u79cd\u62bd\u8c61\u7684\u53ef\u751f\u6210\u7ed3\u679c\u7684\u8ba1\u7b97\u3002\u5c06\u8ba1\u7b97\u7ed3\u679c\u4ece\u6267\u884c\u8ba1\u7b97\u7684\u7ebf\u7a0b\u4f20\u9012\u5230\u83b7\u53d6\u8fd9\u4e2a\u7ed3\u679c\u7684\u7ebf\u7a0b\u3002 Future.get\u5c06\u963b\u585e\u76f4\u5230\u4efb\u52a1\u8fdb\u5165\u5b8c\u6210\u72b6\u6001\uff0c\u7136\u540e\u8fd4\u56de\u7ed3\u679c\u6216\u629b\u51fa\u5f02\u5e38\u3002 1. \u521b\u5efa\u5bf9\u8c61 FutureTask<XxClass> future = new FutureTask<XxClass>(new Callable<XxClass>(){ public XxClass call() { return XxClass(); } }); 2. future.start(); 3. \u4f7f\u7528get\u5f02\u6b65\u963b\u585e\u83b7\u53d6\u8ba1\u7b97\u7ed3\u679c try{ future.get(); ... } catch(ExecutionException e) { ... }","title":"FutureTask"},{"location":"java%E5%90%8E%E7%AB%AF/%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7%E7%B1%BB/#semaphore","text":"\u7528\u4e8e\u63a7\u5236\u540c\u65f6\u6267\u884c\u64cd\u4f5c\u7684\u6570\u91cf\uff0c\u5b9e\u73b0\u67d0\u79cd\u8d44\u6e90\u6c60\uff0c\u5bf9\u5bb9\u5668\u65bd\u52a0\u8fb9\u754c\u3002 Semaphore sem = new Semaphore(1); sem.acquire(); ... sem.release();","title":"Semaphore"},{"location":"java%E5%90%8E%E7%AB%AF/%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7%E7%B1%BB/#barrier","text":"","title":"\u6805\u680f\uff08Barrier\uff09"},{"location":"java%E5%90%8E%E7%AB%AF/%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7%E7%B1%BB/#cyclicbarrier","text":"CyclicBarrier\u53ef\u4ee5\u4f7f\u4e00\u5b9a\u6570\u91cf\u7684\u53c2\u4e0e\u65b9\u53cd\u590d\u5730\u5728\u6805\u680f\u4f4d\u7f6e\u6c47\u96c6\uff0c\u5b83\u5728\u5e76\u884c\u8fed\u4ee3\u7b97\u6cd5\u4e2d\u975e\u5e38\u6709\u7528\uff1a\u8fd9\u79cd\u7b97\u6cd5\u901a\u5e38\u5c06\u4e00\u4e2a\u95ee\u9898\u62c6\u5206\u6210\u4e00\u7cfb\u5217\u76f8\u4e92\u72ec\u7acb\u7684\u5b50\u95ee\u9898\u3002\uff08\u5373\u6805\u680f\u662f\u53ef\u91cd\u590d\u5229\u7528\u7684\uff09 1. \u521b\u5efaCyclicBarrier\u5bf9\u8c61\uff0c\u5f533\u4e2a\u7ebf\u7a0b\u5230\u8fbe\u6805\u680f\u4f4d\u7f6e\u65f6\u6267\u884crun()\u65b9\u6cd5 CyclicBarrier barrier = new CyclicBarrier(3, new Runnable(){ public void run(){ ... } }); 2. \u5728\u67d0\u4e2a\u7ebf\u7a0b\u7684run\u65b9\u6cd5\u4e2d\u8c03\u7528await\uff08\uff09\u7b49\u5f85\u5176\u4ed6\u7ebf\u7a0b\u5230\u8fbe\u6805\u680f\u4f4d\u7f6e public void run() { while(xx) { ... try { barrier.await(); } catch(InterruptedException ex) { ... // \u5982\u679c\u5bf9await\u7684\u8c03\u7528\u8d85\u65f6\uff0c\u6216\u8005await\u963b\u585e\u7684\u7ebf\u7a0b\u88ab\u4e2d\u65ad\uff0c\u90a3\u4e48\u6805\u680f\u5c31\u8ba4\u4e3a\u88ab\u6253\u7834\u4e86 } catch(BrokenBarrierException ex) { ... } } }","title":"CyclicBarrier"},{"location":"java%E5%90%8E%E7%AB%AF/%E5%90%8C%E6%AD%A5%E5%B7%A5%E5%85%B7%E7%B1%BB/#exchanger","text":"\u53e6\u4e00\u79cd\u5f62\u5f0f\u7684\u6805\u680f\u662f Exchanger \uff0c \u5b83\u662f\u4e00\u79cd\u4e24\u65b9\u6805\u680f\uff0c\u5404\u65b9\u5728\u6805\u680f\u4f4d\u7f6e\u4e0a\u4ea4\u6362\u6570\u636e\u3002\u5f53\u4e24\u65b9\u6267\u884c\u4e0d\u5bf9\u79f0\u7684\u64cd\u4f5c\u65f6\u4f1a\u975e\u5e38\u6709\u7528\u3002\u4f8b\u5982\u7528\u6765\u4ea4\u6362\u7f13\u51b2\u533a\u3002 \u6570\u636e\u7684\u4ea4\u6362\u65f6\u673a\u53d6\u51b3\u4e8e\u5e94\u7528\u7a0b\u5e8f\u7684\u54cd\u5e94\u9700\u6c42\u3002\u6700\u7b80\u5355\u7684\u7b56\u7565\u662f\u5f53\u7f13\u51b2\u533a\u88ab\u586b\u6ee1\u6216\u8005\u7a7a\u65f6\u8fdb\u884c\u4ea4\u6362\u3002\u8fd9\u79cd\u7b56\u7565\u4f1a\u4f7f\u4ea4\u6362\u7684\u6b21\u6570\u964d\u81f3\u6700\u4f4e\uff0c\u4f46\u5982\u679c\u65b0\u6570\u636e\u7684\u5230\u8fbe\u7387\u4e0d\u53ef\u9884\u6d4b\uff0c\u90a3\u4e48\u4e00\u4e9b\u6570\u636e\u7684\u5904\u7406\u8fc7\u7a0b\u5c31\u5c06\u5ef6\u8fdf\u3002\u53e6\u4e00\u79cd\u7b56\u7565\u662f\u5f53\u7f13\u51b2\u88ab\u586b\u5145\u5230\u4e00\u5b9a\u7a0b\u5ea6\u5e76\u4fdd\u6301\u4e00\u6bb5\u65f6\u95f4\u540e\u4e5f\u8fdb\u884c\u4ea4\u6362\u3002 class FillAndEmpty { Exchanger<DataBuffer> exchanger = new Exchanger<DataBuffer>(); DataBuffer initialEmptyBuffer = ... a made-up type DataBuffer initialFullBuffer = ... class FillingLoop implements Runnable { public void run() { DataBuffer currentBuffer = initialEmptyBuffer; try { while (currentBuffer != null) { addToBuffer(currentBuffer); if (currentBuffer.isFull()) currentBuffer = exchanger.exchange(currentBuffer); } } catch (InterruptedException ex) { ... handle ... } } } class EmptyingLoop implements Runnable { public void run() { DataBuffer currentBuffer = initialFullBuffer; try { while (currentBuffer != null) { takeFromBuffer(currentBuffer); if (currentBuffer.isEmpty()) currentBuffer = exchanger.exchange(currentBuffer); } } catch (InterruptedException ex) { ... handle ...} } } void start() { new Thread(new FillingLoop()).start(); new Thread(new EmptyingLoop()).start(); } }","title":"Exchanger"}]}